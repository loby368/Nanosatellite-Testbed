
Torque_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078b4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  08007a3c  08007a3c  00017a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007cd4  08007cd4  00020484  2**0
                  CONTENTS
  4 .ARM          00000000  08007cd4  08007cd4  00020484  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007cd4  08007cd4  00020484  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007cd4  08007cd4  00017cd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000484  20000000  08007cdc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003b8  20000488  08008160  00020488  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000840  08008160  00020840  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020484  2**0
                  CONTENTS, READONLY
 12 .debug_line   00039da6  00000000  00000000  000204b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   000391f4  00000000  00000000  0005a25a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000065e1  00000000  00000000  0009344e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001918  00000000  00000000  00099a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000d0a1a  00000000  00000000  0009b348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004d20  00000000  00000000  0016bd68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00029352  00000000  00000000  00170a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  000251a0  00000000  00000000  00199dda  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001bef7a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004bec  00000000  00000000  001befcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000488 	.word	0x20000488
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a24 	.word	0x08007a24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000048c 	.word	0x2000048c
 80001c4:	08007a24 	.word	0x08007a24

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__gedf2>:
 8000794:	f04f 3cff 	mov.w	ip, #4294967295
 8000798:	e006      	b.n	80007a8 <__cmpdf2+0x4>
 800079a:	bf00      	nop

0800079c <__ledf2>:
 800079c:	f04f 0c01 	mov.w	ip, #1
 80007a0:	e002      	b.n	80007a8 <__cmpdf2+0x4>
 80007a2:	bf00      	nop

080007a4 <__cmpdf2>:
 80007a4:	f04f 0c01 	mov.w	ip, #1
 80007a8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80007ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007b8:	bf18      	it	ne
 80007ba:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80007be:	d01b      	beq.n	80007f8 <__cmpdf2+0x54>
 80007c0:	b001      	add	sp, #4
 80007c2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007c6:	bf0c      	ite	eq
 80007c8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007cc:	ea91 0f03 	teqne	r1, r3
 80007d0:	bf02      	ittt	eq
 80007d2:	ea90 0f02 	teqeq	r0, r2
 80007d6:	2000      	moveq	r0, #0
 80007d8:	4770      	bxeq	lr
 80007da:	f110 0f00 	cmn.w	r0, #0
 80007de:	ea91 0f03 	teq	r1, r3
 80007e2:	bf58      	it	pl
 80007e4:	4299      	cmppl	r1, r3
 80007e6:	bf08      	it	eq
 80007e8:	4290      	cmpeq	r0, r2
 80007ea:	bf2c      	ite	cs
 80007ec:	17d8      	asrcs	r0, r3, #31
 80007ee:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007f2:	f040 0001 	orr.w	r0, r0, #1
 80007f6:	4770      	bx	lr
 80007f8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007fc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000800:	d102      	bne.n	8000808 <__cmpdf2+0x64>
 8000802:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000806:	d107      	bne.n	8000818 <__cmpdf2+0x74>
 8000808:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800080c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000810:	d1d6      	bne.n	80007c0 <__cmpdf2+0x1c>
 8000812:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000816:	d0d3      	beq.n	80007c0 <__cmpdf2+0x1c>
 8000818:	f85d 0b04 	ldr.w	r0, [sp], #4
 800081c:	4770      	bx	lr
 800081e:	bf00      	nop

08000820 <__aeabi_cdrcmple>:
 8000820:	4684      	mov	ip, r0
 8000822:	4610      	mov	r0, r2
 8000824:	4662      	mov	r2, ip
 8000826:	468c      	mov	ip, r1
 8000828:	4619      	mov	r1, r3
 800082a:	4663      	mov	r3, ip
 800082c:	e000      	b.n	8000830 <__aeabi_cdcmpeq>
 800082e:	bf00      	nop

08000830 <__aeabi_cdcmpeq>:
 8000830:	b501      	push	{r0, lr}
 8000832:	f7ff ffb7 	bl	80007a4 <__cmpdf2>
 8000836:	2800      	cmp	r0, #0
 8000838:	bf48      	it	mi
 800083a:	f110 0f00 	cmnmi.w	r0, #0
 800083e:	bd01      	pop	{r0, pc}

08000840 <__aeabi_dcmpeq>:
 8000840:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000844:	f7ff fff4 	bl	8000830 <__aeabi_cdcmpeq>
 8000848:	bf0c      	ite	eq
 800084a:	2001      	moveq	r0, #1
 800084c:	2000      	movne	r0, #0
 800084e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000852:	bf00      	nop

08000854 <__aeabi_dcmplt>:
 8000854:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000858:	f7ff ffea 	bl	8000830 <__aeabi_cdcmpeq>
 800085c:	bf34      	ite	cc
 800085e:	2001      	movcc	r0, #1
 8000860:	2000      	movcs	r0, #0
 8000862:	f85d fb08 	ldr.w	pc, [sp], #8
 8000866:	bf00      	nop

08000868 <__aeabi_dcmple>:
 8000868:	f84d ed08 	str.w	lr, [sp, #-8]!
 800086c:	f7ff ffe0 	bl	8000830 <__aeabi_cdcmpeq>
 8000870:	bf94      	ite	ls
 8000872:	2001      	movls	r0, #1
 8000874:	2000      	movhi	r0, #0
 8000876:	f85d fb08 	ldr.w	pc, [sp], #8
 800087a:	bf00      	nop

0800087c <__aeabi_dcmpge>:
 800087c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000880:	f7ff ffce 	bl	8000820 <__aeabi_cdrcmple>
 8000884:	bf94      	ite	ls
 8000886:	2001      	movls	r0, #1
 8000888:	2000      	movhi	r0, #0
 800088a:	f85d fb08 	ldr.w	pc, [sp], #8
 800088e:	bf00      	nop

08000890 <__aeabi_dcmpgt>:
 8000890:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000894:	f7ff ffc4 	bl	8000820 <__aeabi_cdrcmple>
 8000898:	bf34      	ite	cc
 800089a:	2001      	movcc	r0, #1
 800089c:	2000      	movcs	r0, #0
 800089e:	f85d fb08 	ldr.w	pc, [sp], #8
 80008a2:	bf00      	nop

080008a4 <__aeabi_d2f>:
 80008a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008a8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80008ac:	bf24      	itt	cs
 80008ae:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80008b2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80008b6:	d90d      	bls.n	80008d4 <__aeabi_d2f+0x30>
 80008b8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008bc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008c0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008c4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008c8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008cc:	bf08      	it	eq
 80008ce:	f020 0001 	biceq.w	r0, r0, #1
 80008d2:	4770      	bx	lr
 80008d4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008d8:	d121      	bne.n	800091e <__aeabi_d2f+0x7a>
 80008da:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008de:	bfbc      	itt	lt
 80008e0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008e4:	4770      	bxlt	lr
 80008e6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ea:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ee:	f1c2 0218 	rsb	r2, r2, #24
 80008f2:	f1c2 0c20 	rsb	ip, r2, #32
 80008f6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008fa:	fa20 f002 	lsr.w	r0, r0, r2
 80008fe:	bf18      	it	ne
 8000900:	f040 0001 	orrne.w	r0, r0, #1
 8000904:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000908:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800090c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000910:	ea40 000c 	orr.w	r0, r0, ip
 8000914:	fa23 f302 	lsr.w	r3, r3, r2
 8000918:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800091c:	e7cc      	b.n	80008b8 <__aeabi_d2f+0x14>
 800091e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000922:	d107      	bne.n	8000934 <__aeabi_d2f+0x90>
 8000924:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000928:	bf1e      	ittt	ne
 800092a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800092e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000932:	4770      	bxne	lr
 8000934:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000938:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800093c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000940:	4770      	bx	lr
 8000942:	bf00      	nop

08000944 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000944:	f8df d034 	ldr.w	sp, [pc, #52]	; 800097c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000948:	f001 fff8 	bl	800293c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800094c:	480c      	ldr	r0, [pc, #48]	; (8000980 <LoopForever+0x6>)
  ldr r1, =_edata
 800094e:	490d      	ldr	r1, [pc, #52]	; (8000984 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <LoopForever+0xe>)
  movs r3, #0
 8000952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000954:	e002      	b.n	800095c <LoopCopyDataInit>

08000956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800095a:	3304      	adds	r3, #4

0800095c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800095c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800095e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000960:	d3f9      	bcc.n	8000956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000962:	4a0a      	ldr	r2, [pc, #40]	; (800098c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000964:	4c0a      	ldr	r4, [pc, #40]	; (8000990 <LoopForever+0x16>)
  movs r3, #0
 8000966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000968:	e001      	b.n	800096e <LoopFillZerobss>

0800096a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800096a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800096c:	3204      	adds	r2, #4

0800096e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800096e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000970:	d3fb      	bcc.n	800096a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000972:	f007 f82b 	bl	80079cc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000976:	f000 f87b 	bl	8000a70 <main>

0800097a <LoopForever>:

LoopForever:
    b LoopForever
 800097a:	e7fe      	b.n	800097a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800097c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000984:	20000484 	.word	0x20000484
  ldr r2, =_sidata
 8000988:	08007cdc 	.word	0x08007cdc
  ldr r2, =_sbss
 800098c:	20000488 	.word	0x20000488
  ldr r4, =_ebss
 8000990:	20000840 	.word	0x20000840

08000994 <BusFault_Handler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000994:	e7fe      	b.n	8000994 <BusFault_Handler>
	...

08000998 <BNO055_Read.2.constprop.1>:
		}
		return;
	}

	// Write to BNO055 Register
	void BNO055_Read(uint8_t reg, uint8_t *data, uint8_t len) {
 8000998:	b570      	push	{r4, r5, r6, lr}
		uint8_t statusTx;
		uint8_t statusRx;
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 800099a:	f8dc 2030 	ldr.w	r2, [ip, #48]	; 0x30
	void BNO055_Read(uint8_t reg, uint8_t *data, uint8_t len) {
 800099e:	b084      	sub	sp, #16
 80009a0:	4664      	mov	r4, ip
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 80009a2:	260a      	movs	r6, #10
	void BNO055_Read(uint8_t reg, uint8_t *data, uint8_t len) {
 80009a4:	4603      	mov	r3, r0
 80009a6:	460d      	mov	r5, r1
 80009a8:	f88d 300f 	strb.w	r3, [sp, #15]
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 80009ac:	9600      	str	r6, [sp, #0]
 80009ae:	4610      	mov	r0, r2
 80009b0:	2301      	movs	r3, #1
 80009b2:	f10d 020f 	add.w	r2, sp, #15
 80009b6:	2150      	movs	r1, #80	; 0x50
 80009b8:	f003 f832 	bl	8003a20 <HAL_I2C_Master_Transmit>
				BNO055_I2C_ADDR << 1, &reg, 1, 10);
		statusRx = HAL_I2C_Master_Receive(BNO055_I2C_PORT, BNO055_I2C_ADDR << 1,
 80009bc:	6b20      	ldr	r0, [r4, #48]	; 0x30
 80009be:	9600      	str	r6, [sp, #0]
 80009c0:	2301      	movs	r3, #1
 80009c2:	462a      	mov	r2, r5
 80009c4:	2150      	movs	r1, #80	; 0x50
 80009c6:	f003 f9a9 	bl	8003d1c <HAL_I2C_Master_Receive>
		}
		if (statusRx != HAL_OK) {
			//printf("\n### Error Rx: BNO055\n");
		}
		return;
	}
 80009ca:	b004      	add	sp, #16
 80009cc:	bd70      	pop	{r4, r5, r6, pc}
 80009ce:	bf00      	nop

080009d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009d0:	b510      	push	{r4, lr}
 80009d2:	b09e      	sub	sp, #120	; 0x78
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d4:	2100      	movs	r1, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009d6:	2234      	movs	r2, #52	; 0x34
 80009d8:	a810      	add	r0, sp, #64	; 0x40
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009da:	e9cd 1101 	strd	r1, r1, [sp, #4]
 80009de:	e9cd 1103 	strd	r1, r1, [sp, #12]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e2:	9108      	str	r1, [sp, #32]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e4:	9100      	str	r1, [sp, #0]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	9109      	str	r1, [sp, #36]	; 0x24
 80009e8:	910c      	str	r1, [sp, #48]	; 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80009ea:	f007 f813 	bl	8007a14 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80009ee:	2003      	movs	r0, #3
 80009f0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 80009f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009f8:	2001      	movs	r0, #1
 80009fa:	2110      	movs	r1, #16
 80009fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a00:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a02:	f44f 3280 	mov.w	r2, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a06:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0a:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0c:	e9cd 420d 	strd	r4, r2, [sp, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000a10:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a12:	f003 fadd 	bl	8003fd0 <HAL_RCC_OscConfig>
 8000a16:	b108      	cbz	r0, 8000a1c <SystemClock_Config+0x4c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <SystemClock_Config+0x4a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a1c:	220f      	movs	r2, #15
 8000a1e:	2302      	movs	r3, #2
 8000a20:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a24:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a2c:	4621      	mov	r1, r4
 8000a2e:	4668      	mov	r0, sp
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a30:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a34:	f003 fdb4 	bl	80045a0 <HAL_RCC_ClockConfig>
 8000a38:	b108      	cbz	r0, 8000a3e <SystemClock_Config+0x6e>
 8000a3a:	b672      	cpsid	i
  while (1)
 8000a3c:	e7fe      	b.n	8000a3c <SystemClock_Config+0x6c>
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a3e:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000a68 <SystemClock_Config+0x98>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000a42:	f241 0221 	movw	r2, #4129	; 0x1021
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8000a46:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a4a:	a810      	add	r0, sp, #64	; 0x40
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000a4c:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8000a50:	9210      	str	r2, [sp, #64]	; 0x40
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_PLLCLK;
 8000a52:	9318      	str	r3, [sp, #96]	; 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a54:	f003 ff04 	bl	8004860 <HAL_RCCEx_PeriphCLKConfig>
 8000a58:	b108      	cbz	r0, 8000a5e <SystemClock_Config+0x8e>
 8000a5a:	b672      	cpsid	i
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <SystemClock_Config+0x8c>
}
 8000a5e:	b01e      	add	sp, #120	; 0x78
 8000a60:	bd10      	pop	{r4, pc}
 8000a62:	bf00      	nop
 8000a64:	f3af 8000 	nop.w
	...

08000a70 <main>:
{
 8000a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a74:	ed2d 8b02 	vpush	{d8}
 8000a78:	b0b9      	sub	sp, #228	; 0xe4
	int Loop_Counter = 0;						// Keep track of loop time to assign target heading
 8000a7a:	2400      	movs	r4, #0
	float Euler_Heading_Rad = 0; 				// Store current inertial Euler Heading as float
 8000a7c:	2300      	movs	r3, #0
	int Action_Loop_1 = Update_Interval_1 * Seconds_to_Loops;
 8000a7e:	f641 524c 	movw	r2, #7500	; 0x1d4c
	float LSB_to_Rad = 1 / 900.0; 				// BNO055 Datasheet pg.35 - LSB to Radians
 8000a82:	48ae      	ldr	r0, [pc, #696]	; (8000d3c <main+0x2cc>)
	float calibrationFactor = 3040000.0; 		// [Tunable parameter] - Converts Voltage to Newtons
 8000a84:	49ae      	ldr	r1, [pc, #696]	; (8000d40 <main+0x2d0>)
	I2C_HandleTypeDef *BNO055_I2C_PORT = &hi2c1; 	// [Defnied in CubeMx] - I2C 1
 8000a86:	4eaf      	ldr	r6, [pc, #700]	; (8000d44 <main+0x2d4>)
	float LSB_to_Rad = 1 / 900.0; 				// BNO055 Datasheet pg.35 - LSB to Radians
 8000a88:	902f      	str	r0, [sp, #188]	; 0xbc
	float Target_Heading_1 = 4; // Radians
 8000a8a:	f04f 4581 	mov.w	r5, #1082130432	; 0x40800000
	int Action_Loop_1 = Update_Interval_1 * Seconds_to_Loops;
 8000a8e:	e9cd 2427 	strd	r2, r4, [sp, #156]	; 0x9c
	float Target_Heading_1 = 4; // Radians
 8000a92:	9526      	str	r5, [sp, #152]	; 0x98
	int Ramp_Time = 10; 						// [Tunable parameter] - 10ms should be fine?
 8000a94:	200a      	movs	r0, #10
int main(void)
 8000a96:	ad44      	add	r5, sp, #272	; 0x110
	int Action_Loop_2 = Update_Interval_2 * Seconds_to_Loops;
 8000a98:	9225      	str	r2, [sp, #148]	; 0x94
	float Euler_Heading_Rad = 0; 				// Store current inertial Euler Heading as float
 8000a9a:	9334      	str	r3, [sp, #208]	; 0xd0
	float Target_Heading_2 = 1; // Radians
 8000a9c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	float Initial_Euler_Heading_Rad = 0; 		// Initial Inertial Euler Heading in Radians as float
 8000aa0:	932e      	str	r3, [sp, #184]	; 0xb8
	float LoadCellRead_Initial[2] = { 0, 0 };		// Initial Load Cell readings in Newtons
 8000aa2:	932a      	str	r3, [sp, #168]	; 0xa8
 8000aa4:	932b      	str	r3, [sp, #172]	; 0xac
	float LoadCellRead[2] = { 0, 0 }; 			// Current Load Cell Readings in Newtons
 8000aa6:	9332      	str	r3, [sp, #200]	; 0xc8
 8000aa8:	9333      	str	r3, [sp, #204]	; 0xcc
	float Target_Heading = Target_Heading_0; // Radians
 8000aaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
	float calibrationFactor = 3040000.0; 		// [Tunable parameter] - Converts Voltage to Newtons
 8000aae:	912c      	str	r1, [sp, #176]	; 0xb0
	float Target_Heading_2 = 1; // Radians
 8000ab0:	9224      	str	r2, [sp, #144]	; 0x90
	float Target_Heading = Target_Heading_0; // Radians
 8000ab2:	9331      	str	r3, [sp, #196]	; 0xc4
int main(void)
 8000ab4:	9537      	str	r5, [sp, #220]	; 0xdc
	uint8_t Operating_Mode = 0; 				// IMU Operating Mode
 8000ab6:	f88d 40d8 	strb.w	r4, [sp, #216]	; 0xd8
	uint8_t Mag_Calibration_Status = 0; 		// Store Magnetometer Calibration Status
 8000aba:	f8ad 40d6 	strh.w	r4, [sp, #214]	; 0xd6
	int Ramp_Time = 10; 						// [Tunable parameter] - 10ms should be fine?
 8000abe:	9029      	str	r0, [sp, #164]	; 0xa4
	I2C_HandleTypeDef *BNO055_I2C_PORT = &hi2c1; 	// [Defnied in CubeMx] - I2C 1
 8000ac0:	9630      	str	r6, [sp, #192]	; 0xc0
	I2C_HandleTypeDef *ARDUINO_NANO_PORT = &hi2c1; 	// [Defnied in CubeMx] - I2C 1
 8000ac2:	962d      	str	r6, [sp, #180]	; 0xb4
	HAL_Init();
 8000ac4:	f001 ff68 	bl	8002998 <HAL_Init>
	Torque_Controller_initialize(); // Simulink Embedded Coder Init Function
 8000ac8:	f005 f822 	bl	8005b10 <Torque_Controller_initialize>
	SystemClock_Config();
 8000acc:	f7ff ff80 	bl	80009d0 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad0:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
 8000ad4:	e9cd 441a 	strd	r4, r4, [sp, #104]	; 0x68
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ad8:	4b9b      	ldr	r3, [pc, #620]	; (8000d48 <main+0x2d8>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ada:	941c      	str	r4, [sp, #112]	; 0x70
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000adc:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000ade:	489b      	ldr	r0, [pc, #620]	; (8000d4c <main+0x2dc>)
  hadc1.Instance = ADC1;
 8000ae0:	4d9b      	ldr	r5, [pc, #620]	; (8000d50 <main+0x2e0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ae2:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8000ae6:	615a      	str	r2, [r3, #20]
 8000ae8:	695a      	ldr	r2, [r3, #20]
 8000aea:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8000aee:	9202      	str	r2, [sp, #8]
 8000af0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000af2:	695a      	ldr	r2, [r3, #20]
 8000af4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8000af8:	615a      	str	r2, [r3, #20]
 8000afa:	695a      	ldr	r2, [r3, #20]
 8000afc:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8000b00:	9203      	str	r2, [sp, #12]
 8000b02:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b04:	695a      	ldr	r2, [r3, #20]
 8000b06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8000b0a:	615a      	str	r2, [r3, #20]
 8000b0c:	695a      	ldr	r2, [r3, #20]
 8000b0e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8000b12:	9204      	str	r2, [sp, #16]
 8000b14:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b16:	695a      	ldr	r2, [r3, #20]
 8000b18:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000b1c:	615a      	str	r2, [r3, #20]
 8000b1e:	695b      	ldr	r3, [r3, #20]
 8000b20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b24:	9305      	str	r3, [sp, #20]
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000b26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2a:	4622      	mov	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b2c:	9b05      	ldr	r3, [sp, #20]
  HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8000b2e:	f002 fd85 	bl	800363c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000b32:	4888      	ldr	r0, [pc, #544]	; (8000d54 <main+0x2e4>)
 8000b34:	4622      	mov	r2, r4
 8000b36:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000b3a:	f002 fd7f 	bl	800363c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LED2_Pin;
 8000b3e:	f04f 0a00 	mov.w	sl, #0
 8000b42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b46:	2301      	movs	r3, #1
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000b48:	4880      	ldr	r0, [pc, #512]	; (8000d4c <main+0x2dc>)
 8000b4a:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = LED2_Pin;
 8000b4c:	f04f 0b00 	mov.w	fp, #0
 8000b50:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8000b54:	e9cd ab1a 	strd	sl, fp, [sp, #104]	; 0x68
  HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000b58:	f002 fc8c 	bl	8003474 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000b5c:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000b60:	2301      	movs	r3, #1
 8000b62:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b66:	487b      	ldr	r0, [pc, #492]	; (8000d54 <main+0x2e4>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000b68:	2303      	movs	r3, #3
 8000b6a:	2202      	movs	r2, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b6c:	a918      	add	r1, sp, #96	; 0x60
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000b6e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b72:	f002 fc7f 	bl	8003474 <HAL_GPIO_Init>
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000b76:	2228      	movs	r2, #40	; 0x28
 8000b78:	4621      	mov	r1, r4
 8000b7a:	a818      	add	r0, sp, #96	; 0x60
 8000b7c:	f006 ff4a 	bl	8007a14 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b84:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
 8000b88:	e9c5 c300 	strd	ip, r3, [r5]
  hadc1.Init.NbrOfConversion = 2;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b90:	2201      	movs	r2, #1
 8000b92:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000b94:	2701      	movs	r7, #1
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000b96:	f04f 0920 	mov.w	r9, #32
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b9a:	f04f 0804 	mov.w	r8, #4
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b9e:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ba2:	832c      	strh	r4, [r5, #24]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ba4:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8000baa:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
 8000bae:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb2:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bb4:	612f      	str	r7, [r5, #16]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bb6:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000bba:	f8c5 900c 	str.w	r9, [r5, #12]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bbe:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc2:	f8c5 8014 	str.w	r8, [r5, #20]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000bc6:	636f      	str	r7, [r5, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bc8:	f001 ff5c 	bl	8002a84 <HAL_ADC_Init>
 8000bcc:	b108      	cbz	r0, 8000bd2 <main+0x162>
 8000bce:	b672      	cpsid	i
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <main+0x160>
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000bd2:	2303      	movs	r3, #3
  sConfigInjected.InjectedOffsetNumber = ADC_OFFSET_NONE;
 8000bd4:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
  sConfigInjected.InjectedSingleDiff = ADC_SINGLE_ENDED;
 8000bd8:	901b      	str	r0, [sp, #108]	; 0x6c
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000bda:	f8ad 007c 	strh.w	r0, [sp, #124]	; 0x7c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000bde:	931e      	str	r3, [sp, #120]	; 0x78
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000be0:	2200      	movs	r2, #0
 8000be2:	2340      	movs	r3, #64	; 0x40
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000be4:	a918      	add	r1, sp, #96	; 0x60
 8000be6:	4628      	mov	r0, r5
  sConfigInjected.InjectedRank = ADC_INJECTED_RANK_1;
 8000be8:	e9cd 7718 	strd	r7, r7, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_TRGO;
 8000bec:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_19CYCLES_5;
 8000bf0:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
  sConfigInjected.QueueInjectedContext = ENABLE;
 8000bf4:	f88d 707e 	strb.w	r7, [sp, #126]	; 0x7e
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000bf8:	f002 f9d0 	bl	8002f9c <HAL_ADCEx_InjectedConfigChannel>
 8000bfc:	b108      	cbz	r0, 8000c02 <main+0x192>
 8000bfe:	b672      	cpsid	i
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <main+0x190>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000c02:	2207      	movs	r2, #7
 8000c04:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c06:	a918      	add	r1, sp, #96	; 0x60
 8000c08:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_7;
 8000c0a:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c0e:	f002 f9c5 	bl	8002f9c <HAL_ADCEx_InjectedConfigChannel>
 8000c12:	b108      	cbz	r0, 8000c18 <main+0x1a8>
 8000c14:	b672      	cpsid	i
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <main+0x1a6>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000c18:	2206      	movs	r2, #6
 8000c1a:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c1c:	a918      	add	r1, sp, #96	; 0x60
 8000c1e:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_6;
 8000c20:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000c24:	f002 f9ba 	bl	8002f9c <HAL_ADCEx_InjectedConfigChannel>
 8000c28:	b108      	cbz	r0, 8000c2e <main+0x1be>
 8000c2a:	b672      	cpsid	i
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <main+0x1bc>
  sConfig.Channel = ADC_CHANNEL_2;
 8000c2e:	2202      	movs	r2, #2
 8000c30:	2301      	movs	r3, #1
 8000c32:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c36:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Channel = ADC_CHANNEL_2;
 8000c38:	2206      	movs	r2, #6
 8000c3a:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3c:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_2;
 8000c3e:	e9cd ab14 	strd	sl, fp, [sp, #80]	; 0x50
 8000c42:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c46:	f002 f811 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8000c4a:	b108      	cbz	r0, 8000c50 <main+0x1e0>
 8000c4c:	b672      	cpsid	i
  while (1)
 8000c4e:	e7fe      	b.n	8000c4e <main+0x1de>
  sConfig.Channel = ADC_CHANNEL_8;
 8000c50:	2208      	movs	r2, #8
 8000c52:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c54:	4628      	mov	r0, r5
 8000c56:	a910      	add	r1, sp, #64	; 0x40
  sConfig.Channel = ADC_CHANNEL_8;
 8000c58:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5c:	f002 f806 	bl	8002c6c <HAL_ADC_ConfigChannel>
 8000c60:	4604      	mov	r4, r0
 8000c62:	b108      	cbz	r0, 8000c68 <main+0x1f8>
 8000c64:	b672      	cpsid	i
  while (1)
 8000c66:	e7fe      	b.n	8000c66 <main+0x1f6>
  htim1.Instance = TIM1;
 8000c68:	4d3b      	ldr	r5, [pc, #236]	; (8000d58 <main+0x2e8>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c6a:	900a      	str	r0, [sp, #40]	; 0x28
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c6c:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
 8000c70:	e9cd 0012 	strd	r0, r0, [sp, #72]	; 0x48
 8000c74:	e9cd 0014 	strd	r0, r0, [sp, #80]	; 0x50
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c78:	e9cd 000b 	strd	r0, r0, [sp, #44]	; 0x2c
 8000c7c:	e9cd 000d 	strd	r0, r0, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c80:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8000c84:	9006      	str	r0, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c86:	9016      	str	r0, [sp, #88]	; 0x58
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000c88:	4601      	mov	r1, r0
 8000c8a:	222c      	movs	r2, #44	; 0x2c
 8000c8c:	a818      	add	r0, sp, #96	; 0x60
 8000c8e:	f006 fec1 	bl	8007a14 <memset>
  htim1.Instance = TIM1;
 8000c92:	4b32      	ldr	r3, [pc, #200]	; (8000d5c <main+0x2ec>)
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000c94:	616f      	str	r7, [r5, #20]
  htim1.Instance = TIM1;
 8000c96:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000c98:	f44f 6716 	mov.w	r7, #2400	; 0x960
 8000c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ca0:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000ca2:	e9c5 7303 	strd	r7, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000ca6:	f8c5 9008 	str.w	r9, [r5, #8]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000caa:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cac:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cae:	f003 ff53 	bl	8004b58 <HAL_TIM_Base_Init>
 8000cb2:	b108      	cbz	r0, 8000cb8 <main+0x248>
 8000cb4:	b672      	cpsid	i
  while (1)
 8000cb6:	e7fe      	b.n	8000cb6 <main+0x246>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f003 ffcb 	bl	8004c54 <HAL_TIM_PWM_Init>
 8000cbe:	b108      	cbz	r0, 8000cc4 <main+0x254>
 8000cc0:	b672      	cpsid	i
  while (1)
 8000cc2:	e7fe      	b.n	8000cc2 <main+0x252>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000cc4:	2206      	movs	r2, #6
 8000cc6:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000cc8:	a90a      	add	r1, sp, #40	; 0x28
 8000cca:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ccc:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000cd0:	f004 f83c 	bl	8004d4c <HAL_TIM_SlaveConfigSynchro>
 8000cd4:	b108      	cbz	r0, 8000cda <main+0x26a>
 8000cd6:	b672      	cpsid	i
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <main+0x268>
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cda:	9008      	str	r0, [sp, #32]
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000cdc:	2270      	movs	r2, #112	; 0x70
 8000cde:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce0:	a906      	add	r1, sp, #24
 8000ce2:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC4REF;
 8000ce4:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ce8:	f004 fa24 	bl	8005134 <HAL_TIMEx_MasterConfigSynchronization>
 8000cec:	b108      	cbz	r0, 8000cf2 <main+0x282>
 8000cee:	b672      	cpsid	i
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <main+0x280>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cf2:	2460      	movs	r4, #96	; 0x60
 8000cf4:	f44f 6596 	mov.w	r5, #1200	; 0x4b0
 8000cf8:	e9cd 4510 	strd	r4, r5, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000cfc:	2200      	movs	r2, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000cfe:	2400      	movs	r4, #0
 8000d00:	2500      	movs	r5, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d02:	4815      	ldr	r0, [pc, #84]	; (8000d58 <main+0x2e8>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d04:	9216      	str	r2, [sp, #88]	; 0x58
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d06:	a910      	add	r1, sp, #64	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d08:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8000d0c:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d10:	f004 f8e8 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 8000d14:	b108      	cbz	r0, 8000d1a <main+0x2aa>
 8000d16:	b672      	cpsid	i
  while (1)
 8000d18:	e7fe      	b.n	8000d18 <main+0x2a8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d1a:	480f      	ldr	r0, [pc, #60]	; (8000d58 <main+0x2e8>)
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	a910      	add	r1, sp, #64	; 0x40
 8000d20:	f004 f8e0 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 8000d24:	b108      	cbz	r0, 8000d2a <main+0x2ba>
 8000d26:	b672      	cpsid	i
  while (1)
 8000d28:	e7fe      	b.n	8000d28 <main+0x2b8>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d2a:	480b      	ldr	r0, [pc, #44]	; (8000d58 <main+0x2e8>)
 8000d2c:	2208      	movs	r2, #8
 8000d2e:	a910      	add	r1, sp, #64	; 0x40
 8000d30:	f004 f8d8 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 8000d34:	b1a0      	cbz	r0, 8000d60 <main+0x2f0>
 8000d36:	b672      	cpsid	i
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <main+0x2c8>
 8000d3a:	bf00      	nop
 8000d3c:	3a91a2b4 	.word	0x3a91a2b4
 8000d40:	4a398c00 	.word	0x4a398c00
 8000d44:	200004f8 	.word	0x200004f8
 8000d48:	40021000 	.word	0x40021000
 8000d4c:	48000400 	.word	0x48000400
 8000d50:	200004a8 	.word	0x200004a8
 8000d54:	48000800 	.word	0x48000800
 8000d58:	2000054c 	.word	0x2000054c
 8000d5c:	40012c00 	.word	0x40012c00
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d60:	f04f 0870 	mov.w	r8, #112	; 0x70
 8000d64:	f640 195f 	movw	r9, #2399	; 0x95f
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d68:	4845      	ldr	r0, [pc, #276]	; (8000e80 <main+0x410>)
 8000d6a:	220c      	movs	r2, #12
 8000d6c:	a910      	add	r1, sp, #64	; 0x40
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000d6e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000d72:	f004 f8b7 	bl	8004ee4 <HAL_TIM_PWM_ConfigChannel>
 8000d76:	b108      	cbz	r0, 8000d7c <main+0x30c>
 8000d78:	b672      	cpsid	i
  while (1)
 8000d7a:	e7fe      	b.n	8000d7a <main+0x30a>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d84:	e9cd 2318 	strd	r2, r3, [sp, #96]	; 0x60
 8000d88:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
 8000d92:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d96:	2300      	movs	r3, #0
 8000d98:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000d9c:	9022      	str	r0, [sp, #136]	; 0x88
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000d9e:	2203      	movs	r2, #3
 8000da0:	2300      	movs	r3, #0
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000da2:	4837      	ldr	r0, [pc, #220]	; (8000e80 <main+0x410>)
 8000da4:	a918      	add	r1, sp, #96	; 0x60
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000da6:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
 8000daa:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dae:	f004 f9f9 	bl	80051a4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000db2:	4604      	mov	r4, r0
 8000db4:	b108      	cbz	r0, 8000dba <main+0x34a>
 8000db6:	b672      	cpsid	i
  while (1)
 8000db8:	e7fe      	b.n	8000db8 <main+0x348>
  HAL_TIM_MspPostInit(&htim1);
 8000dba:	4831      	ldr	r0, [pc, #196]	; (8000e80 <main+0x410>)
 8000dbc:	f001 fcec 	bl	8002798 <HAL_TIM_MspPostInit>
	MX_MotorControl_Init();
 8000dc0:	f001 f8da 	bl	8001f78 <MX_MotorControl_Init>
  hi2c1.Init.Timing = 0x0000020B;
 8000dc4:	492f      	ldr	r1, [pc, #188]	; (8000e84 <main+0x414>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dc6:	4830      	ldr	r0, [pc, #192]	; (8000e88 <main+0x418>)
  hi2c1.Init.OwnAddress1 = 0;
 8000dc8:	60b4      	str	r4, [r6, #8]
  hi2c1.Init.Timing = 0x0000020B;
 8000dca:	f240 230b 	movw	r3, #523	; 0x20b
 8000dce:	e9c6 1300 	strd	r1, r3, [r6]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd2:	2301      	movs	r3, #1
  hi2c1.Init.OwnAddress2 = 0;
 8000dd4:	e9c6 4404 	strd	r4, r4, [r6, #16]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dd8:	e9c6 4406 	strd	r4, r4, [r6, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ddc:	6234      	str	r4, [r6, #32]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dde:	60f3      	str	r3, [r6, #12]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000de0:	f002 fdca 	bl	8003978 <HAL_I2C_Init>
 8000de4:	4601      	mov	r1, r0
 8000de6:	b108      	cbz	r0, 8000dec <main+0x37c>
 8000de8:	b672      	cpsid	i
  while (1)
 8000dea:	e7fe      	b.n	8000dea <main+0x37a>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dec:	4826      	ldr	r0, [pc, #152]	; (8000e88 <main+0x418>)
 8000dee:	f003 f881 	bl	8003ef4 <HAL_I2CEx_ConfigAnalogFilter>
 8000df2:	4601      	mov	r1, r0
 8000df4:	b108      	cbz	r0, 8000dfa <main+0x38a>
 8000df6:	b672      	cpsid	i
  while (1)
 8000df8:	e7fe      	b.n	8000df8 <main+0x388>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000dfa:	4823      	ldr	r0, [pc, #140]	; (8000e88 <main+0x418>)
 8000dfc:	f003 f8a4 	bl	8003f48 <HAL_I2CEx_ConfigDigitalFilter>
 8000e00:	b108      	cbz	r0, 8000e06 <main+0x396>
 8000e02:	b672      	cpsid	i
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <main+0x394>
  huart1.Instance = USART1;
 8000e06:	4b21      	ldr	r3, [pc, #132]	; (8000e8c <main+0x41c>)
  huart1.Init.BaudRate = 115200;
 8000e08:	4a21      	ldr	r2, [pc, #132]	; (8000e90 <main+0x420>)
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e0a:	6118      	str	r0, [r3, #16]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e0c:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e10:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e14:	e9c3 0008 	strd	r0, r0, [r3, #32]
  huart1.Init.BaudRate = 115200;
 8000e18:	f44f 35e1 	mov.w	r5, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e1c:	240c      	movs	r4, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e1e:	4618      	mov	r0, r3
  huart1.Init.BaudRate = 115200;
 8000e20:	e9c3 2500 	strd	r2, r5, [r3]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e24:	615c      	str	r4, [r3, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e26:	f004 fcb3 	bl	8005790 <HAL_UART_Init>
 8000e2a:	b108      	cbz	r0, 8000e30 <main+0x3c0>
 8000e2c:	b672      	cpsid	i
  while (1)
 8000e2e:	e7fe      	b.n	8000e2e <main+0x3be>
  huart2.Instance = USART2;
 8000e30:	4b18      	ldr	r3, [pc, #96]	; (8000e94 <main+0x424>)
 8000e32:	4a19      	ldr	r2, [pc, #100]	; (8000e98 <main+0x428>)
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e34:	6118      	str	r0, [r3, #16]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e36:	e9c3 0002 	strd	r0, r0, [r3, #8]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e3a:	e9c3 0006 	strd	r0, r0, [r3, #24]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3e:	e9c3 0008 	strd	r0, r0, [r3, #32]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e42:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 8000e44:	605d      	str	r5, [r3, #4]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e46:	615c      	str	r4, [r3, #20]
  huart2.Instance = USART2;
 8000e48:	601a      	str	r2, [r3, #0]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e4a:	f004 fca1 	bl	8005790 <HAL_UART_Init>
 8000e4e:	b108      	cbz	r0, 8000e54 <main+0x3e4>
 8000e50:	b672      	cpsid	i
  while (1)
 8000e52:	e7fe      	b.n	8000e52 <main+0x3e2>
  huart3.Instance = USART3;
 8000e54:	4811      	ldr	r0, [pc, #68]	; (8000e9c <main+0x42c>)
  huart3.Init.BaudRate = 115200;
 8000e56:	4a12      	ldr	r2, [pc, #72]	; (8000ea0 <main+0x430>)
 8000e58:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000e5c:	e9c0 2300 	strd	r2, r3, [r0]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e60:	2300      	movs	r3, #0
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e62:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e66:	e9c0 3306 	strd	r3, r3, [r0, #24]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e6a:	e9c0 3308 	strd	r3, r3, [r0, #32]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e6e:	6103      	str	r3, [r0, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e70:	230c      	movs	r3, #12
 8000e72:	6143      	str	r3, [r0, #20]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e74:	f004 fc8c 	bl	8005790 <HAL_UART_Init>
 8000e78:	4604      	mov	r4, r0
 8000e7a:	b198      	cbz	r0, 8000ea4 <main+0x434>
 8000e7c:	b672      	cpsid	i
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <main+0x40e>
 8000e80:	2000054c 	.word	0x2000054c
 8000e84:	40005400 	.word	0x40005400
 8000e88:	200004f8 	.word	0x200004f8
 8000e8c:	20000598 	.word	0x20000598
 8000e90:	40013800 	.word	0x40013800
 8000e94:	20000620 	.word	0x20000620
 8000e98:	40004400 	.word	0x40004400
 8000e9c:	200006a8 	.word	0x200006a8
 8000ea0:	40004800 	.word	0x40004800
  HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 4, 1);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	2018      	movs	r0, #24
 8000eaa:	f002 fa77 	bl	800339c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8000eae:	2018      	movs	r0, #24
 8000eb0:	f002 fab2 	bl	8003418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8000eb4:	4622      	mov	r2, r4
 8000eb6:	4621      	mov	r1, r4
 8000eb8:	2019      	movs	r0, #25
 8000eba:	f002 fa6f 	bl	800339c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000ebe:	2019      	movs	r0, #25
 8000ec0:	f002 faaa 	bl	8003418 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC1_IRQn, 2, 0);
 8000ec4:	4622      	mov	r2, r4
 8000ec6:	2102      	movs	r1, #2
 8000ec8:	2012      	movs	r0, #18
 8000eca:	f002 fa67 	bl	800339c <HAL_NVIC_SetPriority>
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8000ece:	240a      	movs	r4, #10
  HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8000ed0:	2012      	movs	r0, #18
 8000ed2:	f002 faa1 	bl	8003418 <HAL_NVIC_EnableIRQ>
		uint8_t txdata[2] = { reg, data };
 8000ed6:	253d      	movs	r5, #61	; 0x3d
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8000ed8:	2302      	movs	r3, #2
 8000eda:	aa18      	add	r2, sp, #96	; 0x60
 8000edc:	2150      	movs	r1, #80	; 0x50
 8000ede:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8000ee0:	9400      	str	r4, [sp, #0]
		uint8_t txdata[2] = { reg, data };
 8000ee2:	f8ad 5060 	strh.w	r5, [sp, #96]	; 0x60
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8000ee6:	f002 fd9b 	bl	8003a20 <HAL_I2C_Master_Transmit>
		HAL_Delay(19); //Time taken to to switch to CONFIG Mode
 8000eea:	2013      	movs	r0, #19
 8000eec:	f001 fd78 	bl	80029e0 <HAL_Delay>
		BNO055_Read(BNO055_OPR_MODE, &Operating_Mode, 1); //Check Operating Mode (Data Sheet pg.21)
 8000ef0:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	a936      	add	r1, sp, #216	; 0xd8
 8000ef8:	f7ff fd4e 	bl	8000998 <BNO055_Read.2.constprop.1>
		uint8_t txdata[2] = { reg, data };
 8000efc:	f240 663b 	movw	r6, #1595	; 0x63b
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8000f00:	2302      	movs	r3, #2
 8000f02:	aa18      	add	r2, sp, #96	; 0x60
 8000f04:	2150      	movs	r1, #80	; 0x50
 8000f06:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8000f08:	9400      	str	r4, [sp, #0]
		uint8_t txdata[2] = { reg, data };
 8000f0a:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8000f0e:	f002 fd87 	bl	8003a20 <HAL_I2C_Master_Transmit>
		uint8_t txdata[2] = { reg, data };
 8000f12:	f640 463d 	movw	r6, #3133	; 0xc3d
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8000f16:	2302      	movs	r3, #2
 8000f18:	aa18      	add	r2, sp, #96	; 0x60
 8000f1a:	2150      	movs	r1, #80	; 0x50
 8000f1c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8000f1e:	9400      	str	r4, [sp, #0]
		uint8_t txdata[2] = { reg, data };
 8000f20:	f8ad 6060 	strh.w	r6, [sp, #96]	; 0x60
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8000f24:	f002 fd7c 	bl	8003a20 <HAL_I2C_Master_Transmit>
		HAL_Delay(7); //Time to switch to Other Modes
 8000f28:	2007      	movs	r0, #7
 8000f2a:	f001 fd59 	bl	80029e0 <HAL_Delay>
		BNO055_Read(BNO055_OPR_MODE, &Operating_Mode, 1); //Check Operating Mode
 8000f2e:	f10d 0c90 	add.w	ip, sp, #144	; 0x90
 8000f32:	a936      	add	r1, sp, #216	; 0xd8
 8000f34:	4628      	mov	r0, r5
 8000f36:	f7ff fd2f 	bl	8000998 <BNO055_Read.2.constprop.1>
		HAL_Delay(7); //Time to switch to Other Modes
 8000f3a:	2007      	movs	r0, #7
 8000f3c:	f001 fd50 	bl	80029e0 <HAL_Delay>
	void BNO055_Read(uint8_t reg, uint8_t *data, uint8_t len) {
 8000f40:	2535      	movs	r5, #53	; 0x35
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8000f42:	aa0a      	add	r2, sp, #40	; 0x28
 8000f44:	2301      	movs	r3, #1
 8000f46:	2150      	movs	r1, #80	; 0x50
 8000f48:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8000f4a:	9400      	str	r4, [sp, #0]
 8000f4c:	f88d 5028 	strb.w	r5, [sp, #40]	; 0x28
 8000f50:	f002 fd66 	bl	8003a20 <HAL_I2C_Master_Transmit>
		statusRx = HAL_I2C_Master_Receive(BNO055_I2C_PORT, BNO055_I2C_ADDR << 1,
 8000f54:	2301      	movs	r3, #1
 8000f56:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8000f58:	9400      	str	r4, [sp, #0]
 8000f5a:	f10d 02d7 	add.w	r2, sp, #215	; 0xd7
 8000f5e:	2150      	movs	r1, #80	; 0x50
 8000f60:	f002 fedc 	bl	8003d1c <HAL_I2C_Master_Receive>
		Mag_Calibration_Status = Register_Calibration_Status & 0b00000011; //Bitmask 6 MSB and keep 2 LSB
 8000f64:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
 8000f68:	f003 0303 	and.w	r3, r3, #3
		if (Mag_Calibration_Status != 3) {
 8000f6c:	2b03      	cmp	r3, #3
		Mag_Calibration_Status = Register_Calibration_Status & 0b00000011; //Bitmask 6 MSB and keep 2 LSB
 8000f6e:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
		if (Mag_Calibration_Status != 3) {
 8000f72:	d01e      	beq.n	8000fb2 <main+0x542>
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8000f74:	240a      	movs	r4, #10
 8000f76:	2301      	movs	r3, #1
 8000f78:	aa10      	add	r2, sp, #64	; 0x40
 8000f7a:	2150      	movs	r1, #80	; 0x50
 8000f7c:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8000f7e:	9400      	str	r4, [sp, #0]
 8000f80:	f88d 5040 	strb.w	r5, [sp, #64]	; 0x40
 8000f84:	f002 fd4c 	bl	8003a20 <HAL_I2C_Master_Transmit>
		statusRx = HAL_I2C_Master_Receive(BNO055_I2C_PORT, BNO055_I2C_ADDR << 1,
 8000f88:	2301      	movs	r3, #1
 8000f8a:	f10d 02d7 	add.w	r2, sp, #215	; 0xd7
 8000f8e:	2150      	movs	r1, #80	; 0x50
 8000f90:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8000f92:	9400      	str	r4, [sp, #0]
 8000f94:	f002 fec2 	bl	8003d1c <HAL_I2C_Master_Receive>
				Mag_Calibration_Status = Register_Calibration_Status
 8000f98:	f89d 30d7 	ldrb.w	r3, [sp, #215]	; 0xd7
				HAL_Delay(10);
 8000f9c:	4620      	mov	r0, r4
				Mag_Calibration_Status = Register_Calibration_Status
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	f88d 30d6 	strb.w	r3, [sp, #214]	; 0xd6
				HAL_Delay(10);
 8000fa6:	f001 fd1b 	bl	80029e0 <HAL_Delay>
			while (Mag_Calibration_Status != 3) {
 8000faa:	f89d 30d6 	ldrb.w	r3, [sp, #214]	; 0xd6
 8000fae:	2b03      	cmp	r3, #3
 8000fb0:	d1e0      	bne.n	8000f74 <main+0x504>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // ON Notify that Magnetometer is Calibrated
 8000fb2:	48c2      	ldr	r0, [pc, #776]	; (80012bc <main+0x84c>)
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000fb4:	4dc1      	ldr	r5, [pc, #772]	; (80012bc <main+0x84c>)
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin); // ON Notify that Magnetometer is Calibrated
 8000fb6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fba:	f002 fb45 	bl	8003648 <HAL_GPIO_TogglePin>
 8000fbe:	240a      	movs	r4, #10
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000fc0:	4628      	mov	r0, r5
 8000fc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc6:	f002 fb3f 	bl	8003648 <HAL_GPIO_TogglePin>
			HAL_Delay(1000);
 8000fca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fce:	f001 fd07 	bl	80029e0 <HAL_Delay>
		for (int blink = 0; blink <10; blink++){
 8000fd2:	3c01      	subs	r4, #1
 8000fd4:	d1f4      	bne.n	8000fc0 <main+0x550>
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8000fd6:	260a      	movs	r6, #10
 8000fd8:	211a      	movs	r1, #26
 8000fda:	2301      	movs	r3, #1
 8000fdc:	aa18      	add	r2, sp, #96	; 0x60
 8000fde:	f88d 1060 	strb.w	r1, [sp, #96]	; 0x60
 8000fe2:	9600      	str	r6, [sp, #0]
 8000fe4:	2150      	movs	r1, #80	; 0x50
 8000fe6:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8000fe8:	f002 fd1a 	bl	8003a20 <HAL_I2C_Master_Transmit>
		statusRx = HAL_I2C_Master_Receive(BNO055_I2C_PORT, BNO055_I2C_ADDR << 1,
 8000fec:	2301      	movs	r3, #1
 8000fee:	9600      	str	r6, [sp, #0]
 8000ff0:	f10d 02d9 	add.w	r2, sp, #217	; 0xd9
 8000ff4:	2150      	movs	r1, #80	; 0x50
 8000ff6:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8000ff8:	f002 fe90 	bl	8003d1c <HAL_I2C_Master_Receive>
			BNO055_Read(BNO055_EUL_HEADING_LSB + i, &Euler_Heading_U8[i], 1);
 8000ffc:	231b      	movs	r3, #27
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8000ffe:	9600      	str	r6, [sp, #0]
 8001000:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 8001004:	aa18      	add	r2, sp, #96	; 0x60
 8001006:	2301      	movs	r3, #1
 8001008:	2150      	movs	r1, #80	; 0x50
 800100a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800100c:	f002 fd08 	bl	8003a20 <HAL_I2C_Master_Transmit>
		statusRx = HAL_I2C_Master_Receive(BNO055_I2C_PORT, BNO055_I2C_ADDR << 1,
 8001010:	9600      	str	r6, [sp, #0]
 8001012:	2301      	movs	r3, #1
 8001014:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8001016:	f10d 02da 	add.w	r2, sp, #218	; 0xda
 800101a:	2150      	movs	r1, #80	; 0x50
 800101c:	f002 fe7e 	bl	8003d1c <HAL_I2C_Master_Receive>
		Euler_Heading_S16 = (Euler_Heading_U8[1] << 8) | Euler_Heading_U8[0]; // Units = 1/900 radians
 8001020:	f9bd 30d9 	ldrsh.w	r3, [sp, #217]	; 0xd9
		Euler_Heading_Rad = Euler_Heading_S16 * LSB_to_Rad; // Convert to Radians
 8001024:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
		Euler_Heading_S16 = (Euler_Heading_U8[1] << 8) | Euler_Heading_U8[0]; // Units = 1/900 radians
 8001028:	f8ad 30d4 	strh.w	r3, [sp, #212]	; 0xd4
		Euler_Heading_Rad = Euler_Heading_S16 * LSB_to_Rad; // Convert to Radians
 800102c:	ee07 3a90 	vmov	s15, r3
 8001030:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		int sum = 0;
 8001034:	4625      	mov	r5, r4
		Euler_Heading_Rad = Euler_Heading_S16 * LSB_to_Rad; // Convert to Radians
 8001036:	ee67 7a87 	vmul.f32	s15, s15, s14
		Initial_Euler_Heading_Rad = Euler_Heading_Rad;
 800103a:	2464      	movs	r4, #100	; 0x64
		Euler_Heading_Rad = Euler_Heading_S16 * LSB_to_Rad; // Convert to Radians
 800103c:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
		Initial_Euler_Heading_Rad = Euler_Heading_Rad;
 8001040:	edcd 7a2e 	vstr	s15, [sp, #184]	; 0xb8
			HAL_I2C_Master_Receive(ARDUINO_NANO_PORT, ARDUINO_NANO_ADDR << 1,
 8001044:	4626      	mov	r6, r4
 8001046:	2308      	movs	r3, #8
 8001048:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800104a:	9600      	str	r6, [sp, #0]
 800104c:	aa18      	add	r2, sp, #96	; 0x60
 800104e:	2106      	movs	r1, #6
 8001050:	f002 fe64 	bl	8003d1c <HAL_I2C_Master_Receive>
			sum += LoadCellRead_Raw_S32[0];
 8001054:	9b18      	ldr	r3, [sp, #96]	; 0x60
		for (int i = 0; i < samples; i++) {
 8001056:	3c01      	subs	r4, #1
			sum += LoadCellRead_Raw_S32[0];
 8001058:	441d      	add	r5, r3
		for (int i = 0; i < samples; i++) {
 800105a:	d1f4      	bne.n	8001046 <main+0x5d6>
		float average = sum / samples;
 800105c:	ee07 5a90 	vmov	s15, r5
		float averageNewtons = average / calibrationFactor;
 8001060:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80012c0 <main+0x850>
 8001064:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
		float average = sum / samples;
 8001068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		LoadCellRead_Initial[0] = Nano_ReadAvg_1(100);
 800106c:	2564      	movs	r5, #100	; 0x64
		float averageNewtons = average / calibrationFactor;
 800106e:	ee67 7a87 	vmul.f32	s15, s15, s14
			HAL_I2C_Master_Receive(ARDUINO_NANO_PORT, ARDUINO_NANO_ADDR << 1,
 8001072:	462e      	mov	r6, r5
		float averageNewtons = average / calibrationFactor;
 8001074:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		LoadCellRead_Initial[0] = Nano_ReadAvg_1(100);
 8001078:	ed8d 7a2a 	vstr	s14, [sp, #168]	; 0xa8
			HAL_I2C_Master_Receive(ARDUINO_NANO_PORT, ARDUINO_NANO_ADDR << 1,
 800107c:	2308      	movs	r3, #8
 800107e:	982d      	ldr	r0, [sp, #180]	; 0xb4
 8001080:	9600      	str	r6, [sp, #0]
 8001082:	aa18      	add	r2, sp, #96	; 0x60
 8001084:	2106      	movs	r1, #6
 8001086:	f002 fe49 	bl	8003d1c <HAL_I2C_Master_Receive>
			sum += LoadCellRead_Raw_S32[1];
 800108a:	9b19      	ldr	r3, [sp, #100]	; 0x64
		for (int i = 0; i < samples; i++) {
 800108c:	3d01      	subs	r5, #1
			sum += LoadCellRead_Raw_S32[1];
 800108e:	441c      	add	r4, r3
		for (int i = 0; i < samples; i++) {
 8001090:	d1f4      	bne.n	800107c <main+0x60c>
		float average = sum / samples;
 8001092:	ee07 4a90 	vmov	s15, r4
		float averageNewtons = average / calibrationFactor;
 8001096:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80012c0 <main+0x850>
 800109a:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
 800109e:	4f89      	ldr	r7, [pc, #548]	; (80012c4 <main+0x854>)
 80010a0:	f8df 9234 	ldr.w	r9, [pc, #564]	; 80012d8 <main+0x868>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80010a4:	f8df 8214 	ldr.w	r8, [pc, #532]	; 80012bc <main+0x84c>
		float average = sum / samples;
 80010a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		float averageNewtons = average / calibrationFactor;
 80010ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
		LoadCellRead_Initial[1] = Nano_ReadAvg_2(100);
 80010b4:	ed8d 7a2b 	vstr	s14, [sp, #172]	; 0xac
		MC_AcknowledgeFaultMotor1();
 80010b8:	f000 f924 	bl	8001304 <MC_AcknowledgeFaultMotor1>
		MC_ProgramTorqueRampMotor1_F(0, 0);
 80010bc:	ed9f 0a82 	vldr	s0, [pc, #520]	; 80012c8 <main+0x858>
 80010c0:	4628      	mov	r0, r5
 80010c2:	f000 f911 	bl	80012e8 <MC_ProgramTorqueRampMotor1_F>
		MC_StartMotor1();
 80010c6:	f000 f909 	bl	80012dc <MC_StartMotor1>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80010ca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80010ce:	4640      	mov	r0, r8
 80010d0:	f002 faba 	bl	8003648 <HAL_GPIO_TogglePin>
		Loop_Counter++;
 80010d4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
		if (Loop_Counter < Action_Loop_1){
 80010d6:	9a27      	ldr	r2, [sp, #156]	; 0x9c
		Loop_Counter++;
 80010d8:	3302      	adds	r3, #2
		if (Loop_Counter < Action_Loop_1){
 80010da:	4293      	cmp	r3, r2
		Loop_Counter++;
 80010dc:	9328      	str	r3, [sp, #160]	; 0xa0
		if (Loop_Counter < Action_Loop_1){
 80010de:	f280 80e8 	bge.w	80012b2 <main+0x842>
			Target_Heading = Initial_Euler_Heading_Rad;
 80010e2:	992e      	ldr	r1, [sp, #184]	; 0xb8
 80010e4:	9131      	str	r1, [sp, #196]	; 0xc4
		if (Loop_Counter == Action_Loop_1 + Action_Loop_2){
 80010e6:	9925      	ldr	r1, [sp, #148]	; 0x94
			HAL_I2C_Master_Receive(ARDUINO_NANO_PORT, ARDUINO_NANO_ADDR << 1,
 80010e8:	982d      	ldr	r0, [sp, #180]	; 0xb4
		if (Loop_Counter == Action_Loop_1 + Action_Loop_2){
 80010ea:	440a      	add	r2, r1
 80010ec:	4293      	cmp	r3, r2
			Target_Heading = Target_Heading_2;
 80010ee:	bf04      	itt	eq
 80010f0:	9b24      	ldreq	r3, [sp, #144]	; 0x90
 80010f2:	9331      	streq	r3, [sp, #196]	; 0xc4
			HAL_I2C_Master_Receive(ARDUINO_NANO_PORT, ARDUINO_NANO_ADDR << 1,
 80010f4:	2464      	movs	r4, #100	; 0x64
 80010f6:	9400      	str	r4, [sp, #0]
 80010f8:	aa18      	add	r2, sp, #96	; 0x60
 80010fa:	2308      	movs	r3, #8
 80010fc:	2106      	movs	r1, #6
 80010fe:	f002 fe0d 	bl	8003d1c <HAL_I2C_Master_Receive>
		float average = sum / samples;
 8001102:	eddd 7a18 	vldr	s15, [sp, #96]	; 0x60
		float averageNewtons = average / calibrationFactor;
 8001106:	ed9d 6a2c 	vldr	s12, [sp, #176]	; 0xb0
		LoadCellRead[0] = (Nano_ReadAvg_1(samples) - LoadCellRead_Initial[0]);
 800110a:	eddd 6a2a 	vldr	s13, [sp, #168]	; 0xa8
			HAL_I2C_Master_Receive(ARDUINO_NANO_PORT, ARDUINO_NANO_ADDR << 1,
 800110e:	9400      	str	r4, [sp, #0]
		float average = sum / samples;
 8001110:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
			HAL_I2C_Master_Receive(ARDUINO_NANO_PORT, ARDUINO_NANO_ADDR << 1,
 8001114:	aa18      	add	r2, sp, #96	; 0x60
		float averageNewtons = average / calibrationFactor;
 8001116:	eec7 7a06 	vdiv.f32	s15, s14, s12
			HAL_I2C_Master_Receive(ARDUINO_NANO_PORT, ARDUINO_NANO_ADDR << 1,
 800111a:	2308      	movs	r3, #8
 800111c:	982d      	ldr	r0, [sp, #180]	; 0xb4
 800111e:	2106      	movs	r1, #6
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8001120:	240a      	movs	r4, #10
		LoadCellRead[0] = (Nano_ReadAvg_1(samples) - LoadCellRead_Initial[0]);
 8001122:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001126:	edcd 7a32 	vstr	s15, [sp, #200]	; 0xc8
			HAL_I2C_Master_Receive(ARDUINO_NANO_PORT, ARDUINO_NANO_ADDR << 1,
 800112a:	f002 fdf7 	bl	8003d1c <HAL_I2C_Master_Receive>
		float average = sum / samples;
 800112e:	eddd 7a19 	vldr	s15, [sp, #100]	; 0x64
		float averageNewtons = average / calibrationFactor;
 8001132:	eddd 6a2c 	vldr	s13, [sp, #176]	; 0xb0
		LoadCellRead[1] = (Nano_ReadAvg_2(samples) - LoadCellRead_Initial[1]);
 8001136:	ed9d 7a2b 	vldr	s14, [sp, #172]	; 0xac
		rtU.LC1 = LoadCellRead[0];//- LoadCellRead_Initial[0] / calibrationFactor;
 800113a:	9832      	ldr	r0, [sp, #200]	; 0xc8
		float average = sum / samples;
 800113c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		float averageNewtons = average / calibrationFactor;
 8001140:	ee87 8aa6 	vdiv.f32	s16, s15, s13
		LoadCellRead[1] = (Nano_ReadAvg_2(samples) - LoadCellRead_Initial[1]);
 8001144:	ee38 8a47 	vsub.f32	s16, s16, s14
 8001148:	ed8d 8a33 	vstr	s16, [sp, #204]	; 0xcc
		rtU.LC1 = LoadCellRead[0];//- LoadCellRead_Initial[0] / calibrationFactor;
 800114c:	f7ff faca 	bl	80006e4 <__aeabi_f2d>
 8001150:	e9c7 0104 	strd	r0, r1, [r7, #16]
		rtU.LC2 = LoadCellRead[1];//- LoadCellRead_Initial[1] / calibrationFactor;
 8001154:	ee18 0a10 	vmov	r0, s16
 8001158:	f7ff fac4 	bl	80006e4 <__aeabi_f2d>
 800115c:	231a      	movs	r3, #26
 800115e:	e9c7 0106 	strd	r0, r1, [r7, #24]
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8001162:	aa18      	add	r2, sp, #96	; 0x60
 8001164:	9400      	str	r4, [sp, #0]
 8001166:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800116a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800116c:	2301      	movs	r3, #1
 800116e:	2150      	movs	r1, #80	; 0x50
 8001170:	f002 fc56 	bl	8003a20 <HAL_I2C_Master_Transmit>
		statusRx = HAL_I2C_Master_Receive(BNO055_I2C_PORT, BNO055_I2C_ADDR << 1,
 8001174:	9400      	str	r4, [sp, #0]
 8001176:	f10d 02d9 	add.w	r2, sp, #217	; 0xd9
 800117a:	9830      	ldr	r0, [sp, #192]	; 0xc0
 800117c:	2301      	movs	r3, #1
 800117e:	2150      	movs	r1, #80	; 0x50
 8001180:	f002 fdcc 	bl	8003d1c <HAL_I2C_Master_Receive>
			BNO055_Read(BNO055_EUL_HEADING_LSB + i, &Euler_Heading_U8[i], 1);
 8001184:	231b      	movs	r3, #27
		statusTx = HAL_I2C_Master_Transmit(BNO055_I2C_PORT,
 8001186:	9400      	str	r4, [sp, #0]
 8001188:	aa18      	add	r2, sp, #96	; 0x60
 800118a:	f88d 3060 	strb.w	r3, [sp, #96]	; 0x60
 800118e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 8001190:	2301      	movs	r3, #1
 8001192:	2150      	movs	r1, #80	; 0x50
 8001194:	f002 fc44 	bl	8003a20 <HAL_I2C_Master_Transmit>
		statusRx = HAL_I2C_Master_Receive(BNO055_I2C_PORT, BNO055_I2C_ADDR << 1,
 8001198:	f10d 02da 	add.w	r2, sp, #218	; 0xda
 800119c:	9400      	str	r4, [sp, #0]
 800119e:	9830      	ldr	r0, [sp, #192]	; 0xc0
 80011a0:	2301      	movs	r3, #1
 80011a2:	2150      	movs	r1, #80	; 0x50
 80011a4:	f002 fdba 	bl	8003d1c <HAL_I2C_Master_Receive>
		Euler_Heading_S16 = (Euler_Heading_U8[1] << 8) | Euler_Heading_U8[0]; // Units = 1/900 radians
 80011a8:	f9bd 30d9 	ldrsh.w	r3, [sp, #217]	; 0xd9
		Euler_Heading_Rad = Euler_Heading_S16 * LSB_to_Rad; // Convert to Radians
 80011ac:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
		Euler_Heading_S16 = (Euler_Heading_U8[1] << 8) | Euler_Heading_U8[0]; // Units = 1/900 radians
 80011b0:	f8ad 30d4 	strh.w	r3, [sp, #212]	; 0xd4
		Euler_Heading_Rad = Euler_Heading_S16 * LSB_to_Rad; // Convert to Radians
 80011b4:	ee07 3a90 	vmov	s15, r3
 80011b8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011bc:	ee67 7a87 	vmul.f32	s15, s15, s14
		rtU.MeasuredAngle = Euler_Heading_Rad;
 80011c0:	ee17 0a90 	vmov	r0, s15
		Euler_Heading_Rad = Euler_Heading_S16 * LSB_to_Rad; // Convert to Radians
 80011c4:	edcd 7a34 	vstr	s15, [sp, #208]	; 0xd0
		rtU.MeasuredAngle = Euler_Heading_Rad;
 80011c8:	f7ff fa8c 	bl	80006e4 <__aeabi_f2d>
 80011cc:	e9c7 0100 	strd	r0, r1, [r7]
		rtU.TargetAngle = Target_Heading;
 80011d0:	9831      	ldr	r0, [sp, #196]	; 0xc4
 80011d2:	f7ff fa87 	bl	80006e4 <__aeabi_f2d>
 80011d6:	e9c7 0102 	strd	r0, r1, [r7, #8]
		Torque_Controller_step();
 80011da:	f004 fbcd 	bl	8005978 <Torque_Controller_step>
		Motor_Speed_RPM = rtY.RW_Speed;
 80011de:	e9d9 0100 	ldrd	r0, r1, [r9]
 80011e2:	f7ff fb5f 	bl	80008a4 <__aeabi_d2f>
 80011e6:	ee08 0a10 	vmov	s16, r0
		MC_AcknowledgeFaultMotor1(); // Aknowledge any Faults (Usually Overcurrent faults)
 80011ea:	f000 f88b 	bl	8001304 <MC_AcknowledgeFaultMotor1>
		MC_StartMotor1(); // Restart motor if it has faulted
 80011ee:	f000 f875 	bl	80012dc <MC_StartMotor1>
		MC_ProgramTorqueRampMotor1_F(Motor_Speed_RPM, Ramp_Time);
 80011f2:	eeb0 0a48 	vmov.f32	s0, s16
 80011f6:	4620      	mov	r0, r4
		Ramp_Time = 10;
 80011f8:	9429      	str	r4, [sp, #164]	; 0xa4
		MC_ProgramTorqueRampMotor1_F(Motor_Speed_RPM, Ramp_Time);
 80011fa:	f000 f875 	bl	80012e8 <MC_ProgramTorqueRampMotor1_F>
		HAL_Delay(Ramp_Time);
 80011fe:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001200:	f001 fbee 	bl	80029e0 <HAL_Delay>
		int LC1_S32 = LoadCellRead[0]*100000; //Scale by 100,000 to preserve 5 decimal places
 8001204:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80012cc <main+0x85c>
		int IMU_S32 = Euler_Heading_Rad*10000; //Scale by 10,000 to preserve 4 decimal places
 8001208:	eddd 6a34 	vldr	s13, [sp, #208]	; 0xd0
		int LC1_S32 = LoadCellRead[0]*100000; //Scale by 100,000 to preserve 5 decimal places
 800120c:	ed9d 7a32 	vldr	s14, [sp, #200]	; 0xc8
		int LC2_S32 = LoadCellRead[1]*100000; //Scale by 100,000 to preserve 5 decimal places
 8001210:	eddd 7a33 	vldr	s15, [sp, #204]	; 0xcc
		int IMU_S32 = Euler_Heading_Rad*10000; //Scale by 10,000 to preserve 4 decimal places
 8001214:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80012d0 <main+0x860>
		int LC1_S32 = LoadCellRead[0]*100000; //Scale by 100,000 to preserve 5 decimal places
 8001218:	ee27 7a06 	vmul.f32	s14, s14, s12
		int IMU_S32 = Euler_Heading_Rad*10000; //Scale by 10,000 to preserve 4 decimal places
 800121c:	ee66 6aa5 	vmul.f32	s13, s13, s11
		int LC2_S32 = LoadCellRead[1]*100000; //Scale by 100,000 to preserve 5 decimal places
 8001220:	ee67 7a86 	vmul.f32	s15, s15, s12
		int IMU_S32 = Euler_Heading_Rad*10000; //Scale by 10,000 to preserve 4 decimal places
 8001224:	eefd 6ae6 	vcvt.s32.f32	s13, s13
		int LC1_S32 = LoadCellRead[0]*100000; //Scale by 100,000 to preserve 5 decimal places
 8001228:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		int LC2_S32 = LoadCellRead[1]*100000; //Scale by 100,000 to preserve 5 decimal places
 800122c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		int IMU_S32 = Euler_Heading_Rad*10000; //Scale by 10,000 to preserve 4 decimal places
 8001230:	ee16 6a90 	vmov	r6, s13
		int LC1_S32 = LoadCellRead[0]*100000; //Scale by 100,000 to preserve 5 decimal places
 8001234:	ee17 5a10 	vmov	r5, s14
		int LC2_S32 = LoadCellRead[1]*100000; //Scale by 100,000 to preserve 5 decimal places
 8001238:	ee17 4a90 	vmov	r4, s15
		int RW_Speed_S32 = (int)(MC_GetMecSpeedAverageMotor1()*6); // Speed units are 1/6 rpm
 800123c:	f000 f85c 	bl	80012f8 <MC_GetMecSpeedAverageMotor1>
 8001240:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8001244:	0040      	lsls	r0, r0, #1
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 8001246:	2100      	movs	r1, #0
 8001248:	901b      	str	r0, [sp, #108]	; 0x6c
 800124a:	f366 0107 	bfi	r1, r6, #0, #8
		IMU[1] = (IMU_S32 >> 8) & 0xFF;
 800124e:	1230      	asrs	r0, r6, #8
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 8001250:	2200      	movs	r2, #0
 8001252:	f365 0207 	bfi	r2, r5, #0, #8
 8001256:	f360 210f 	bfi	r1, r0, #8, #8
 800125a:	2300      	movs	r3, #0
		LC1[1] = (LC1_S32 >> 8) & 0xFF;
 800125c:	1228      	asrs	r0, r5, #8
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 800125e:	f364 0307 	bfi	r3, r4, #0, #8
 8001262:	f360 220f 	bfi	r2, r0, #8, #8
		LC2[1] = (LC2_S32 >> 8) & 0xFF;
 8001266:	1220      	asrs	r0, r4, #8
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 8001268:	f360 230f 	bfi	r3, r0, #8, #8
		IMU[2] = (IMU_S32 >> 16) & 0xFF;
 800126c:	1430      	asrs	r0, r6, #16
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 800126e:	f360 4117 	bfi	r1, r0, #16, #8
		IMU[3] = (IMU_S32 >> 24) & 0xFF; // MSB
 8001272:	0e36      	lsrs	r6, r6, #24
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 8001274:	f366 611f 	bfi	r1, r6, #24, #8
 8001278:	9118      	str	r1, [sp, #96]	; 0x60
		LC1[2] = (LC1_S32 >> 16) & 0xFF;
 800127a:	1429      	asrs	r1, r5, #16
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 800127c:	f361 4217 	bfi	r2, r1, #16, #8
		LC1[3] = (LC1_S32 >> 24) & 0xFF; // MSB
 8001280:	0e2d      	lsrs	r5, r5, #24
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 8001282:	f365 621f 	bfi	r2, r5, #24, #8
		int Target_Heading_S32 = (int)Target_Heading; // No decimal points
 8001286:	eddd 7a31 	vldr	s15, [sp, #196]	; 0xc4
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 800128a:	9219      	str	r2, [sp, #100]	; 0x64
		LC2[2] = (LC2_S32 >> 16) & 0xFF;
 800128c:	1422      	asrs	r2, r4, #16
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 800128e:	f362 4317 	bfi	r3, r2, #16, #8
		LC2[3] = (LC2_S32 >> 24) & 0xFF; // MSB
 8001292:	0e24      	lsrs	r4, r4, #24
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 8001294:	f364 631f 	bfi	r3, r4, #24, #8
		int Target_Heading_S32 = (int)Target_Heading; // No decimal points
 8001298:	eefd 7ae7 	vcvt.s32.f32	s15, s15
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 800129c:	931a      	str	r3, [sp, #104]	; 0x68
		HAL_UART_Transmit(&huart3, TxBuffer_Serial_Debug, 20, HAL_MAX_DELAY); // ***** ADJIUST MAX DELAY TO MAKE SURE WE RECIEVE DATA CORRECTLY *****
 800129e:	2214      	movs	r2, #20
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295
 80012a4:	a918      	add	r1, sp, #96	; 0x60
 80012a6:	480b      	ldr	r0, [pc, #44]	; (80012d4 <main+0x864>)
		uint8_t TxBuffer_Serial_Debug[20] = { IMU[0], IMU[1], IMU[2], IMU[3], LC1[0], LC1[1],
 80012a8:	edcd 7a1c 	vstr	s15, [sp, #112]	; 0x70
		HAL_UART_Transmit(&huart3, TxBuffer_Serial_Debug, 20, HAL_MAX_DELAY); // ***** ADJIUST MAX DELAY TO MAKE SURE WE RECIEVE DATA CORRECTLY *****
 80012ac:	f003 ffbc 	bl	8005228 <HAL_UART_Transmit>
	}
 80012b0:	e70b      	b.n	80010ca <main+0x65a>
			Target_Heading = Target_Heading_1;
 80012b2:	bf04      	itt	eq
 80012b4:	9926      	ldreq	r1, [sp, #152]	; 0x98
 80012b6:	9131      	streq	r1, [sp, #196]	; 0xc4
 80012b8:	e715      	b.n	80010e6 <main+0x676>
 80012ba:	bf00      	nop
 80012bc:	48000400 	.word	0x48000400
 80012c0:	3c23d70a 	.word	0x3c23d70a
 80012c4:	20000810 	.word	0x20000810
 80012c8:	00000000 	.word	0x00000000
 80012cc:	47c35000 	.word	0x47c35000
 80012d0:	461c4000 	.word	0x461c4000
 80012d4:	200006a8 	.word	0x200006a8
 80012d8:	20000830 	.word	0x20000830

080012dc <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 80012dc:	4b01      	ldr	r3, [pc, #4]	; (80012e4 <MC_StartMotor1+0x8>)
 80012de:	6818      	ldr	r0, [r3, #0]
 80012e0:	f000 b892 	b.w	8001408 <MCI_StartMotor>
 80012e4:	20000794 	.word	0x20000794

080012e8 <MC_ProgramTorqueRampMotor1_F>:
  *         is possible to set 0 to perform an instantaneous change in the torque
  *         value.
  */
__weak void MC_ProgramTorqueRampMotor1_F( float FinalTorque, uint16_t hDurationms )
{
	MCI_ExecTorqueRamp_F( pMCI[M1], FinalTorque, hDurationms );
 80012e8:	4b02      	ldr	r3, [pc, #8]	; (80012f4 <MC_ProgramTorqueRampMotor1_F+0xc>)
{
 80012ea:	4601      	mov	r1, r0
	MCI_ExecTorqueRamp_F( pMCI[M1], FinalTorque, hDurationms );
 80012ec:	6818      	ldr	r0, [r3, #0]
 80012ee:	f000 b82f 	b.w	8001350 <MCI_ExecTorqueRamp_F>
 80012f2:	bf00      	nop
 80012f4:	20000794 	.word	0x20000794

080012f8 <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 80012f8:	4b01      	ldr	r3, [pc, #4]	; (8001300 <MC_GetMecSpeedAverageMotor1+0x8>)
 80012fa:	6818      	ldr	r0, [r3, #0]
 80012fc:	f000 b8d4 	b.w	80014a8 <MCI_GetAvrgMecSpeedUnit>
 8001300:	20000794 	.word	0x20000794

08001304 <MC_AcknowledgeFaultMotor1>:
 * the function is called, nothing is done and false is returned. Otherwise, true is
 * returned.
 */
__weak bool MC_AcknowledgeFaultMotor1( void )
{
	return MCI_FaultAcknowledged( pMCI[M1] );
 8001304:	4b01      	ldr	r3, [pc, #4]	; (800130c <MC_AcknowledgeFaultMotor1+0x8>)
 8001306:	6818      	ldr	r0, [r3, #0]
 8001308:	f000 b894 	b.w	8001434 <MCI_FaultAcknowledged>
 800130c:	20000794 	.word	0x20000794

08001310 <MC_APP_BootHook>:
   */

/* USER CODE BEGIN BootHook */

/* USER CODE END BootHook */
}
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <MC_APP_PostMediumFrequencyHook_M1>:
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop

08001318 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001318:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 800131c:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 8001320:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001322:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8001326:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 800132a:	f8a0 c016 	strh.w	ip, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800132e:	f880 c01e 	strb.w	ip, [r0, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8001332:	f8a0 c018 	strh.w	ip, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8001336:	f8c0 c01a 	str.w	ip, [r0, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800133a:	4770      	bx	lr

0800133c <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 800133c:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001340:	f240 4301 	movw	r3, #1025	; 0x401
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001344:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 8001348:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 800134a:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800134c:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = MCM_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800134e:	4770      	bx	lr

08001350 <MCI_ExecTorqueRamp_F>:
    /* Nothing to do */
  }
  else
  {
#endif
    int16_t hFinalTorque = (int16_t) (FinalTorque * CURRENT_CONV_FACTOR);
 8001350:	eddf 7a06 	vldr	s15, [pc, #24]	; 800136c <MCI_ExecTorqueRamp_F+0x1c>
 8001354:	ee20 0a27 	vmul.f32	s0, s0, s15
{
 8001358:	b508      	push	{r3, lr}
    int16_t hFinalTorque = (int16_t) (FinalTorque * CURRENT_CONV_FACTOR);
 800135a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
{
 800135e:	460a      	mov	r2, r1
    MCI_ExecTorqueRamp(pHandle, hFinalTorque, hDurationms);
 8001360:	ee10 3a10 	vmov	r3, s0
 8001364:	b219      	sxth	r1, r3
 8001366:	f7ff ffe9 	bl	800133c <MCI_ExecTorqueRamp>
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800136a:	bd08      	pop	{r3, pc}
 800136c:	461cac00 	.word	0x461cac00

08001370 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001370:	8b43      	ldrh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001372:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001376:	430b      	orrs	r3, r1
 8001378:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 800137c:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 8001380:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 8001382:	8381      	strh	r1, [r0, #28]

  return;
}
 8001384:	4770      	bx	lr
 8001386:	bf00      	nop

08001388 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 8001388:	7f83      	ldrb	r3, [r0, #30]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d000      	beq.n	8001390 <MCI_ExecBufferedCommands+0x8>
 800138e:	4770      	bx	lr
{
 8001390:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 8001392:	7b02      	ldrb	r2, [r0, #12]
 8001394:	2a02      	cmp	r2, #2
 8001396:	4604      	mov	r4, r0
 8001398:	d006      	beq.n	80013a8 <MCI_ExecBufferedCommands+0x20>
 800139a:	2a03      	cmp	r2, #3
 800139c:	d026      	beq.n	80013ec <MCI_ExecBufferedCommands+0x64>
 800139e:	2a01      	cmp	r2, #1
 80013a0:	d015      	beq.n	80013ce <MCI_ExecBufferedCommands+0x46>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80013a2:	2303      	movs	r3, #3
 80013a4:	77a3      	strb	r3, [r4, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80013a6:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80013a8:	6843      	ldr	r3, [r0, #4]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_TORQUE_MODE);
 80013b0:	6800      	ldr	r0, [r0, #0]
 80013b2:	2104      	movs	r1, #4
 80013b4:	f005 feb0 	bl	8007118 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80013b8:	8ae2      	ldrh	r2, [r4, #22]
 80013ba:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80013be:	6820      	ldr	r0, [r4, #0]
 80013c0:	f005 feae 	bl	8007120 <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80013c4:	2800      	cmp	r0, #0
 80013c6:	d0ec      	beq.n	80013a2 <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 80013c8:	2302      	movs	r3, #2
 80013ca:	77a3      	strb	r3, [r4, #30]
}
 80013cc:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80013ce:	6843      	ldr	r3, [r0, #4]
 80013d0:	2200      	movs	r2, #0
 80013d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, MCM_SPEED_MODE);
 80013d6:	6800      	ldr	r0, [r0, #0]
 80013d8:	2103      	movs	r1, #3
 80013da:	f005 fe9d 	bl	8007118 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 80013de:	8ae2      	ldrh	r2, [r4, #22]
 80013e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013e4:	6820      	ldr	r0, [r4, #0]
 80013e6:	f005 fe9b 	bl	8007120 <STC_ExecRamp>
          break;
 80013ea:	e7eb      	b.n	80013c4 <MCI_ExecBufferedCommands+0x3c>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 80013ec:	6842      	ldr	r2, [r0, #4]
 80013ee:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 80013f2:	f8d0 3012 	ldr.w	r3, [r0, #18]
 80013f6:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 80013f8:	e7e6      	b.n	80013c8 <MCI_ExecBufferedCommands+0x40>
 80013fa:	bf00      	nop

080013fc <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 80013fc:	7e40      	ldrb	r0, [r0, #25]
 80013fe:	4770      	bx	lr

08001400 <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 8001400:	8b80      	ldrh	r0, [r0, #28]
 8001402:	4770      	bx	lr

08001404 <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 8001404:	8b40      	ldrh	r0, [r0, #26]
 8001406:	4770      	bx	lr

08001408 <MCI_StartMotor>:
{
 8001408:	b510      	push	{r4, lr}
 800140a:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800140c:	f7ff fff6 	bl	80013fc <MCI_GetSTMState>
 8001410:	b108      	cbz	r0, 8001416 <MCI_StartMotor+0xe>
    RetVal = false;
 8001412:	2000      	movs	r0, #0
}
 8001414:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001416:	4620      	mov	r0, r4
 8001418:	f7ff fff2 	bl	8001400 <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 800141c:	2800      	cmp	r0, #0
 800141e:	d1f8      	bne.n	8001412 <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001420:	4620      	mov	r0, r4
 8001422:	f7ff ffef 	bl	8001404 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001426:	2800      	cmp	r0, #0
 8001428:	d1f3      	bne.n	8001412 <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 800142a:	2001      	movs	r0, #1
 800142c:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800142e:	77a0      	strb	r0, [r4, #30]
}
 8001430:	bd10      	pop	{r4, pc}
 8001432:	bf00      	nop

08001434 <MCI_FaultAcknowledged>:
{
 8001434:	b510      	push	{r4, lr}
 8001436:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001438:	f7ff ffe0 	bl	80013fc <MCI_GetSTMState>
 800143c:	280b      	cmp	r0, #11
 800143e:	d001      	beq.n	8001444 <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 8001440:	2000      	movs	r0, #0
}
 8001442:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001444:	4620      	mov	r0, r4
 8001446:	f7ff ffdd 	bl	8001404 <MCI_GetCurrentFaults>
 800144a:	2800      	cmp	r0, #0
 800144c:	d1f8      	bne.n	8001440 <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 800144e:	2302      	movs	r3, #2
 8001450:	7623      	strb	r3, [r4, #24]
    pHandle->PastFaults = MC_NO_FAULTS;
 8001452:	83a0      	strh	r0, [r4, #28]
    RetVal = true;
 8001454:	2001      	movs	r0, #1
}
 8001456:	bd10      	pop	{r4, pc}

08001458 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 8001458:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 800145a:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 800145c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop

08001464 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 8001464:	7b03      	ldrb	r3, [r0, #12]
 8001466:	2b02      	cmp	r3, #2
 8001468:	d005      	beq.n	8001476 <MCI_GetImposedMotorDirection+0x12>
 800146a:	2b03      	cmp	r3, #3
 800146c:	d013      	beq.n	8001496 <MCI_GetImposedMotorDirection+0x32>
 800146e:	2b01      	cmp	r3, #1
 8001470:	d009      	beq.n	8001486 <MCI_GetImposedMotorDirection+0x22>
 8001472:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (retVal);
}
 8001474:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 8001476:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 800147a:	2b00      	cmp	r3, #0
 800147c:	bfac      	ite	ge
 800147e:	2001      	movge	r0, #1
 8001480:	f04f 30ff 	movlt.w	r0, #4294967295
 8001484:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 8001486:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 800148a:	2b00      	cmp	r3, #0
 800148c:	bfac      	ite	ge
 800148e:	2001      	movge	r0, #1
 8001490:	f04f 30ff 	movlt.w	r0, #4294967295
 8001494:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 8001496:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 800149a:	2b00      	cmp	r3, #0
 800149c:	bfac      	ite	ge
 800149e:	2001      	movge	r0, #1
 80014a0:	f04f 30ff 	movlt.w	r0, #4294967295
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop

080014a8 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 80014a8:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 80014aa:	6800      	ldr	r0, [r0, #0]
 80014ac:	f005 fe26 	bl	80070fc <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 80014b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 80014b4:	f005 bdcc 	b.w	8007050 <SPD_GetAvrgMecSpeedUnit>

080014b8 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80014b8:	f644 11e6 	movw	r1, #18918	; 0x49e6
 80014bc:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 80014be:	fb13 f201 	smulbb	r2, r3, r1
{
 80014c2:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 80014c6:	fb10 f101 	smulbb	r1, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 80014ca:	4250      	negs	r0, r2
 80014cc:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 80014d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 80014d4:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 80014d6:	da05      	bge.n	80014e4 <MCM_Clarke+0x2c>
 80014d8:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 80014da:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 80014de:	da0c      	bge.n	80014fa <MCM_Clarke+0x42>
 80014e0:	4a09      	ldr	r2, [pc, #36]	; (8001508 <MCM_Clarke+0x50>)
 80014e2:	e001      	b.n	80014e8 <MCM_Clarke+0x30>
 80014e4:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	2000      	movs	r0, #0
 80014ec:	f363 000f 	bfi	r0, r3, #0, #16
 80014f0:	b293      	uxth	r3, r2
 80014f2:	f363 401f 	bfi	r0, r3, #16, #16
}
 80014f6:	b004      	add	sp, #16
 80014f8:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 80014fa:	4803      	ldr	r0, [pc, #12]	; (8001508 <MCM_Clarke+0x50>)
 80014fc:	b20a      	sxth	r2, r1
 80014fe:	4282      	cmp	r2, r0
 8001500:	bfb8      	it	lt
 8001502:	4602      	movlt	r2, r0
 8001504:	e7f0      	b.n	80014e8 <MCM_Clarke+0x30>
 8001506:	bf00      	nop
 8001508:	ffff8001 	.word	0xffff8001

0800150c <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 800150c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 8001510:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 8001514:	f400 7140 	and.w	r1, r0, #768	; 0x300
 8001518:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 800151c:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 800151e:	d028      	beq.n	8001572 <MCM_Trig_Functions+0x66>
 8001520:	f04f 0300 	mov.w	r3, #0
 8001524:	461a      	mov	r2, r3
 8001526:	d816      	bhi.n	8001556 <MCM_Trig_Functions+0x4a>
 8001528:	b361      	cbz	r1, 8001584 <MCM_Trig_Functions+0x78>
 800152a:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 800152e:	d109      	bne.n	8001544 <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001530:	b2c0      	uxtb	r0, r0
 8001532:	43c2      	mvns	r2, r0
 8001534:	491a      	ldr	r1, [pc, #104]	; (80015a0 <MCM_Trig_Functions+0x94>)
 8001536:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 8001538:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800153c:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 8001540:	4252      	negs	r2, r2
 8001542:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 8001544:	b29b      	uxth	r3, r3
 8001546:	2000      	movs	r0, #0
 8001548:	f363 000f 	bfi	r0, r3, #0, #16
 800154c:	b292      	uxth	r2, r2
 800154e:	f362 401f 	bfi	r0, r2, #16, #16
}
 8001552:	b002      	add	sp, #8
 8001554:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001556:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 800155a:	d1f3      	bne.n	8001544 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800155c:	4910      	ldr	r1, [pc, #64]	; (80015a0 <MCM_Trig_Functions+0x94>)
 800155e:	b2c0      	uxtb	r0, r0
 8001560:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001562:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001566:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001568:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800156a:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800156e:	b21b      	sxth	r3, r3
      break;
 8001570:	e7e8      	b.n	8001544 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001572:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001574:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001576:	490a      	ldr	r1, [pc, #40]	; (80015a0 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001578:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 800157a:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800157e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8001582:	e7df      	b.n	8001544 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001584:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001586:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001588:	4905      	ldr	r1, [pc, #20]	; (80015a0 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800158a:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 800158c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001590:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001594:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001596:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001598:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 800159a:	b21b      	sxth	r3, r3
      break;
 800159c:	e7d2      	b.n	8001544 <MCM_Trig_Functions+0x38>
 800159e:	bf00      	nop
 80015a0:	08007a3c 	.word	0x08007a3c

080015a4 <MCM_Park>:
{
 80015a4:	b530      	push	{r4, r5, lr}
 80015a6:	b085      	sub	sp, #20
 80015a8:	4603      	mov	r3, r0
 80015aa:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80015ac:	4608      	mov	r0, r1
 80015ae:	141c      	asrs	r4, r3, #16
{
 80015b0:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 80015b2:	f7ff ffab 	bl	800150c <MCM_Trig_Functions>
 80015b6:	b22d      	sxth	r5, r5
 80015b8:	fa0f fc80 	sxth.w	ip, r0
 80015bc:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 80015be:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80015c2:	fb04 1113 	mls	r1, r4, r3, r1
  if (wqd_tmp > INT16_MAX)
 80015c6:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 80015ca:	da05      	bge.n	80015d8 <MCM_Park+0x34>
 80015cc:	13ca      	asrs	r2, r1, #15
  else if (wqd_tmp < (-32768))
 80015ce:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80015d2:	da22      	bge.n	800161a <MCM_Park+0x76>
 80015d4:	4914      	ldr	r1, [pc, #80]	; (8001628 <MCM_Park+0x84>)
 80015d6:	e001      	b.n	80015dc <MCM_Park+0x38>
 80015d8:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 80015dc:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80015e0:	fb05 4403 	mla	r4, r5, r3, r4
  if (wqd_tmp > INT16_MAX)
 80015e4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80015e8:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 80015ec:	da04      	bge.n	80015f8 <MCM_Park+0x54>
  else if (wqd_tmp < (-32768))
 80015ee:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 80015f2:	da0c      	bge.n	800160e <MCM_Park+0x6a>
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <MCM_Park+0x84>)
 80015f6:	e001      	b.n	80015fc <MCM_Park+0x58>
 80015f8:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 80015fc:	b28a      	uxth	r2, r1
 80015fe:	2000      	movs	r0, #0
 8001600:	f362 000f 	bfi	r0, r2, #0, #16
 8001604:	b29b      	uxth	r3, r3
 8001606:	f363 401f 	bfi	r0, r3, #16, #16
}
 800160a:	b005      	add	sp, #20
 800160c:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 800160e:	4806      	ldr	r0, [pc, #24]	; (8001628 <MCM_Park+0x84>)
 8001610:	b213      	sxth	r3, r2
 8001612:	4283      	cmp	r3, r0
 8001614:	bfb8      	it	lt
 8001616:	4603      	movlt	r3, r0
 8001618:	e7f0      	b.n	80015fc <MCM_Park+0x58>
    hqd_tmp = ((int16_t)wqd_tmp);
 800161a:	4903      	ldr	r1, [pc, #12]	; (8001628 <MCM_Park+0x84>)
 800161c:	b212      	sxth	r2, r2
 800161e:	4291      	cmp	r1, r2
 8001620:	bfb8      	it	lt
 8001622:	4611      	movlt	r1, r2
 8001624:	e7da      	b.n	80015dc <MCM_Park+0x38>
 8001626:	bf00      	nop
 8001628:	ffff8001 	.word	0xffff8001

0800162c <MCM_Rev_Park>:
{
 800162c:	b530      	push	{r4, r5, lr}
 800162e:	b085      	sub	sp, #20
 8001630:	4604      	mov	r4, r0
 8001632:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001634:	4608      	mov	r0, r1
{
 8001636:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001638:	f7ff ff68 	bl	800150c <MCM_Trig_Functions>
 800163c:	1424      	asrs	r4, r4, #16
 800163e:	1402      	asrs	r2, r0, #16
 8001640:	b22d      	sxth	r5, r5
 8001642:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001644:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001648:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 800164c:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001650:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001654:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001658:	2000      	movs	r0, #0
 800165a:	f363 000f 	bfi	r0, r3, #0, #16
 800165e:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001662:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001666:	b005      	add	sp, #20
 8001668:	bd30      	pop	{r4, r5, pc}
 800166a:	bf00      	nop

0800166c <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 800166c:	1e03      	subs	r3, r0, #0
 800166e:	dd35      	ble.n	80016dc <MCM_Sqrt+0x70>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if (wInput <= ((int32_t)2097152))
 8001670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001674:	dd2b      	ble.n	80016ce <MCM_Sqrt+0x62>
      wtemproot = ((int32_t)8192);
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001676:	135a      	asrs	r2, r3, #13
 8001678:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 800167c:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800167e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001682:	d029      	beq.n	80016d8 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001684:	fb93 f1f2 	sdiv	r1, r3, r2
 8001688:	4411      	add	r1, r2
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800168a:	ebb2 0f61 	cmp.w	r2, r1, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800168e:	ea4f 0061 	mov.w	r0, r1, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001692:	d024      	beq.n	80016de <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001694:	fb93 f2f0 	sdiv	r2, r3, r0
 8001698:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800169a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800169e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80016a2:	d01c      	beq.n	80016de <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80016a4:	fb93 f2f1 	sdiv	r2, r3, r1
 80016a8:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80016aa:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80016ae:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80016b2:	d014      	beq.n	80016de <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80016b4:	fb93 f2f0 	sdiv	r2, r3, r0
 80016b8:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80016ba:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80016be:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80016c2:	d00c      	beq.n	80016de <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80016c4:	fb93 f0f1 	sdiv	r0, r3, r1
 80016c8:	4408      	add	r0, r1
 80016ca:	1040      	asrs	r0, r0, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80016cc:	4770      	bx	lr
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80016ce:	11da      	asrs	r2, r3, #7
 80016d0:	3280      	adds	r2, #128	; 0x80
 80016d2:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80016d4:	2a80      	cmp	r2, #128	; 0x80
 80016d6:	d1d5      	bne.n	8001684 <MCM_Sqrt+0x18>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80016d8:	4610      	mov	r0, r2
 80016da:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 80016dc:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 80016de:	4770      	bx	lr

080016e0 <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 80016e0:	2226      	movs	r2, #38	; 0x26
{
 80016e2:	b538      	push	{r3, r4, r5, lr}
 80016e4:	fb00 f202 	mul.w	r2, r0, r2
 80016e8:	4b15      	ldr	r3, [pc, #84]	; (8001740 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 80016ea:	2400      	movs	r4, #0
 80016ec:	509c      	str	r4, [r3, r2]
{
 80016ee:	4605      	mov	r5, r0
 80016f0:	f102 0108 	add.w	r1, r2, #8
 80016f4:	1898      	adds	r0, r3, r2
 80016f6:	3210      	adds	r2, #16
 80016f8:	4419      	add	r1, r3
 80016fa:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 80016fc:	4a11      	ldr	r2, [pc, #68]	; (8001744 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 80016fe:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001700:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001704:	604c      	str	r4, [r1, #4]
 8001706:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001708:	f8c3 4006 	str.w	r4, [r3, #6]
 800170c:	f8c3 400a 	str.w	r4, [r3, #10]
 8001710:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001714:	4621      	mov	r1, r4
 8001716:	f004 faa9 	bl	8005c6c <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <FOC_Clear+0x68>)
 800171c:	4621      	mov	r1, r4
 800171e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001722:	f004 faa3 	bl	8005c6c <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <FOC_Clear+0x6c>)
 8001728:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800172c:	f005 fce8 	bl	8007100 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <FOC_Clear+0x70>)
 8001732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001736:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800173a:	f000 bd85 	b.w	8002248 <PWMC_SwitchOffPWM>
 800173e:	bf00      	nop
 8001740:	2000075c 	.word	0x2000075c
 8001744:	20000468 	.word	0x20000468
 8001748:	20000464 	.word	0x20000464
 800174c:	2000046c 	.word	0x2000046c
 8001750:	20000790 	.word	0x20000790

08001754 <MCboot>:
  if (MC_NULL == pMCIList)
 8001754:	2800      	cmp	r0, #0
 8001756:	d06a      	beq.n	800182e <MCboot+0xda>
{
 8001758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 800175c:	f8df b110 	ldr.w	fp, [pc, #272]	; 8001870 <MCboot+0x11c>
    bMCBootCompleted = (uint8_t )0;
 8001760:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8001874 <MCboot+0x120>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001764:	4d32      	ldr	r5, [pc, #200]	; (8001830 <MCboot+0xdc>)
    RVBS_Init(&BusVoltageSensor_M1);
 8001766:	4e33      	ldr	r6, [pc, #204]	; (8001834 <MCboot+0xe0>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001768:	4f33      	ldr	r7, [pc, #204]	; (8001838 <MCboot+0xe4>)
{
 800176a:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 800176c:	f04f 0800 	mov.w	r8, #0
 8001770:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001772:	4832      	ldr	r0, [pc, #200]	; (800183c <MCboot+0xe8>)
 8001774:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8001778:	f889 8000 	strb.w	r8, [r9]
    R3_1_Init(&PWM_Handle_M1);
 800177c:	f004 fd86 	bl	800628c <R3_1_Init>
    startTimers();
 8001780:	f004 fadc 	bl	8005d3c <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001784:	482e      	ldr	r0, [pc, #184]	; (8001840 <MCboot+0xec>)
 8001786:	f004 fa69 	bl	8005c5c <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 800178a:	482e      	ldr	r0, [pc, #184]	; (8001844 <MCboot+0xf0>)
 800178c:	f005 ff46 	bl	800761c <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001790:	4a2c      	ldr	r2, [pc, #176]	; (8001844 <MCboot+0xf0>)
 8001792:	492b      	ldr	r1, [pc, #172]	; (8001840 <MCboot+0xec>)
 8001794:	6828      	ldr	r0, [r5, #0]
 8001796:	f005 fc99 	bl	80070cc <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 800179a:	482b      	ldr	r0, [pc, #172]	; (8001848 <MCboot+0xf4>)
 800179c:	f006 f806 	bl	80077ac <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80017a0:	f8db 3000 	ldr.w	r3, [fp]
 80017a4:	6829      	ldr	r1, [r5, #0]
 80017a6:	4a28      	ldr	r2, [pc, #160]	; (8001848 <MCboot+0xf4>)
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	4828      	ldr	r0, [pc, #160]	; (800184c <MCboot+0xf8>)
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <MCboot+0xfc>)
 80017ae:	f005 fab1 	bl	8006d14 <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80017b2:	4828      	ldr	r0, [pc, #160]	; (8001854 <MCboot+0x100>)
 80017b4:	f004 fa52 	bl	8005c5c <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 80017b8:	4827      	ldr	r0, [pc, #156]	; (8001858 <MCboot+0x104>)
 80017ba:	f004 fa4f 	bl	8005c5c <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 80017be:	4630      	mov	r0, r6
 80017c0:	f005 f986 	bl	8006ad0 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80017c4:	4b25      	ldr	r3, [pc, #148]	; (800185c <MCboot+0x108>)
    NTC_Init(&TempSensor_M1);
 80017c6:	4826      	ldr	r0, [pc, #152]	; (8001860 <MCboot+0x10c>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60de      	str	r6, [r3, #12]
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 80017cc:	4e25      	ldr	r6, [pc, #148]	; (8001864 <MCboot+0x110>)
 80017ce:	609e      	str	r6, [r3, #8]
    NTC_Init(&TempSensor_M1);
 80017d0:	f004 fa16 	bl	8005c00 <NTC_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 80017d4:	4b24      	ldr	r3, [pc, #144]	; (8001868 <MCboot+0x114>)
 80017d6:	4825      	ldr	r0, [pc, #148]	; (800186c <MCboot+0x118>)
 80017d8:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 80017da:	f005 fa11 	bl	8006c00 <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 80017de:	f04f 0a01 	mov.w	sl, #1
    FOC_Clear(M1);
 80017e2:	4640      	mov	r0, r8
 80017e4:	f7ff ff7c 	bl	80016e0 <FOC_Clear>
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80017e8:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 80017ea:	f886 a024 	strb.w	sl, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 80017ee:	f005 fd05 	bl	80071fc <STC_GetDefaultIqdref>
 80017f2:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 80017f4:	6828      	ldr	r0, [r5, #0]
 80017f6:	f005 fd01 	bl	80071fc <STC_GetDefaultIqdref>
 80017fa:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80017fe:	f8db 3000 	ldr.w	r3, [fp]
 8001802:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001804:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001806:	4632      	mov	r2, r6
 8001808:	4638      	mov	r0, r7
 800180a:	f7ff fd85 	bl	8001318 <MCI_Init>
    MCI_ExecTorqueRamp(&Mci[M1], STC_GetDefaultIqdref(pSTC[M1]).q, 0);
 800180e:	6828      	ldr	r0, [r5, #0]
 8001810:	f005 fcf4 	bl	80071fc <STC_GetDefaultIqdref>
 8001814:	4642      	mov	r2, r8
 8001816:	b201      	sxth	r1, r0
 8001818:	4638      	mov	r0, r7
 800181a:	f7ff fd8f 	bl	800133c <MCI_ExecTorqueRamp>
    pMCIList[M1] = &Mci[M1];
 800181e:	6027      	str	r7, [r4, #0]
    MC_APP_BootHook();
 8001820:	f7ff fd76 	bl	8001310 <MC_APP_BootHook>
    bMCBootCompleted = 1U;
 8001824:	f889 a000 	strb.w	sl, [r9]
}
 8001828:	b005      	add	sp, #20
 800182a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800182e:	4770      	bx	lr
 8001830:	2000046c 	.word	0x2000046c
 8001834:	20000000 	.word	0x20000000
 8001838:	20000730 	.word	0x20000730
 800183c:	20000174 	.word	0x20000174
 8001840:	20000138 	.word	0x20000138
 8001844:	200002a4 	.word	0x200002a4
 8001848:	20000428 	.word	0x20000428
 800184c:	20000218 	.word	0x20000218
 8001850:	20000290 	.word	0x20000290
 8001854:	2000010c 	.word	0x2000010c
 8001858:	200000e0 	.word	0x200000e0
 800185c:	20000460 	.word	0x20000460
 8001860:	20000400 	.word	0x20000400
 8001864:	2000075c 	.word	0x2000075c
 8001868:	2000078c 	.word	0x2000078c
 800186c:	20000200 	.word	0x20000200
 8001870:	20000790 	.word	0x20000790
 8001874:	20000782 	.word	0x20000782

08001878 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop

0800187c <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 800187c:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 800187e:	4c08      	ldr	r4, [pc, #32]	; (80018a0 <FOC_CalcCurrRef+0x24>)
 8001880:	2326      	movs	r3, #38	; 0x26
 8001882:	fb03 4400 	mla	r4, r3, r0, r4
 8001886:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 800188a:	b103      	cbz	r3, 800188e <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 800188c:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <FOC_CalcCurrRef+0x28>)
 8001890:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001894:	f005 fc88 	bl	80071a8 <STC_CalcTorqueReference>
 8001898:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 800189a:	8220      	strh	r0, [r4, #16]
}
 800189c:	bd10      	pop	{r4, pc}
 800189e:	bf00      	nop
 80018a0:	2000075c 	.word	0x2000075c
 80018a4:	2000046c 	.word	0x2000046c

080018a8 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 80018a8:	4b01      	ldr	r3, [pc, #4]	; (80018b0 <TSK_SetStopPermanencyTimeM1+0x8>)
 80018aa:	8018      	strh	r0, [r3, #0]
}
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	20000788 	.word	0x20000788

080018b4 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 80018b4:	4b03      	ldr	r3, [pc, #12]	; (80018c4 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 80018b6:	8818      	ldrh	r0, [r3, #0]
 80018b8:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 80018ba:	fab0 f080 	clz	r0, r0
 80018be:	0940      	lsrs	r0, r0, #5
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	20000788 	.word	0x20000788

080018c8 <TSK_MediumFrequencyTaskM1>:
{
 80018c8:	b570      	push	{r4, r5, r6, lr}
 80018ca:	b082      	sub	sp, #8
  int16_t wAux = 0;
 80018cc:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80018ce:	4669      	mov	r1, sp
 80018d0:	48b4      	ldr	r0, [pc, #720]	; (8001ba4 <TSK_MediumFrequencyTaskM1+0x2dc>)
  int16_t wAux = 0;
 80018d2:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80018d6:	f005 fd9f 	bl	8007418 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 80018da:	4eb3      	ldr	r6, [pc, #716]	; (8001ba8 <TSK_MediumFrequencyTaskM1+0x2e0>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80018dc:	4cb3      	ldr	r4, [pc, #716]	; (8001bac <TSK_MediumFrequencyTaskM1+0x2e4>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 80018de:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 80018e0:	6830      	ldr	r0, [r6, #0]
 80018e2:	f004 fa0d 	bl	8005d00 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 80018e6:	4620      	mov	r0, r4
 80018e8:	f7ff fd8c 	bl	8001404 <MCI_GetCurrentFaults>
 80018ec:	b118      	cbz	r0, 80018f6 <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 80018ee:	230a      	movs	r3, #10
 80018f0:	7663      	strb	r3, [r4, #25]
}
 80018f2:	b002      	add	sp, #8
 80018f4:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 80018f6:	4620      	mov	r0, r4
 80018f8:	f7ff fd82 	bl	8001400 <MCI_GetOccurredFaults>
 80018fc:	bb70      	cbnz	r0, 800195c <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 80018fe:	7e63      	ldrb	r3, [r4, #25]
 8001900:	2b13      	cmp	r3, #19
 8001902:	d8f6      	bhi.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
 8001904:	a201      	add	r2, pc, #4	; (adr r2, 800190c <TSK_MediumFrequencyTaskM1+0x44>)
 8001906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800190a:	bf00      	nop
 800190c:	08001aa1 	.word	0x08001aa1
 8001910:	080018f3 	.word	0x080018f3
 8001914:	080018f3 	.word	0x080018f3
 8001918:	080018f3 	.word	0x080018f3
 800191c:	08001a1b 	.word	0x08001a1b
 8001920:	080018f3 	.word	0x080018f3
 8001924:	080019f7 	.word	0x080019f7
 8001928:	080018f3 	.word	0x080018f3
 800192c:	080019d9 	.word	0x080019d9
 8001930:	080018f3 	.word	0x080018f3
 8001934:	0800195d 	.word	0x0800195d
 8001938:	080019cd 	.word	0x080019cd
 800193c:	080018f3 	.word	0x080018f3
 8001940:	080018f3 	.word	0x080018f3
 8001944:	080018f3 	.word	0x080018f3
 8001948:	080018f3 	.word	0x080018f3
 800194c:	080018f3 	.word	0x080018f3
 8001950:	08001985 	.word	0x08001985
 8001954:	080018f3 	.word	0x080018f3
 8001958:	08001965 	.word	0x08001965
      Mci[M1].State = FAULT_OVER;
 800195c:	230b      	movs	r3, #11
 800195e:	7663      	strb	r3, [r4, #25]
}
 8001960:	b002      	add	sp, #8
 8001962:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001964:	7e23      	ldrb	r3, [r4, #24]
 8001966:	2b05      	cmp	r3, #5
 8001968:	f000 80b2 	beq.w	8001ad0 <TSK_MediumFrequencyTaskM1+0x208>
            if (! RUC_OTF_Exec(&RevUpControlM1))
 800196c:	4890      	ldr	r0, [pc, #576]	; (8001bb0 <TSK_MediumFrequencyTaskM1+0x2e8>)
 800196e:	f005 fa4d 	bl	8006e0c <RUC_OTF_Exec>
 8001972:	4602      	mov	r2, r0
 8001974:	2800      	cmp	r0, #0
 8001976:	f040 80c6 	bne.w	8001b06 <TSK_MediumFrequencyTaskM1+0x23e>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 800197a:	488c      	ldr	r0, [pc, #560]	; (8001bac <TSK_MediumFrequencyTaskM1+0x2e4>)
 800197c:	2110      	movs	r1, #16
 800197e:	f7ff fcf7 	bl	8001370 <MCI_FaultProcessing>
 8001982:	e7b6      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
            if (MCI_STOP == Mci[M1].DirectCommand)
 8001984:	7e23      	ldrb	r3, [r4, #24]
 8001986:	2b05      	cmp	r3, #5
 8001988:	f000 80a2 	beq.w	8001ad0 <TSK_MediumFrequencyTaskM1+0x208>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 800198c:	4d89      	ldr	r5, [pc, #548]	; (8001bb4 <TSK_MediumFrequencyTaskM1+0x2ec>)
 800198e:	2101      	movs	r1, #1
 8001990:	6828      	ldr	r0, [r5, #0]
 8001992:	f000 fc5d 	bl	8002250 <PWMC_CurrentReadingCalibr>
 8001996:	2800      	cmp	r0, #0
 8001998:	d0ab      	beq.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 800199a:	7e23      	ldrb	r3, [r4, #24]
 800199c:	2b03      	cmp	r3, #3
 800199e:	f000 80f8 	beq.w	8001b92 <TSK_MediumFrequencyTaskM1+0x2ca>
                  STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 80019a2:	4a85      	ldr	r2, [pc, #532]	; (8001bb8 <TSK_MediumFrequencyTaskM1+0x2f0>)
                  FOCVars[M1].bDriveInput = EXTERNAL;
 80019a4:	4b85      	ldr	r3, [pc, #532]	; (8001bbc <TSK_MediumFrequencyTaskM1+0x2f4>)
                  STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 80019a6:	6810      	ldr	r0, [r2, #0]
 80019a8:	4985      	ldr	r1, [pc, #532]	; (8001bc0 <TSK_MediumFrequencyTaskM1+0x2f8>)
                  FOCVars[M1].bDriveInput = EXTERNAL;
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
                  STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 80019b0:	f005 fba2 	bl	80070f8 <STC_SetSpeedSensor>
                  STO_PLL_Clear(&STO_PLL_M1);
 80019b4:	487b      	ldr	r0, [pc, #492]	; (8001ba4 <TSK_MediumFrequencyTaskM1+0x2dc>)
 80019b6:	f005 fe0b 	bl	80075d0 <STO_PLL_Clear>
                  FOC_Clear( M1 );
 80019ba:	2000      	movs	r0, #0
 80019bc:	f7ff fe90 	bl	80016e0 <FOC_Clear>
                  R3_1_SwitchOnPWM(pwmcHandle[M1]);
 80019c0:	6828      	ldr	r0, [r5, #0]
 80019c2:	f004 fb49 	bl	8006058 <R3_1_SwitchOnPWM>
                  Mci[M1].State = START;
 80019c6:	2304      	movs	r3, #4
 80019c8:	7663      	strb	r3, [r4, #25]
 80019ca:	e792      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80019cc:	7e23      	ldrb	r3, [r4, #24]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d18f      	bne.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80019d2:	2300      	movs	r3, #0
 80019d4:	8323      	strh	r3, [r4, #24]
 80019d6:	e78c      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 80019d8:	f7ff ff6c 	bl	80018b4 <TSK_StopPermanencyTimeHasElapsedM1>
 80019dc:	2800      	cmp	r0, #0
 80019de:	d088      	beq.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 80019e0:	4b75      	ldr	r3, [pc, #468]	; (8001bb8 <TSK_MediumFrequencyTaskM1+0x2f0>)
 80019e2:	4977      	ldr	r1, [pc, #476]	; (8001bc0 <TSK_MediumFrequencyTaskM1+0x2f8>)
 80019e4:	6818      	ldr	r0, [r3, #0]
 80019e6:	f005 fb87 	bl	80070f8 <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 80019ea:	4875      	ldr	r0, [pc, #468]	; (8001bc0 <TSK_MediumFrequencyTaskM1+0x2f8>)
 80019ec:	f005 fed0 	bl	8007790 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80019f0:	2300      	movs	r3, #0
 80019f2:	8323      	strh	r3, [r4, #24]
 80019f4:	e77d      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80019f6:	7e23      	ldrb	r3, [r4, #24]
 80019f8:	2b05      	cmp	r3, #5
 80019fa:	d069      	beq.n	8001ad0 <TSK_MediumFrequencyTaskM1+0x208>
            MCI_ExecBufferedCommands(&Mci[M1]);
 80019fc:	486b      	ldr	r0, [pc, #428]	; (8001bac <TSK_MediumFrequencyTaskM1+0x2e4>)
 80019fe:	f7ff fcc3 	bl	8001388 <MCI_ExecBufferedCommands>
              FOC_CalcCurrRef(M1);
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff ff3a 	bl	800187c <FOC_CalcCurrRef>
              if(!IsSpeedReliable)
 8001a08:	2d00      	cmp	r5, #0
 8001a0a:	f47f af72 	bne.w	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
                MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001a0e:	4867      	ldr	r0, [pc, #412]	; (8001bac <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001a10:	462a      	mov	r2, r5
 8001a12:	2120      	movs	r1, #32
 8001a14:	f7ff fcac 	bl	8001370 <MCI_FaultProcessing>
 8001a18:	e76b      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001a1a:	7e23      	ldrb	r3, [r4, #24]
 8001a1c:	2b05      	cmp	r3, #5
 8001a1e:	d057      	beq.n	8001ad0 <TSK_MediumFrequencyTaskM1+0x208>
            if (! RUC_OTF_Exec(&RevUpControlM1))
 8001a20:	4863      	ldr	r0, [pc, #396]	; (8001bb0 <TSK_MediumFrequencyTaskM1+0x2e8>)
 8001a22:	f005 f9f3 	bl	8006e0c <RUC_OTF_Exec>
 8001a26:	4602      	mov	r2, r0
 8001a28:	2800      	cmp	r0, #0
 8001a2a:	d162      	bne.n	8001af2 <TSK_MediumFrequencyTaskM1+0x22a>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001a2c:	485f      	ldr	r0, [pc, #380]	; (8001bac <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001a2e:	2110      	movs	r1, #16
 8001a30:	f7ff fc9e 	bl	8001370 <MCI_FaultProcessing>
           (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001a34:	f10d 0102 	add.w	r1, sp, #2
 8001a38:	4861      	ldr	r0, [pc, #388]	; (8001bc0 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001a3a:	f005 ff0f 	bl	800785c <VSS_CalcAvrgMecSpeedUnit>
             ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 8001a3e:	f10d 0102 	add.w	r1, sp, #2
 8001a42:	4858      	ldr	r0, [pc, #352]	; (8001ba4 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001a44:	f005 fe24 	bl	8007690 <STO_PLL_IsObserverConverged>
 8001a48:	4605      	mov	r5, r0
             STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 8001a4a:	4858      	ldr	r0, [pc, #352]	; (8001bac <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001a4c:	f7ff fd0a 	bl	8001464 <MCI_GetImposedMotorDirection>
 8001a50:	b241      	sxtb	r1, r0
 8001a52:	4854      	ldr	r0, [pc, #336]	; (8001ba4 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001a54:	f005 fe98 	bl	8007788 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8001a58:	4859      	ldr	r0, [pc, #356]	; (8001bc0 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f005 ffa0 	bl	80079a0 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001a60:	2d00      	cmp	r5, #0
 8001a62:	f43f af46 	beq.w	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001a66:	484f      	ldr	r0, [pc, #316]	; (8001ba4 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001a68:	4e54      	ldr	r6, [pc, #336]	; (8001bbc <TSK_MediumFrequencyTaskM1+0x2f4>)
              REMNG_Init(pREMNG[M1]);
 8001a6a:	4d56      	ldr	r5, [pc, #344]	; (8001bc4 <TSK_MediumFrequencyTaskM1+0x2fc>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001a6c:	f005 faec 	bl	8007048 <SPD_GetElAngle>
 8001a70:	4601      	mov	r1, r0
 8001a72:	6870      	ldr	r0, [r6, #4]
 8001a74:	f7ff fd96 	bl	80015a4 <MCM_Park>
 8001a78:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 8001a7a:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001a7c:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001a7e:	f005 f8bf 	bl	8006c00 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001a82:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8001a86:	6828      	ldr	r0, [r5, #0]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f005 f8ff 	bl	8006c8c <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001a8e:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001a92:	6828      	ldr	r0, [r5, #0]
 8001a94:	2219      	movs	r2, #25
 8001a96:	f005 f8f9 	bl	8006c8c <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001a9a:	2313      	movs	r3, #19
 8001a9c:	7663      	strb	r3, [r4, #25]
 8001a9e:	e728      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001aa0:	7e25      	ldrb	r5, [r4, #24]
 8001aa2:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8001aa6:	2d01      	cmp	r5, #1
 8001aa8:	f47f af23 	bne.w	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001aac:	483f      	ldr	r0, [pc, #252]	; (8001bac <TSK_MediumFrequencyTaskM1+0x2e4>)
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001aae:	4e41      	ldr	r6, [pc, #260]	; (8001bb4 <TSK_MediumFrequencyTaskM1+0x2ec>)
              RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001ab0:	f7ff fcd8 	bl	8001464 <MCI_GetImposedMotorDirection>
 8001ab4:	4601      	mov	r1, r0
 8001ab6:	483e      	ldr	r0, [pc, #248]	; (8001bb0 <TSK_MediumFrequencyTaskM1+0x2e8>)
 8001ab8:	f005 f964 	bl	8006d84 <RUC_Clear>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001abc:	6830      	ldr	r0, [r6, #0]
 8001abe:	f890 106e 	ldrb.w	r1, [r0, #110]	; 0x6e
 8001ac2:	2900      	cmp	r1, #0
 8001ac4:	d149      	bne.n	8001b5a <TSK_MediumFrequencyTaskM1+0x292>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001ac6:	f000 fbc3 	bl	8002250 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8001aca:	2311      	movs	r3, #17
 8001acc:	7663      	strb	r3, [r4, #25]
 8001ace:	e710      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
  R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001ad0:	4b38      	ldr	r3, [pc, #224]	; (8001bb4 <TSK_MediumFrequencyTaskM1+0x2ec>)
 8001ad2:	6818      	ldr	r0, [r3, #0]
 8001ad4:	f004 fb06 	bl	80060e4 <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fe01 	bl	80016e0 <FOC_Clear>
  PQD_Clear(pMPM[motor]);
 8001ade:	6830      	ldr	r0, [r6, #0]
 8001ae0:	f004 f928 	bl	8005d34 <PQD_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001ae4:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001ae8:	f7ff fede 	bl	80018a8 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001aec:	2308      	movs	r3, #8
 8001aee:	7663      	strb	r3, [r4, #25]
  return;
 8001af0:	e6ff      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
             IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8001af2:	4b31      	ldr	r3, [pc, #196]	; (8001bb8 <TSK_MediumFrequencyTaskM1+0x2f0>)
 8001af4:	6818      	ldr	r0, [r3, #0]
 8001af6:	f005 fb57 	bl	80071a8 <STC_CalcTorqueReference>
             IqdRef.d = FOCVars[M1].UserIdref;
 8001afa:	4b30      	ldr	r3, [pc, #192]	; (8001bbc <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001afc:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
             FOCVars[M1].Iqdref = IqdRef;
 8001b00:	8218      	strh	r0, [r3, #16]
 8001b02:	825a      	strh	r2, [r3, #18]
 8001b04:	e796      	b.n	8001a34 <TSK_MediumFrequencyTaskM1+0x16c>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001b06:	482e      	ldr	r0, [pc, #184]	; (8001bc0 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001b08:	a901      	add	r1, sp, #4
 8001b0a:	f005 fea7 	bl	800785c <VSS_CalcAvrgMecSpeedUnit>
 8001b0e:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001b10:	482b      	ldr	r0, [pc, #172]	; (8001bc0 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001b12:	f005 ff53 	bl	80079bc <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8001b16:	2d00      	cmp	r5, #0
 8001b18:	d038      	beq.n	8001b8c <TSK_MediumFrequencyTaskM1+0x2c4>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001b1a:	4b28      	ldr	r3, [pc, #160]	; (8001bbc <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001b1c:	482a      	ldr	r0, [pc, #168]	; (8001bc8 <TSK_MediumFrequencyTaskM1+0x300>)
 8001b1e:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001b22:	4d25      	ldr	r5, [pc, #148]	; (8001bb8 <TSK_MediumFrequencyTaskM1+0x2f0>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001b24:	f004 f8a4 	bl	8005c70 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001b28:	b201      	sxth	r1, r0
 8001b2a:	fb06 f101 	mul.w	r1, r6, r1
 8001b2e:	4826      	ldr	r0, [pc, #152]	; (8001bc8 <TSK_MediumFrequencyTaskM1+0x300>)
 8001b30:	f004 f89c 	bl	8005c6c <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001b34:	491b      	ldr	r1, [pc, #108]	; (8001ba4 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001b36:	6828      	ldr	r0, [r5, #0]
 8001b38:	f005 fade 	bl	80070f8 <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f7ff fe9b 	bl	8001878 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8001b42:	2000      	movs	r0, #0
 8001b44:	f7ff fe9a 	bl	800187c <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001b48:	6828      	ldr	r0, [r5, #0]
 8001b4a:	f005 fb65 	bl	8007218 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001b4e:	4817      	ldr	r0, [pc, #92]	; (8001bac <TSK_MediumFrequencyTaskM1+0x2e4>)
 8001b50:	f7ff fc1a 	bl	8001388 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001b54:	2306      	movs	r3, #6
 8001b56:	7663      	strb	r3, [r4, #25]
 8001b58:	e6cb      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001b5a:	4629      	mov	r1, r5
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001b5c:	f8a0 504e 	strh.w	r5, [r0, #78]	; 0x4e
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001b60:	f000 fb76 	bl	8002250 <PWMC_CurrentReadingCalibr>
                  FOCVars[M1].bDriveInput = EXTERNAL;
 8001b64:	4b15      	ldr	r3, [pc, #84]	; (8001bbc <TSK_MediumFrequencyTaskM1+0x2f4>)
                  STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 8001b66:	4a14      	ldr	r2, [pc, #80]	; (8001bb8 <TSK_MediumFrequencyTaskM1+0x2f0>)
                  FOCVars[M1].bDriveInput = EXTERNAL;
 8001b68:	f883 5024 	strb.w	r5, [r3, #36]	; 0x24
                  STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);
 8001b6c:	6810      	ldr	r0, [r2, #0]
 8001b6e:	4914      	ldr	r1, [pc, #80]	; (8001bc0 <TSK_MediumFrequencyTaskM1+0x2f8>)
 8001b70:	f005 fac2 	bl	80070f8 <STC_SetSpeedSensor>
                  STO_PLL_Clear(&STO_PLL_M1);
 8001b74:	480b      	ldr	r0, [pc, #44]	; (8001ba4 <TSK_MediumFrequencyTaskM1+0x2dc>)
 8001b76:	f005 fd2b 	bl	80075d0 <STO_PLL_Clear>
                  FOC_Clear( M1 );
 8001b7a:	2000      	movs	r0, #0
 8001b7c:	f7ff fdb0 	bl	80016e0 <FOC_Clear>
                  R3_1_SwitchOnPWM(pwmcHandle[M1]);
 8001b80:	6830      	ldr	r0, [r6, #0]
 8001b82:	f004 fa69 	bl	8006058 <R3_1_SwitchOnPWM>
                  Mci[M1].State = START;
 8001b86:	2304      	movs	r3, #4
 8001b88:	7663      	strb	r3, [r4, #25]
 8001b8a:	e6b2      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
              LoopClosed = LoopClosed || tempBool;
 8001b8c:	2800      	cmp	r0, #0
 8001b8e:	d1c4      	bne.n	8001b1a <TSK_MediumFrequencyTaskM1+0x252>
 8001b90:	e6af      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
                  FOC_Clear(M1);
 8001b92:	2000      	movs	r0, #0
 8001b94:	f7ff fda4 	bl	80016e0 <FOC_Clear>
                  PQD_Clear(pMPM[M1]);
 8001b98:	6830      	ldr	r0, [r6, #0]
 8001b9a:	f004 f8cb 	bl	8005d34 <PQD_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	8323      	strh	r3, [r4, #24]
 8001ba2:	e6a6      	b.n	80018f2 <TSK_MediumFrequencyTaskM1+0x2a>
 8001ba4:	200002a4 	.word	0x200002a4
 8001ba8:	20000460 	.word	0x20000460
 8001bac:	20000730 	.word	0x20000730
 8001bb0:	20000218 	.word	0x20000218
 8001bb4:	20000790 	.word	0x20000790
 8001bb8:	2000046c 	.word	0x2000046c
 8001bbc:	2000075c 	.word	0x2000075c
 8001bc0:	20000428 	.word	0x20000428
 8001bc4:	2000078c 	.word	0x2000078c
 8001bc8:	20000138 	.word	0x20000138

08001bcc <MC_Scheduler>:
{
 8001bcc:	b538      	push	{r3, r4, r5, lr}
  if (((uint8_t)1) == bMCBootCompleted)
 8001bce:	4b11      	ldr	r3, [pc, #68]	; (8001c14 <MC_Scheduler+0x48>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d000      	beq.n	8001bd8 <MC_Scheduler+0xc>
}
 8001bd6:	bd38      	pop	{r3, r4, r5, pc}
    if(hMFTaskCounterM1 > 0u)
 8001bd8:	4d0f      	ldr	r5, [pc, #60]	; (8001c18 <MC_Scheduler+0x4c>)
 8001bda:	b2dc      	uxtb	r4, r3
 8001bdc:	882b      	ldrh	r3, [r5, #0]
 8001bde:	b19b      	cbz	r3, 8001c08 <MC_Scheduler+0x3c>
      hMFTaskCounterM1--;
 8001be0:	3b01      	subs	r3, #1
 8001be2:	802b      	strh	r3, [r5, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001be4:	4a0d      	ldr	r2, [pc, #52]	; (8001c1c <MC_Scheduler+0x50>)
 8001be6:	8813      	ldrh	r3, [r2, #0]
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	b11b      	cbz	r3, 8001bf4 <MC_Scheduler+0x28>
      hBootCapDelayCounterM1--;
 8001bec:	8813      	ldrh	r3, [r2, #0]
 8001bee:	3b01      	subs	r3, #1
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	; (8001c20 <MC_Scheduler+0x54>)
 8001bf6:	8813      	ldrh	r3, [r2, #0]
 8001bf8:	b29b      	uxth	r3, r3
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d0eb      	beq.n	8001bd6 <MC_Scheduler+0xa>
      hStopPermanencyCounterM1--;
 8001bfe:	8813      	ldrh	r3, [r2, #0]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	8013      	strh	r3, [r2, #0]
}
 8001c06:	bd38      	pop	{r3, r4, r5, pc}
      TSK_MediumFrequencyTaskM1();
 8001c08:	f7ff fe5e 	bl	80018c8 <TSK_MediumFrequencyTaskM1>
      MC_APP_PostMediumFrequencyHook_M1();
 8001c0c:	f7ff fb82 	bl	8001314 <MC_APP_PostMediumFrequencyHook_M1>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 8001c10:	802c      	strh	r4, [r5, #0]
 8001c12:	e7e7      	b.n	8001be4 <MC_Scheduler+0x18>
 8001c14:	20000782 	.word	0x20000782
 8001c18:	20000786 	.word	0x20000786
 8001c1c:	20000784 	.word	0x20000784
 8001c20:	20000788 	.word	0x20000788

08001c24 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint8_t bMotorNbr = 0;

  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if (SWITCH_OVER == Mci[M1].State)
 8001c28:	4f55      	ldr	r7, [pc, #340]	; (8001d80 <TSK_HighFrequencyTask+0x15c>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001c2a:	4c56      	ldr	r4, [pc, #344]	; (8001d84 <TSK_HighFrequencyTask+0x160>)
  if (SWITCH_OVER == Mci[M1].State)
 8001c2c:	7e7b      	ldrb	r3, [r7, #25]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001c2e:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001c32:	b088      	sub	sp, #32
  if (SWITCH_OVER == Mci[M1].State)
 8001c34:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001c36:	9005      	str	r0, [sp, #20]
  if (SWITCH_OVER == Mci[M1].State)
 8001c38:	f000 808d 	beq.w	8001d56 <TSK_HighFrequencyTask+0x132>
    if (!REMNG_RampCompleted(pREMNG[M1]))
    {
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
    }
  }
  if(!RUC_Get_SCLowsideOTF_Status(&RevUpControlM1))
 8001c3c:	4852      	ldr	r0, [pc, #328]	; (8001d88 <TSK_HighFrequencyTask+0x164>)
 8001c3e:	f005 f9ff 	bl	8007040 <RUC_Get_SCLowsideOTF_Status>
 8001c42:	4605      	mov	r5, r0
 8001c44:	2800      	cmp	r0, #0
 8001c46:	d156      	bne.n	8001cf6 <TSK_HighFrequencyTask+0xd2>
  ab_t Iab;
  alphabeta_t Ialphabeta, Valphabeta;
  int16_t hElAngle;
  uint16_t hCodeError;
  SpeednPosFdbk_Handle_t *speedHandle;
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001c48:	4b50      	ldr	r3, [pc, #320]	; (8001d8c <TSK_HighFrequencyTask+0x168>)
  hElAngle = SPD_GetElAngle(speedHandle);
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001c4a:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8001dac <TSK_HighFrequencyTask+0x188>
  speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001c4e:	6818      	ldr	r0, [r3, #0]
 8001c50:	f005 fa54 	bl	80070fc <STC_GetSpeedSensor>
 8001c54:	4606      	mov	r6, r0
  hElAngle = SPD_GetElAngle(speedHandle);
 8001c56:	f005 f9f7 	bl	8007048 <SPD_GetElAngle>
 8001c5a:	4680      	mov	r8, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001c5c:	4630      	mov	r0, r6
 8001c5e:	f005 f9fb 	bl	8007058 <SPD_GetInstElSpeedDpp>
  PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001c62:	a902      	add	r1, sp, #8
 8001c64:	f8d9 0000 	ldr.w	r0, [r9]
 8001c68:	f000 f9a4 	bl	8001fb4 <PWMC_GetPhaseCurrents>
  Ialphabeta = MCM_Clarke(Iab);
 8001c6c:	9802      	ldr	r0, [sp, #8]
 8001c6e:	f7ff fc23 	bl	80014b8 <MCM_Clarke>
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c72:	4641      	mov	r1, r8
  Ialphabeta = MCM_Clarke(Iab);
 8001c74:	9003      	str	r0, [sp, #12]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c76:	f7ff fc95 	bl	80015a4 <MCM_Park>
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c7a:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
  Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c7e:	9000      	str	r0, [sp, #0]
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c80:	b201      	sxth	r1, r0
 8001c82:	1a59      	subs	r1, r3, r1
 8001c84:	4b42      	ldr	r3, [pc, #264]	; (8001d90 <TSK_HighFrequencyTask+0x16c>)
 8001c86:	6818      	ldr	r0, [r3, #0]
 8001c88:	f003 fff4 	bl	8005c74 <PI_Controller>
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001c8c:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8001c90:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001c94:	1ac9      	subs	r1, r1, r3
 8001c96:	4b3f      	ldr	r3, [pc, #252]	; (8001d94 <TSK_HighFrequencyTask+0x170>)
  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001c98:	4682      	mov	sl, r0
  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001c9a:	6818      	ldr	r0, [r3, #0]
 8001c9c:	f003 ffea 	bl	8005c74 <PI_Controller>
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001ca0:	f8ad a004 	strh.w	sl, [sp, #4]
 8001ca4:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001ca8:	9901      	ldr	r1, [sp, #4]
 8001caa:	483b      	ldr	r0, [pc, #236]	; (8001d98 <TSK_HighFrequencyTask+0x174>)
 8001cac:	f003 ff66 	bl	8005b7c <Circle_Limitation>
 8001cb0:	4603      	mov	r3, r0
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001cb2:	4630      	mov	r0, r6
  Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 8001cb4:	fa0f fa83 	sxth.w	sl, r3
 8001cb8:	141e      	asrs	r6, r3, #16
 8001cba:	9301      	str	r3, [sp, #4]
  hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001cbc:	f005 f9cc 	bl	8007058 <SPD_GetInstElSpeedDpp>
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001cc0:	4641      	mov	r1, r8
 8001cc2:	9801      	ldr	r0, [sp, #4]
 8001cc4:	f7ff fcb2 	bl	800162c <MCM_Rev_Park>
 8001cc8:	4601      	mov	r1, r0
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001cca:	f8d9 0000 	ldr.w	r0, [r9]
  Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001cce:	9104      	str	r1, [sp, #16]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001cd0:	f000 f972 	bl	8001fb8 <PWMC_SetPhaseVoltage>

  FOCVars[M1].Vqd = Vqd;
  FOCVars[M1].Iab = Iab;
 8001cd4:	9b02      	ldr	r3, [sp, #8]
 8001cd6:	6023      	str	r3, [r4, #0]
  hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001cd8:	4601      	mov	r1, r0
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001cda:	9b03      	ldr	r3, [sp, #12]
  FOCVars[M1].Iqd = Iqd;
  FOCVars[M1].Valphabeta = Valphabeta;
 8001cdc:	9804      	ldr	r0, [sp, #16]
  FOCVars[M1].Ialphabeta = Ialphabeta;
 8001cde:	6063      	str	r3, [r4, #4]
  if(hFOCreturn == MC_DURATION)
 8001ce0:	2901      	cmp	r1, #1
  FOCVars[M1].Iqd = Iqd;
 8001ce2:	9b00      	ldr	r3, [sp, #0]
  FOCVars[M1].Vqd = Vqd;
 8001ce4:	f8a4 a016 	strh.w	sl, [r4, #22]
 8001ce8:	8326      	strh	r6, [r4, #24]
  FOCVars[M1].hElAngle = hElAngle;
 8001cea:	f8a4 8020 	strh.w	r8, [r4, #32]
  FOCVars[M1].Iqd = Iqd;
 8001cee:	60e3      	str	r3, [r4, #12]
  FOCVars[M1].Valphabeta = Valphabeta;
 8001cf0:	f8c4 001a 	str.w	r0, [r4, #26]
  if(hFOCreturn == MC_DURATION)
 8001cf4:	d03b      	beq.n	8001d6e <TSK_HighFrequencyTask+0x14a>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001cf6:	4824      	ldr	r0, [pc, #144]	; (8001d88 <TSK_HighFrequencyTask+0x164>)
 8001cf8:	f005 f998 	bl	800702c <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001cfc:	6862      	ldr	r2, [r4, #4]
 8001cfe:	9206      	str	r2, [sp, #24]
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001d00:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001d02:	4826      	ldr	r0, [pc, #152]	; (8001d9c <TSK_HighFrequencyTask+0x178>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001d04:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001d06:	f003 ff37 	bl	8005b78 <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001d0a:	a905      	add	r1, sp, #20
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001d0c:	4603      	mov	r3, r0
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001d0e:	4824      	ldr	r0, [pc, #144]	; (8001da0 <TSK_HighFrequencyTask+0x17c>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001d10:	f8ad 301c 	strh.w	r3, [sp, #28]
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001d14:	f005 fa88 	bl	8007228 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001d18:	4821      	ldr	r0, [pc, #132]	; (8001da0 <TSK_HighFrequencyTask+0x17c>)
 8001d1a:	f005 fc27 	bl	800756c <STO_PLL_CalcAvrgElSpeedDpp>
	 if (false == IsAccelerationStageReached)
 8001d1e:	b1b4      	cbz	r4, 8001d4e <TSK_HighFrequencyTask+0x12a>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 8001d20:	7e7b      	ldrb	r3, [r7, #25]
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	d005      	beq.n	8001d32 <TSK_HighFrequencyTask+0x10e>
 8001d26:	2b13      	cmp	r3, #19
 8001d28:	d003      	beq.n	8001d32 <TSK_HighFrequencyTask+0x10e>
}
 8001d2a:	2000      	movs	r0, #0
 8001d2c:	b008      	add	sp, #32
 8001d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001d32:	481b      	ldr	r0, [pc, #108]	; (8001da0 <TSK_HighFrequencyTask+0x17c>)
 8001d34:	f005 f988 	bl	8007048 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001d38:	a904      	add	r1, sp, #16
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001d3a:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001d3c:	4819      	ldr	r0, [pc, #100]	; (8001da4 <TSK_HighFrequencyTask+0x180>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001d3e:	f8ad 3010 	strh.w	r3, [sp, #16]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001d42:	f005 fd37 	bl	80077b4 <VSS_CalcElAngle>
}
 8001d46:	2000      	movs	r0, #0
 8001d48:	b008      	add	sp, #32
 8001d4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      STO_ResetPLL(&STO_PLL_M1);
 8001d4e:	4814      	ldr	r0, [pc, #80]	; (8001da0 <TSK_HighFrequencyTask+0x17c>)
 8001d50:	f005 fd06 	bl	8007760 <STO_ResetPLL>
 8001d54:	e7e4      	b.n	8001d20 <TSK_HighFrequencyTask+0xfc>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001d56:	4d14      	ldr	r5, [pc, #80]	; (8001da8 <TSK_HighFrequencyTask+0x184>)
 8001d58:	6828      	ldr	r0, [r5, #0]
 8001d5a:	f004 ff7b 	bl	8006c54 <REMNG_RampCompleted>
 8001d5e:	2800      	cmp	r0, #0
 8001d60:	f47f af6c 	bne.w	8001c3c <TSK_HighFrequencyTask+0x18>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8001d64:	6828      	ldr	r0, [r5, #0]
 8001d66:	f004 ff53 	bl	8006c10 <REMNG_Calc>
 8001d6a:	8220      	strh	r0, [r4, #16]
 8001d6c:	e766      	b.n	8001c3c <TSK_HighFrequencyTask+0x18>
    MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 8001d6e:	4804      	ldr	r0, [pc, #16]	; (8001d80 <TSK_HighFrequencyTask+0x15c>)
 8001d70:	462a      	mov	r2, r5
 8001d72:	f7ff fafd 	bl	8001370 <MCI_FaultProcessing>
}
 8001d76:	2000      	movs	r0, #0
 8001d78:	b008      	add	sp, #32
 8001d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001d7e:	bf00      	nop
 8001d80:	20000730 	.word	0x20000730
 8001d84:	2000075c 	.word	0x2000075c
 8001d88:	20000218 	.word	0x20000218
 8001d8c:	2000046c 	.word	0x2000046c
 8001d90:	20000468 	.word	0x20000468
 8001d94:	20000464 	.word	0x20000464
 8001d98:	2000002c 	.word	0x2000002c
 8001d9c:	20000000 	.word	0x20000000
 8001da0:	200002a4 	.word	0x200002a4
 8001da4:	20000428 	.word	0x20000428
 8001da8:	2000078c 	.word	0x2000078c
 8001dac:	20000790 	.word	0x20000790

08001db0 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001db0:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001db2:	4b1b      	ldr	r3, [pc, #108]	; (8001e20 <TSK_SafetyTask_PWMOFF+0x70>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001db4:	4e1b      	ldr	r6, [pc, #108]	; (8001e24 <TSK_SafetyTask_PWMOFF+0x74>)
{
 8001db6:	b082      	sub	sp, #8
 8001db8:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001dba:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001dbe:	f003 ff31 	bl	8005c24 <NTC_CalcAvTemp>
 8001dc2:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001dc4:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001dc8:	f000 fa68 	bl	800229c <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001dcc:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001dd0:	4328      	orrs	r0, r5
 8001dd2:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 8001dd4:	b174      	cbz	r4, 8001df4 <TSK_SafetyTask_PWMOFF+0x44>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbusFilt(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 8001dd6:	4814      	ldr	r0, [pc, #80]	; (8001e28 <TSK_SafetyTask_PWMOFF+0x78>)
 8001dd8:	43ea      	mvns	r2, r5
 8001dda:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8001dde:	b292      	uxth	r2, r2
 8001de0:	4629      	mov	r1, r5
 8001de2:	9001      	str	r0, [sp, #4]
 8001de4:	f7ff fac4 	bl	8001370 <MCI_FaultProcessing>

  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8001de8:	9801      	ldr	r0, [sp, #4]
 8001dea:	f7ff fb35 	bl	8001458 <MCI_GetFaultState>
 8001dee:	b940      	cbnz	r0, 8001e02 <TSK_SafetyTask_PWMOFF+0x52>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8001df0:	b002      	add	sp, #8
 8001df2:	bd70      	pop	{r4, r5, r6, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbusFilt(&BusVoltageSensor_M1);
 8001df4:	480d      	ldr	r0, [pc, #52]	; (8001e2c <TSK_SafetyTask_PWMOFF+0x7c>)
 8001df6:	f004 fe9d 	bl	8006b34 <RVBS_CalcAvVbusFilt>
 8001dfa:	f000 000e 	and.w	r0, r0, #14
 8001dfe:	4305      	orrs	r5, r0
 8001e00:	e7e9      	b.n	8001dd6 <TSK_SafetyTask_PWMOFF+0x26>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001e02:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001e06:	f000 fa1f 	bl	8002248 <PWMC_SwitchOffPWM>
    FOC_Clear(bMotor);
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f7ff fc68 	bl	80016e0 <FOC_Clear>
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001e10:	4b07      	ldr	r3, [pc, #28]	; (8001e30 <TSK_SafetyTask_PWMOFF+0x80>)
 8001e12:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8001e16:	b002      	add	sp, #8
 8001e18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    PQD_Clear(pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8001e1c:	f003 bf8a 	b.w	8005d34 <PQD_Clear>
 8001e20:	20000470 	.word	0x20000470
 8001e24:	20000790 	.word	0x20000790
 8001e28:	20000730 	.word	0x20000730
 8001e2c:	20000000 	.word	0x20000000
 8001e30:	20000460 	.word	0x20000460

08001e34 <TSK_SafetyTask>:
{
 8001e34:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8001e36:	4b06      	ldr	r3, [pc, #24]	; (8001e50 <TSK_SafetyTask+0x1c>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	2b01      	cmp	r3, #1
 8001e3c:	d000      	beq.n	8001e40 <TSK_SafetyTask+0xc>
}
 8001e3e:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8001e40:	2000      	movs	r0, #0
 8001e42:	f7ff ffb5 	bl	8001db0 <TSK_SafetyTask_PWMOFF>
}
 8001e46:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 8001e4a:	f000 bb57 	b.w	80024fc <RCM_ExecUserConv>
 8001e4e:	bf00      	nop
 8001e50:	20000782 	.word	0x20000782

08001e54 <MC_RunMotorControlTasks>:
{
 8001e54:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8001e56:	4b04      	ldr	r3, [pc, #16]	; (8001e68 <MC_RunMotorControlTasks+0x14>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	b903      	cbnz	r3, 8001e5e <MC_RunMotorControlTasks+0xa>
}
 8001e5c:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 8001e5e:	f7ff feb5 	bl	8001bcc <MC_Scheduler>
    TSK_SafetyTask();
 8001e62:	f7ff ffe7 	bl	8001e34 <TSK_SafetyTask>
}
 8001e66:	bd08      	pop	{r3, pc}
 8001e68:	20000782 	.word	0x20000782

08001e6c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 8001e6c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001e6e:	4b05      	ldr	r3, [pc, #20]	; (8001e84 <TSK_HardwareFaultTask+0x18>)
 8001e70:	6818      	ldr	r0, [r3, #0]
 8001e72:	f004 f937 	bl	80060e4 <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);

  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 8001e76:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 8001e7a:	4803      	ldr	r0, [pc, #12]	; (8001e88 <TSK_HardwareFaultTask+0x1c>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2180      	movs	r1, #128	; 0x80
 8001e80:	f7ff ba76 	b.w	8001370 <MCI_FaultProcessing>
 8001e84:	20000790 	.word	0x20000790
 8001e88:	20000730 	.word	0x20000730

08001e8c <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8001e8c:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e8e:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001e92:	4b34      	ldr	r3, [pc, #208]	; (8001f64 <mc_lock_pins+0xd8>)
 8001e94:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001e96:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e9a:	61d1      	str	r1, [r2, #28]
 8001e9c:	b08c      	sub	sp, #48	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001e9e:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ea0:	69d3      	ldr	r3, [r2, #28]
 8001ea2:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ea4:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ea8:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  (void) temp;
 8001eac:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eae:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eb0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eb2:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001eb4:	69d3      	ldr	r3, [r2, #28]
 8001eb6:	930a      	str	r3, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eb8:	2140      	movs	r1, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eba:	4b2b      	ldr	r3, [pc, #172]	; (8001f68 <mc_lock_pins+0xdc>)
  (void) temp;
 8001ebc:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ebe:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ec0:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ec2:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ec4:	69d3      	ldr	r3, [r2, #28]
 8001ec6:	9309      	str	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ec8:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ecc:	f44f 6080 	mov.w	r0, #1024	; 0x400
  (void) temp;
 8001ed0:	9b09      	ldr	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ed2:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ed4:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ed6:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001ed8:	69d4      	ldr	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eda:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <mc_lock_pins+0xe0>)
  temp = READ_REG(GPIOx->LCKR);
 8001edc:	9408      	str	r4, [sp, #32]
  (void) temp;
 8001ede:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ee0:	f44f 3488 	mov.w	r4, #69632	; 0x11000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ee4:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ee8:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001eea:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001eec:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001eee:	69dc      	ldr	r4, [r3, #28]
 8001ef0:	9407      	str	r4, [sp, #28]
  (void) temp;
 8001ef2:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001ef4:	f44f 3484 	mov.w	r4, #67584	; 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001ef8:	f44f 6500 	mov.w	r5, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001efc:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001efe:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f00:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f02:	69dc      	ldr	r4, [r3, #28]
 8001f04:	9406      	str	r4, [sp, #24]
  (void) temp;
 8001f06:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f08:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f0a:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f0c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f0e:	69d9      	ldr	r1, [r3, #28]
 8001f10:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f12:	2402      	movs	r4, #2
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f14:	4916      	ldr	r1, [pc, #88]	; (8001f70 <mc_lock_pins+0xe4>)
  (void) temp;
 8001f16:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f18:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f1a:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f1c:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f1e:	69d0      	ldr	r0, [r2, #28]
 8001f20:	9004      	str	r0, [sp, #16]
  (void) temp;
 8001f22:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f24:	f04f 1001 	mov.w	r0, #65537	; 0x10001
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f28:	2501      	movs	r5, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f2a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f2c:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f2e:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f30:	69d2      	ldr	r2, [r2, #28]
 8001f32:	9203      	str	r2, [sp, #12]
  (void) temp;
 8001f34:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f36:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f38:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f3a:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f3c:	69da      	ldr	r2, [r3, #28]
 8001f3e:	9202      	str	r2, [sp, #8]
  (void) temp;
 8001f40:	9a02      	ldr	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f42:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f44:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f46:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f48:	69d9      	ldr	r1, [r3, #28]
 8001f4a:	9101      	str	r1, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f4c:	4a09      	ldr	r2, [pc, #36]	; (8001f74 <mc_lock_pins+0xe8>)
  (void) temp;
 8001f4e:	9801      	ldr	r0, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f50:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8001f52:	2104      	movs	r1, #4
 8001f54:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8001f56:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	9300      	str	r3, [sp, #0]
  (void) temp;
 8001f5c:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
}
 8001f5e:	b00c      	add	sp, #48	; 0x30
 8001f60:	bc30      	pop	{r4, r5}
 8001f62:	4770      	bx	lr
 8001f64:	00010100 	.word	0x00010100
 8001f68:	00010040 	.word	0x00010040
 8001f6c:	48000800 	.word	0x48000800
 8001f70:	00010002 	.word	0x00010002
 8001f74:	00010004 	.word	0x00010004

08001f78 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 8001f78:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 8001f7a:	f002 fc3b 	bl	80047f4 <HAL_RCC_GetHCLKFreq>
 8001f7e:	4b0a      	ldr	r3, [pc, #40]	; (8001fa8 <MX_MotorControl_Init+0x30>)
 8001f80:	fba3 3000 	umull	r3, r0, r3, r0
 8001f84:	09c0      	lsrs	r0, r0, #7
 8001f86:	f001 fa55 	bl	8003434 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <MX_MotorControl_Init+0x34>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	6819      	ldr	r1, [r3, #0]
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f001 fa02 	bl	800339c <HAL_NVIC_SetPriority>

  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8001f98:	4805      	ldr	r0, [pc, #20]	; (8001fb0 <MX_MotorControl_Init+0x38>)
 8001f9a:	f7ff fbdb 	bl	8001754 <MCboot>
  mc_lock_pins();
}
 8001f9e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 8001fa2:	f7ff bf73 	b.w	8001e8c <mc_lock_pins>
 8001fa6:	bf00      	nop
 8001fa8:	10624dd3 	.word	0x10624dd3
 8001fac:	20000480 	.word	0x20000480
 8001fb0:	20000794 	.word	0x20000794

08001fb4 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8001fb4:	6803      	ldr	r3, [r0, #0]
 8001fb6:	4718      	bx	r3

08001fb8 <PWMC_SetPhaseVoltage>:
  * @param  Valfa_beta: Voltage Components expressed in the @f$(\alpha, \beta)@f$ reference frame.
  * @retval #MC_NO_ERROR if no error occurred or #MC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8001fb8:	b510      	push	{r4, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001fba:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001fbe:	8f83      	ldrh	r3, [r0, #60]	; 0x3c
{
 8001fc0:	b082      	sub	sp, #8
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001fc2:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8001fc6:	9101      	str	r1, [sp, #4]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001fc8:	fb04 fc0c 	mul.w	ip, r4, ip
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001fcc:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001fce:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8001fd2:	fb03 f101 	mul.w	r1, r3, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8001fd6:	eb01 034c 	add.w	r3, r1, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8001fda:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8001fde:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8001fe2:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8001fe6:	f1b3 3fff 	cmp.w	r3, #4294967295
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8001fea:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8001fee:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8001ff2:	ea4f 0262 	mov.w	r2, r2, asr #1
    if (wY < 0)
 8001ff6:	f2c0 8086 	blt.w	8002106 <PWMC_SetPhaseVoltage+0x14e>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8001ffa:	f1b1 3fff 	cmp.w	r1, #4294967295
 8001ffe:	db57      	blt.n	80020b0 <PWMC_SetPhaseVoltage+0xf8>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002000:	ebbe 0e02 	subs.w	lr, lr, r2
 8002004:	bf44      	itt	mi
 8002006:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 800200a:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 800200e:	2900      	cmp	r1, #0
 8002010:	bfbc      	itt	lt
 8002012:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002016:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 800201a:	2b00      	cmp	r3, #0
 800201c:	bfb8      	it	lt
 800201e:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002022:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8002026:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 800202a:	bfb8      	it	lt
 800202c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 8002030:	f04f 0c01 	mov.w	ip, #1
        wTimePhB = wTimePhA + (wZ / 131072);
 8002034:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002038:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_2;
 800203c:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a

        pHandle->lowDuty = (uint16_t)wTimePhB;
 8002040:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002044:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002048:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 800204c:	f8b0 405e 	ldrh.w	r4, [r0, #94]	; 0x5e
 8002050:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8002054:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 8002058:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800205c:	b292      	uxth	r2, r2
 800205e:	b289      	uxth	r1, r1
 8002060:	b29b      	uxth	r3, r3
 8002062:	2c01      	cmp	r4, #1
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 8002064:	87c2      	strh	r2, [r0, #62]	; 0x3e
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 8002066:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 800206a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
    if (1U == pHandle->DTTest)
 800206e:	d11a      	bne.n	80020a6 <PWMC_SetPhaseVoltage+0xee>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 8002070:	f9b0 4050 	ldrsh.w	r4, [r0, #80]	; 0x50
 8002074:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 8002076:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 800207a:	bfcc      	ite	gt
 800207c:	1912      	addgt	r2, r2, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 800207e:	1b12      	suble	r2, r2, r4
 8002080:	b292      	uxth	r2, r2
 8002082:	87c2      	strh	r2, [r0, #62]	; 0x3e
      }

      if (pHandle->Ib > 0)
 8002084:	f9b0 2052 	ldrsh.w	r2, [r0, #82]	; 0x52
 8002088:	2a00      	cmp	r2, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 800208a:	f9b0 2054 	ldrsh.w	r2, [r0, #84]	; 0x54
        pHandle->CntPhB += pHandle->DTCompCnt;
 800208e:	bfcc      	ite	gt
 8002090:	1909      	addgt	r1, r1, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002092:	1b09      	suble	r1, r1, r4
      if (pHandle->Ic > 0)
 8002094:	2a00      	cmp	r2, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002096:	b289      	uxth	r1, r1
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002098:	bfcc      	ite	gt
 800209a:	191b      	addgt	r3, r3, r4
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 800209c:	1b1b      	suble	r3, r3, r4
 800209e:	f8a0 1040 	strh.w	r1, [r0, #64]	; 0x40
 80020a2:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80020a6:	6943      	ldr	r3, [r0, #20]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 80020a8:	b002      	add	sp, #8
 80020aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80020ae:	4718      	bx	r3
        if ( wX <= 0 )
 80020b0:	f1bc 0f00 	cmp.w	ip, #0
 80020b4:	dd4f      	ble.n	8002156 <PWMC_SetPhaseVoltage+0x19e>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80020b6:	ebbc 0e02 	subs.w	lr, ip, r2
 80020ba:	bf44      	itt	mi
 80020bc:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80020c0:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 80020c4:	2900      	cmp	r1, #0
 80020c6:	bfb8      	it	lt
 80020c8:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 80020cc:	f04f 0300 	mov.w	r3, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 80020d0:	bfb8      	it	lt
 80020d2:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_1;
 80020d6:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80020da:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 80020dc:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 80020e0:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80020e4:	bfb8      	it	lt
 80020e6:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 80020ea:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80020ee:	bfb8      	it	lt
 80020f0:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80020f4:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 80020f8:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 80020fc:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhC;
 8002100:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
 8002104:	e7a2      	b.n	800204c <PWMC_SetPhaseVoltage+0x94>
      if (wZ < 0)
 8002106:	f1b1 3fff 	cmp.w	r1, #4294967295
 800210a:	db75      	blt.n	80021f8 <PWMC_SetPhaseVoltage+0x240>
        if (wX <= 0)
 800210c:	f1bc 0f00 	cmp.w	ip, #0
 8002110:	dd4a      	ble.n	80021a8 <PWMC_SetPhaseVoltage+0x1f0>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002112:	ebbe 0e0c 	subs.w	lr, lr, ip
 8002116:	bf48      	it	mi
 8002118:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 800211c:	f04f 0202 	mov.w	r2, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002120:	bf48      	it	mi
 8002122:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002126:	2b00      	cmp	r3, #0
 8002128:	bfb8      	it	lt
 800212a:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 800212e:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002132:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8002136:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 800213a:	bfb8      	it	lt
 800213c:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8002140:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002144:	eb03 416c 	add.w	r1, r3, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 8002148:	f8a0 1046 	strh.w	r1, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 800214c:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002150:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 8002154:	e77a      	b.n	800204c <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 8002156:	ebbe 0e0c 	subs.w	lr, lr, ip
 800215a:	bf44      	itt	mi
 800215c:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002160:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002164:	2b00      	cmp	r3, #0
 8002166:	bfb8      	it	lt
 8002168:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 800216c:	f04f 0205 	mov.w	r2, #5
          wTimePhC = wTimePhA - (wY / 131072);
 8002170:	bfb8      	it	lt
 8002172:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 8002176:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
          wTimePhB = wTimePhC + (wX / 131072);
 800217a:	f1bc 0100 	subs.w	r1, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 800217e:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8002182:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002186:	bfb8      	it	lt
 8002188:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 800218c:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002190:	bfb8      	it	lt
 8002192:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8002196:	eb03 4161 	add.w	r1, r3, r1, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 800219a:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhC;
 800219e:	f8a0 3048 	strh.w	r3, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhB;
 80021a2:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
 80021a6:	e751      	b.n	800204c <PWMC_SetPhaseVoltage+0x94>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80021a8:	ebbc 0e02 	subs.w	lr, ip, r2
 80021ac:	bf44      	itt	mi
 80021ae:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80021b2:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 80021b6:	2900      	cmp	r1, #0
 80021b8:	bfb8      	it	lt
 80021ba:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 80021be:	f04f 0303 	mov.w	r3, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 80021c2:	bfb8      	it	lt
 80021c4:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 80021c8:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80021cc:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 80021ce:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80021d2:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80021d6:	bfb8      	it	lt
 80021d8:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 80021dc:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 80021e0:	bfb8      	it	lt
 80021e2:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 80021e6:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 80021ea:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
          pHandle->midDuty = (uint16_t)wTimePhB;
 80021ee:	f8a0 1048 	strh.w	r1, [r0, #72]	; 0x48
          pHandle->highDuty = (uint16_t)wTimePhA;
 80021f2:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
 80021f6:	e729      	b.n	800204c <PWMC_SetPhaseVoltage+0x94>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 80021f8:	ebbe 0e02 	subs.w	lr, lr, r2
 80021fc:	bf44      	itt	mi
 80021fe:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002202:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002206:	2900      	cmp	r1, #0
 8002208:	bfbc      	itt	lt
 800220a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 800220e:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002212:	2b00      	cmp	r3, #0
 8002214:	bfb8      	it	lt
 8002216:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800221a:	ea4f 0294 	mov.w	r2, r4, lsr #2
 800221e:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002222:	bfb8      	it	lt
 8002224:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 8002228:	f04f 0c04 	mov.w	ip, #4
        wTimePhB = wTimePhA + (wZ / 131072);
 800222c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002230:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_5;
 8002234:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a
        pHandle->lowDuty = (uint16_t)wTimePhC;
 8002238:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
        pHandle->midDuty = (uint16_t)wTimePhA;
 800223c:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
        pHandle->highDuty = (uint16_t)wTimePhB;
 8002240:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
 8002244:	e702      	b.n	800204c <PWMC_SetPhaseVoltage+0x94>
 8002246:	bf00      	nop

08002248 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002248:	6843      	ldr	r3, [r0, #4]
 800224a:	4718      	bx	r3

0800224c <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 800224c:	6883      	ldr	r3, [r0, #8]
 800224e:	4718      	bx	r3

08002250 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, **false** if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002250:	b510      	push	{r4, lr}
 8002252:	4604      	mov	r4, r0
 8002254:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002256:	b199      	cbz	r1, 8002280 <PWMC_CurrentReadingCalibr+0x30>
    {
      PWMC_SwitchOffPWM(pHandle);
      pHandle->pFctCurrReadingCalib(pHandle);
      retVal = true;
    }
    else if (CRC_EXEC == action)
 8002258:	2901      	cmp	r1, #1
 800225a:	d002      	beq.n	8002262 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 800225c:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 800225e:	b002      	add	sp, #8
 8002260:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002262:	f8b0 304e 	ldrh.w	r3, [r0, #78]	; 0x4e
 8002266:	b19b      	cbz	r3, 8002290 <PWMC_CurrentReadingCalibr+0x40>
        pHandle->OffCalibrWaitTimeCounter--;
 8002268:	3b01      	subs	r3, #1
 800226a:	b29b      	uxth	r3, r3
 800226c:	9101      	str	r1, [sp, #4]
 800226e:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1f2      	bne.n	800225c <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 8002276:	68c3      	ldr	r3, [r0, #12]
 8002278:	4798      	blx	r3
          retVal = true;
 800227a:	9901      	ldr	r1, [sp, #4]
 800227c:	4608      	mov	r0, r1
 800227e:	e7ee      	b.n	800225e <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002280:	f7ff ffe2 	bl	8002248 <PWMC_SwitchOffPWM>
      pHandle->pFctCurrReadingCalib(pHandle);
 8002284:	4620      	mov	r0, r4
 8002286:	68e3      	ldr	r3, [r4, #12]
 8002288:	4798      	blx	r3
      retVal = true;
 800228a:	2001      	movs	r0, #1
}
 800228c:	b002      	add	sp, #8
 800228e:	bd10      	pop	{r4, pc}
        retVal = true;
 8002290:	4608      	mov	r0, r1
}
 8002292:	b002      	add	sp, #8
 8002294:	bd10      	pop	{r4, pc}
 8002296:	bf00      	nop

08002298 <PWMC_TurnOnLowSides>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctTurnOnLowSides(pHandle, ticks);
 8002298:	6903      	ldr	r3, [r0, #16]
 800229a:	4718      	bx	r3

0800229c <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 800229c:	6983      	ldr	r3, [r0, #24]
 800229e:	4718      	bx	r3

080022a0 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80022a0:	4976      	ldr	r1, [pc, #472]	; (800247c <RCM_RegisterRegConv+0x1dc>)
{
 80022a2:	b570      	push	{r4, r5, r6, lr}
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80022a4:	680c      	ldr	r4, [r1, #0]
{
 80022a6:	4602      	mov	r2, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80022a8:	2c00      	cmp	r4, #0
 80022aa:	d02f      	beq.n	800230c <RCM_RegisterRegConv+0x6c>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80022ac:	f890 c004 	ldrb.w	ip, [r0, #4]
 80022b0:	7923      	ldrb	r3, [r4, #4]
 80022b2:	459c      	cmp	ip, r3
 80022b4:	d01d      	beq.n	80022f2 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80022b6:	684d      	ldr	r5, [r1, #4]
 80022b8:	2d00      	cmp	r5, #0
 80022ba:	f000 80c2 	beq.w	8002442 <RCM_RegisterRegConv+0x1a2>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80022be:	792b      	ldrb	r3, [r5, #4]
 80022c0:	4563      	cmp	r3, ip
  uint8_t handle = 255U;
 80022c2:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80022c6:	d02b      	beq.n	8002320 <RCM_RegisterRegConv+0x80>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80022c8:	688c      	ldr	r4, [r1, #8]
 80022ca:	2c00      	cmp	r4, #0
 80022cc:	f000 80a5 	beq.w	800241a <RCM_RegisterRegConv+0x17a>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80022d0:	7923      	ldrb	r3, [r4, #4]
 80022d2:	4563      	cmp	r3, ip
 80022d4:	d02a      	beq.n	800232c <RCM_RegisterRegConv+0x8c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80022d6:	68cc      	ldr	r4, [r1, #12]
 80022d8:	2c00      	cmp	r4, #0
 80022da:	f000 80a7 	beq.w	800242c <RCM_RegisterRegConv+0x18c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80022de:	7923      	ldrb	r3, [r4, #4]
 80022e0:	4563      	cmp	r3, ip
 80022e2:	f000 80a8 	beq.w	8002436 <RCM_RegisterRegConv+0x196>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 80022e6:	2803      	cmp	r0, #3
 80022e8:	bf88      	it	hi
 80022ea:	20ff      	movhi	r0, #255	; 0xff
 80022ec:	f240 80b7 	bls.w	800245e <RCM_RegisterRegConv+0x1be>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80022f2:	6803      	ldr	r3, [r0, #0]
 80022f4:	6820      	ldr	r0, [r4, #0]
 80022f6:	4283      	cmp	r3, r0
 80022f8:	d01e      	beq.n	8002338 <RCM_RegisterRegConv+0x98>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80022fa:	684d      	ldr	r5, [r1, #4]
 80022fc:	2d00      	cmp	r5, #0
 80022fe:	d1de      	bne.n	80022be <RCM_RegisterRegConv+0x1e>
 8002300:	688c      	ldr	r4, [r1, #8]
 8002302:	2c00      	cmp	r4, #0
 8002304:	f000 80b0 	beq.w	8002468 <RCM_RegisterRegConv+0x1c8>
      i++;
 8002308:	2001      	movs	r0, #1
 800230a:	e7e1      	b.n	80022d0 <RCM_RegisterRegConv+0x30>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800230c:	684d      	ldr	r5, [r1, #4]
 800230e:	2d00      	cmp	r5, #0
 8002310:	f000 80a3 	beq.w	800245a <RCM_RegisterRegConv+0x1ba>
 8002314:	f890 c004 	ldrb.w	ip, [r0, #4]
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002318:	792b      	ldrb	r3, [r5, #4]
 800231a:	4563      	cmp	r3, ip
    uint8_t i = 0;
 800231c:	4620      	mov	r0, r4
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800231e:	d1d3      	bne.n	80022c8 <RCM_RegisterRegConv+0x28>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002320:	682c      	ldr	r4, [r5, #0]
 8002322:	6813      	ldr	r3, [r2, #0]
 8002324:	429c      	cmp	r4, r3
 8002326:	d1cf      	bne.n	80022c8 <RCM_RegisterRegConv+0x28>
      i++;
 8002328:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV)
 800232a:	e006      	b.n	800233a <RCM_RegisterRegConv+0x9a>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800232c:	6824      	ldr	r4, [r4, #0]
 800232e:	6813      	ldr	r3, [r2, #0]
 8002330:	429c      	cmp	r4, r3
 8002332:	d1d0      	bne.n	80022d6 <RCM_RegisterRegConv+0x36>
      i++;
 8002334:	2002      	movs	r0, #2
 8002336:	e000      	b.n	800233a <RCM_RegisterRegConv+0x9a>
    uint8_t i = 0;
 8002338:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 800233a:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 800233e:	6899      	ldr	r1, [r3, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002340:	4c4f      	ldr	r4, [pc, #316]	; (8002480 <RCM_RegisterRegConv+0x1e0>)
 8002342:	2500      	movs	r5, #0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8002344:	07c9      	lsls	r1, r1, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8002346:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 800234a:	d41e      	bmi.n	800238a <RCM_RegisterRegConv+0xea>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 800234c:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800234e:	2404      	movs	r4, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8002350:	f021 0104 	bic.w	r1, r1, #4
 8002354:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 8002356:	601c      	str	r4, [r3, #0]
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_JEOC(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 8002358:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 800235a:	2420      	movs	r4, #32
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 800235c:	f021 0120 	bic.w	r1, r1, #32
 8002360:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 8002362:	601c      	str	r4, [r3, #0]
  MODIFY_REG(ADCx->CR,
 8002364:	6899      	ldr	r1, [r3, #8]
 8002366:	f021 4140 	bic.w	r1, r1, #3221225472	; 0xc0000000
 800236a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800236e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8002372:	6099      	str	r1, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8002374:	6899      	ldr	r1, [r3, #8]
        while (1U == LL_ADC_IsCalibrationOnGoing(regConv->regADC))
 8002376:	2900      	cmp	r1, #0
 8002378:	dbfc      	blt.n	8002374 <RCM_RegisterRegConv+0xd4>
  MODIFY_REG(ADCx->CR,
 800237a:	6899      	ldr	r1, [r3, #8]
 800237c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002380:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8002384:	f041 0101 	orr.w	r1, r1, #1
 8002388:	6099      	str	r1, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800238a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800238c:	f021 010f 	bic.w	r1, r1, #15
 8002390:	6319      	str	r1, [r3, #48]	; 0x30
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8002392:	7914      	ldrb	r4, [r2, #4]
 8002394:	2c09      	cmp	r4, #9
 8002396:	d830      	bhi.n	80023fa <RCM_RegisterRegConv+0x15a>
 8002398:	eb04 0544 	add.w	r5, r4, r4, lsl #1
 800239c:	06a1      	lsls	r1, r4, #26
 800239e:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 80023a2:	2502      	movs	r5, #2
 80023a4:	fa05 f404 	lsl.w	r4, r5, r4
 80023a8:	4321      	orrs	r1, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 80023aa:	f001 7e00 	and.w	lr, r1, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ae:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 80023b2:	fa94 f4a4 	rbit	r4, r4
 80023b6:	fab4 f484 	clz	r4, r4
 80023ba:	fa2e fe04 	lsr.w	lr, lr, r4
 80023be:	3314      	adds	r3, #20
  MODIFY_REG(*preg,
 80023c0:	f001 71f8 	and.w	r1, r1, #32505856	; 0x1f00000
 80023c4:	f853 402e 	ldr.w	r4, [r3, lr, lsl #2]
 80023c8:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 80023cc:	fa9c f5ac 	rbit	r5, ip
 80023d0:	fab5 f585 	clz	r5, r5
 80023d4:	fa9c fcac 	rbit	ip, ip
 80023d8:	6896      	ldr	r6, [r2, #8]
 80023da:	fabc fc8c 	clz	ip, ip
 80023de:	fa21 f205 	lsr.w	r2, r1, r5
 80023e2:	fa21 f10c 	lsr.w	r1, r1, ip
 80023e6:	fa06 f501 	lsl.w	r5, r6, r1
 80023ea:	2107      	movs	r1, #7
 80023ec:	4091      	lsls	r1, r2
 80023ee:	ea24 0101 	bic.w	r1, r4, r1
 80023f2:	4329      	orrs	r1, r5
 80023f4:	f843 102e 	str.w	r1, [r3, lr, lsl #2]
}
 80023f8:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 80023fa:	2103      	movs	r1, #3
 80023fc:	f06f 051d 	mvn.w	r5, #29
 8002400:	fb11 5504 	smlabb	r5, r1, r4, r5
 8002404:	2102      	movs	r1, #2
 8002406:	40a1      	lsls	r1, r4
 8002408:	ea41 5105 	orr.w	r1, r1, r5, lsl #20
 800240c:	ea41 6184 	orr.w	r1, r1, r4, lsl #26
 8002410:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 8002414:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
 8002418:	e7c9      	b.n	80023ae <RCM_RegisterRegConv+0x10e>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800241a:	2804      	cmp	r0, #4
 800241c:	d917      	bls.n	800244e <RCM_RegisterRegConv+0x1ae>
 800241e:	68cc      	ldr	r4, [r1, #12]
 8002420:	b114      	cbz	r4, 8002428 <RCM_RegisterRegConv+0x188>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002422:	7923      	ldrb	r3, [r4, #4]
 8002424:	459c      	cmp	ip, r3
 8002426:	d01c      	beq.n	8002462 <RCM_RegisterRegConv+0x1c2>
 8002428:	6813      	ldr	r3, [r2, #0]
 800242a:	e783      	b.n	8002334 <RCM_RegisterRegConv+0x94>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800242c:	2804      	cmp	r0, #4
 800242e:	6813      	ldr	r3, [r2, #0]
 8002430:	d983      	bls.n	800233a <RCM_RegisterRegConv+0x9a>
      i++;
 8002432:	2003      	movs	r0, #3
 8002434:	e781      	b.n	800233a <RCM_RegisterRegConv+0x9a>
 8002436:	6813      	ldr	r3, [r2, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8002438:	6824      	ldr	r4, [r4, #0]
 800243a:	429c      	cmp	r4, r3
 800243c:	f47f af53 	bne.w	80022e6 <RCM_RegisterRegConv+0x46>
 8002440:	e7f7      	b.n	8002432 <RCM_RegisterRegConv+0x192>
      i++;
 8002442:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002444:	688c      	ldr	r4, [r1, #8]
 8002446:	b11c      	cbz	r4, 8002450 <RCM_RegisterRegConv+0x1b0>
 8002448:	f892 c004 	ldrb.w	ip, [r2, #4]
 800244c:	e740      	b.n	80022d0 <RCM_RegisterRegConv+0x30>
 800244e:	4620      	mov	r0, r4
 8002450:	68cc      	ldr	r4, [r1, #12]
 8002452:	b124      	cbz	r4, 800245e <RCM_RegisterRegConv+0x1be>
 8002454:	f892 c004 	ldrb.w	ip, [r2, #4]
 8002458:	e741      	b.n	80022de <RCM_RegisterRegConv+0x3e>
    uint8_t i = 0;
 800245a:	4628      	mov	r0, r5
 800245c:	e7f2      	b.n	8002444 <RCM_RegisterRegConv+0x1a4>
 800245e:	6813      	ldr	r3, [r2, #0]
 8002460:	e76b      	b.n	800233a <RCM_RegisterRegConv+0x9a>
 8002462:	6813      	ldr	r3, [r2, #0]
      i++;
 8002464:	2002      	movs	r0, #2
 8002466:	e7e7      	b.n	8002438 <RCM_RegisterRegConv+0x198>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8002468:	68cc      	ldr	r4, [r1, #12]
 800246a:	2c00      	cmp	r4, #0
 800246c:	f43f af5c 	beq.w	8002328 <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8002470:	7920      	ldrb	r0, [r4, #4]
 8002472:	4560      	cmp	r0, ip
 8002474:	f47f af58 	bne.w	8002328 <RCM_RegisterRegConv+0x88>
      i++;
 8002478:	2001      	movs	r0, #1
 800247a:	e7dd      	b.n	8002438 <RCM_RegisterRegConv+0x198>
 800247c:	200007bc 	.word	0x200007bc
 8002480:	20000798 	.word	0x20000798

08002484 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8002484:	4b1c      	ldr	r3, [pc, #112]	; (80024f8 <RCM_ExecRegularConv+0x74>)
 8002486:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800248a:	7919      	ldrb	r1, [r3, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	2909      	cmp	r1, #9
 8002490:	d823      	bhi.n	80024da <RCM_ExecRegularConv+0x56>
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8002492:	eb01 0c41 	add.w	ip, r1, r1, lsl #1
 8002496:	068b      	lsls	r3, r1, #26
 8002498:	2002      	movs	r0, #2
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 800249a:	ea43 530c 	orr.w	r3, r3, ip, lsl #20
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800249e:	fa00 f101 	lsl.w	r1, r0, r1
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80024a2:	430b      	orrs	r3, r1
 80024a4:	f44f 7140 	mov.w	r1, #768	; 0x300
 80024a8:	fa91 f1a1 	rbit	r1, r1
  MODIFY_REG(*preg,
 80024ac:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80024ae:	0d1b      	lsrs	r3, r3, #20
 80024b0:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80024b4:	f421 61f8 	bic.w	r1, r1, #1984	; 0x7c0
 80024b8:	430b      	orrs	r3, r1
 80024ba:	6313      	str	r3, [r2, #48]	; 0x30
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80024bc:	6c13      	ldr	r3, [r2, #64]	; 0x40
  MODIFY_REG(ADCx->CR,
 80024be:	6893      	ldr	r3, [r2, #8]
 80024c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024c8:	f043 0304 	orr.w	r3, r3, #4
 80024cc:	6093      	str	r3, [r2, #8]
  return (READ_BIT(ADCx->ISR, ADC_ISR_EOC) == (ADC_ISR_EOC));
 80024ce:	6813      	ldr	r3, [r2, #0]

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

    LL_ADC_REG_StartConversion(RCM_handle_array[handle]->regADC);
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOC(RCM_handle_array[handle]->regADC) == 0u) {}
 80024d0:	075b      	lsls	r3, r3, #29
 80024d2:	d5fc      	bpl.n	80024ce <RCM_ExecRegularConv+0x4a>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_RDATA));
 80024d4:	6c10      	ldr	r0, [r2, #64]	; 0x40
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return retVal;
}
 80024d6:	b280      	uxth	r0, r0
 80024d8:	4770      	bx	lr
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80024da:	2003      	movs	r0, #3
 80024dc:	f06f 0c1d 	mvn.w	ip, #29
 80024e0:	2302      	movs	r3, #2
 80024e2:	fb10 c001 	smlabb	r0, r0, r1, ip
 80024e6:	408b      	lsls	r3, r1
 80024e8:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
 80024ec:	ea43 6381 	orr.w	r3, r3, r1, lsl #26
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80024f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024f4:	e7d6      	b.n	80024a4 <RCM_ExecRegularConv+0x20>
 80024f6:	bf00      	nop
 80024f8:	200007bc 	.word	0x200007bc

080024fc <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 80024fc:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 80024fe:	4c0f      	ldr	r4, [pc, #60]	; (800253c <RCM_ExecUserConv+0x40>)
 8002500:	7823      	ldrb	r3, [r4, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d000      	beq.n	8002508 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 8002506:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002508:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <RCM_ExecUserConv+0x44>)
 800250a:	781d      	ldrb	r5, [r3, #0]
 800250c:	4628      	mov	r0, r5
 800250e:	f7ff ffb9 	bl	8002484 <RCM_ExecRegularConv>
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8002512:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8002514:	4a0c      	ldr	r2, [pc, #48]	; (8002548 <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8002516:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800251a:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 800251c:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800251e:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8002520:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8002522:	2e00      	cmp	r6, #0
 8002524:	d0ef      	beq.n	8002506 <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002526:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800252a:	4628      	mov	r0, r5
 800252c:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 800252e:	2300      	movs	r3, #0
 8002530:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002532:	4633      	mov	r3, r6
}
 8002534:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8002538:	4718      	bx	r3
 800253a:	bf00      	nop
 800253c:	200007b9 	.word	0x200007b9
 8002540:	200007b8 	.word	0x200007b8
 8002544:	20000798 	.word	0x20000798
 8002548:	200007ba 	.word	0x200007ba

0800254c <ADC1_IRQHandler>:
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 800254c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002550:	2240      	movs	r2, #64	; 0x40
 8002552:	601a      	str	r2, [r3, #0]

  // Clear Flags M1
  LL_ADC_ClearFlag_JEOS( ADC1 );

  // Highfrequency task
  TSK_HighFrequencyTask();
 8002554:	f7ff bb66 	b.w	8001c24 <TSK_HighFrequencyTask>

08002558 <TIM1_UP_TIM16_IRQHandler>:
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002558:	4b03      	ldr	r3, [pc, #12]	; (8002568 <TIM1_UP_TIM16_IRQHandler+0x10>)
 /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

 /* USER CODE END  TIMx_UP_M1_IRQn 0 */

    LL_TIM_ClearFlag_UPDATE(TIM1);
    R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 800255a:	4804      	ldr	r0, [pc, #16]	; (800256c <TIM1_UP_TIM16_IRQHandler+0x14>)
 800255c:	f06f 0201 	mvn.w	r2, #1
 8002560:	611a      	str	r2, [r3, #16]
 8002562:	f004 b90b 	b.w	800677c <R3_1_TIMx_UP_IRQHandler>
 8002566:	bf00      	nop
 8002568:	40012c00 	.word	0x40012c00
 800256c:	20000174 	.word	0x20000174

08002570 <TIM1_BRK_TIM15_IRQHandler>:

 /* USER CODE END  TIMx_UP_M1_IRQn 1 */
}

void TIMx_BRK_M1_IRQHandler(void)
{
 8002570:	b508      	push	{r3, lr}
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8002572:	4b0c      	ldr	r3, [pc, #48]	; (80025a4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002574:	691a      	ldr	r2, [r3, #16]
 8002576:	0611      	lsls	r1, r2, #24
 8002578:	d505      	bpl.n	8002586 <TIM1_BRK_TIM15_IRQHandler+0x16>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 800257a:	f06f 0280 	mvn.w	r2, #128	; 0x80

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(TIM1))
  {
    LL_TIM_ClearFlag_BRK(TIM1);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 800257e:	480a      	ldr	r0, [pc, #40]	; (80025a8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002580:	611a      	str	r2, [r3, #16]
 8002582:	f004 f937 	bl	80067f4 <R3_1_BRK_IRQHandler>
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK2(const TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 8002586:	4b07      	ldr	r3, [pc, #28]	; (80025a4 <TIM1_BRK_TIM15_IRQHandler+0x34>)
 8002588:	691a      	ldr	r2, [r3, #16]
 800258a:	05d2      	lsls	r2, r2, #23
 800258c:	d505      	bpl.n	800259a <TIM1_BRK_TIM15_IRQHandler+0x2a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 800258e:	f46f 7280 	mvn.w	r2, #256	; 0x100
  }
  if (LL_TIM_IsActiveFlag_BRK2(TIM1))
  {
    LL_TIM_ClearFlag_BRK2(TIM1);
    R3_1_BRK2_IRQHandler(&PWM_Handle_M1);
 8002592:	4805      	ldr	r0, [pc, #20]	; (80025a8 <TIM1_BRK_TIM15_IRQHandler+0x38>)
 8002594:	611a      	str	r2, [r3, #16]
 8002596:	f004 f90d 	bl	80067b4 <R3_1_BRK2_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 800259a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 800259e:	f7ff bb15 	b.w	8001bcc <MC_Scheduler>
 80025a2:	bf00      	nop
 80025a4:	40012c00 	.word	0x40012c00
 80025a8:	20000174 	.word	0x20000174

080025ac <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 80025ac:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 80025ae:	f7ff fc5d 	bl	8001e6c <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 80025b2:	e7fe      	b.n	80025b2 <HardFault_Handler+0x6>

080025b4 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 80025b4:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 80025b6:	4c0a      	ldr	r4, [pc, #40]	; (80025e0 <SysTick_Handler+0x2c>)
 80025b8:	7823      	ldrb	r3, [r4, #0]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d006      	beq.n	80025cc <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 80025be:	3301      	adds	r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 80025c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80025c8:	f7ff bc44 	b.w	8001e54 <MC_RunMotorControlTasks>
    HAL_IncTick();
 80025cc:	f000 f9f6 	bl	80029bc <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 80025d0:	f000 ff4c 	bl	800346c <HAL_SYSTICK_IRQHandler>
 80025d4:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 80025d6:	7023      	strb	r3, [r4, #0]
}
 80025d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 80025dc:	f7ff bc3a 	b.w	8001e54 <MC_RunMotorControlTasks>
 80025e0:	20000474 	.word	0x20000474

080025e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <HAL_MspInit+0x30>)
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	f042 0201 	orr.w	r2, r2, #1
 80025ec:	619a      	str	r2, [r3, #24]
 80025ee:	699a      	ldr	r2, [r3, #24]
{
 80025f0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f2:	f002 0201 	and.w	r2, r2, #1
 80025f6:	9200      	str	r2, [sp, #0]
 80025f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025fa:	69da      	ldr	r2, [r3, #28]
 80025fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002600:	61da      	str	r2, [r3, #28]
 8002602:	69db      	ldr	r3, [r3, #28]
 8002604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 800260c:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800260e:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8002610:	f000 beb2 	b.w	8003378 <HAL_NVIC_SetPriorityGrouping>
 8002614:	40021000 	.word	0x40021000

08002618 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002618:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 800261a:	6803      	ldr	r3, [r0, #0]
{
 800261c:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800261e:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8002620:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002624:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8002628:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800262c:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 800262e:	d001      	beq.n	8002634 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002630:	b00a      	add	sp, #40	; 0x28
 8002632:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002634:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8002638:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800263c:	a904      	add	r1, sp, #16
    __HAL_RCC_ADC1_CLK_ENABLE();
 800263e:	695a      	ldr	r2, [r3, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002640:	4816      	ldr	r0, [pc, #88]	; (800269c <HAL_ADC_MspInit+0x84>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002642:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002646:	615a      	str	r2, [r3, #20]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800264e:	9201      	str	r2, [sp, #4]
 8002650:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002652:	695a      	ldr	r2, [r3, #20]
 8002654:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002658:	615a      	str	r2, [r3, #20]
 800265a:	695a      	ldr	r2, [r3, #20]
 800265c:	f402 2200 	and.w	r2, r2, #524288	; 0x80000
 8002660:	9202      	str	r2, [sp, #8]
 8002662:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002664:	695a      	ldr	r2, [r3, #20]
 8002666:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800266a:	615a      	str	r2, [r3, #20]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8002674:	2207      	movs	r2, #7
 8002676:	2303      	movs	r3, #3
 8002678:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800267c:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800267e:	f000 fef9 	bl	8003474 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8002682:	2203      	movs	r2, #3
 8002684:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002686:	a904      	add	r1, sp, #16
 8002688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 800268c:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002692:	f000 feef 	bl	8003474 <HAL_GPIO_Init>
}
 8002696:	b00a      	add	sp, #40	; 0x28
 8002698:	bd10      	pop	{r4, pc}
 800269a:	bf00      	nop
 800269c:	48000800 	.word	0x48000800

080026a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 80026a2:	4a1c      	ldr	r2, [pc, #112]	; (8002714 <HAL_I2C_MspInit+0x74>)
 80026a4:	6801      	ldr	r1, [r0, #0]
{
 80026a6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	2300      	movs	r3, #0
  if(hi2c->Instance==I2C1)
 80026aa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026ac:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80026b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80026b4:	9306      	str	r3, [sp, #24]
  if(hi2c->Instance==I2C1)
 80026b6:	d001      	beq.n	80026bc <HAL_I2C_MspInit+0x1c>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80026b8:	b008      	add	sp, #32
 80026ba:	bd10      	pop	{r4, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026bc:	4c16      	ldr	r4, [pc, #88]	; (8002718 <HAL_I2C_MspInit+0x78>)
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026be:	4817      	ldr	r0, [pc, #92]	; (800271c <HAL_I2C_MspInit+0x7c>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026c0:	6963      	ldr	r3, [r4, #20]
 80026c2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c6:	6163      	str	r3, [r4, #20]
 80026c8:	6963      	ldr	r3, [r4, #20]
 80026ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80026ce:	9300      	str	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80026d0:	f44f 72c0 	mov.w	r2, #384	; 0x180
 80026d4:	2312      	movs	r3, #18
 80026d6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80026da:	2201      	movs	r2, #1
 80026dc:	2303      	movs	r3, #3
 80026de:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026e2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80026e4:	2304      	movs	r3, #4
 80026e6:	9306      	str	r3, [sp, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e8:	9a00      	ldr	r2, [sp, #0]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80026ea:	f000 fec3 	bl	8003474 <HAL_GPIO_Init>
    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB7_FMP);
 80026ee:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80026f2:	f001 fc55 	bl	8003fa0 <HAL_I2CEx_EnableFastModePlus>
    HAL_I2CEx_EnableFastModePlus(SYSCFG_CFGR1_I2C_PB8_FMP);
 80026f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80026fa:	f001 fc51 	bl	8003fa0 <HAL_I2CEx_EnableFastModePlus>
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026fe:	69e3      	ldr	r3, [r4, #28]
 8002700:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002704:	61e3      	str	r3, [r4, #28]
 8002706:	69e3      	ldr	r3, [r4, #28]
 8002708:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800270c:	9301      	str	r3, [sp, #4]
 800270e:	9b01      	ldr	r3, [sp, #4]
}
 8002710:	b008      	add	sp, #32
 8002712:	bd10      	pop	{r4, pc}
 8002714:	40005400 	.word	0x40005400
 8002718:	40021000 	.word	0x40021000
 800271c:	48000400 	.word	0x48000400

08002720 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002720:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8002722:	4a1b      	ldr	r2, [pc, #108]	; (8002790 <HAL_TIM_Base_MspInit+0x70>)
 8002724:	6801      	ldr	r1, [r0, #0]
{
 8002726:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002728:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 800272a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800272c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8002730:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002734:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 8002736:	d001      	beq.n	800273c <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002738:	b008      	add	sp, #32
 800273a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800273c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002740:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002744:	ed9f 7b10 	vldr	d7, [pc, #64]	; 8002788 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002748:	699a      	ldr	r2, [r3, #24]
 800274a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800274e:	619a      	str	r2, [r3, #24]
 8002750:	699a      	ldr	r2, [r3, #24]
 8002752:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002756:	9200      	str	r2, [sp, #0]
 8002758:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800275a:	695a      	ldr	r2, [r3, #20]
 800275c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002760:	615a      	str	r2, [r3, #20]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002768:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800276a:	2201      	movs	r2, #1
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800276c:	2306      	movs	r3, #6
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800276e:	a902      	add	r1, sp, #8
 8002770:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8002774:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002778:	9c01      	ldr	r4, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800277a:	9204      	str	r2, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800277c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 800277e:	f000 fe79 	bl	8003474 <HAL_GPIO_Init>
}
 8002782:	b008      	add	sp, #32
 8002784:	bd10      	pop	{r4, pc}
 8002786:	bf00      	nop
 8002788:	00000040 	.word	0x00000040
 800278c:	00000002 	.word	0x00000002
 8002790:	40012c00 	.word	0x40012c00
 8002794:	00000000 	.word	0x00000000

08002798 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002798:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 800279a:	4a1b      	ldr	r2, [pc, #108]	; (8002808 <HAL_TIM_MspPostInit+0x70>)
 800279c:	6801      	ldr	r1, [r0, #0]
{
 800279e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a0:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80027a2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80027a8:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80027ac:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 80027ae:	d002      	beq.n	80027b6 <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80027b0:	b009      	add	sp, #36	; 0x24
 80027b2:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027b6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80027ba:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80027be:	ed9f 7b0e 	vldr	d7, [pc, #56]	; 80027f8 <HAL_TIM_MspPostInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027c2:	695a      	ldr	r2, [r3, #20]
 80027c4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80027c8:	615a      	str	r2, [r3, #20]
 80027ca:	695b      	ldr	r3, [r3, #20]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80027cc:	ed8d 7b02 	vstr	d7, [sp, #8]
 80027d0:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8002800 <HAL_TIM_MspPostInit+0x68>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d8:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027da:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80027dc:	2306      	movs	r3, #6
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 80027e2:	ed8d 7b04 	vstr	d7, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80027e8:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027ea:	f000 fe43 	bl	8003474 <HAL_GPIO_Init>
}
 80027ee:	b009      	add	sp, #36	; 0x24
 80027f0:	f85d fb04 	ldr.w	pc, [sp], #4
 80027f4:	f3af 8000 	nop.w
 80027f8:	00000700 	.word	0x00000700
 80027fc:	00000002 	.word	0x00000002
 8002800:	00000002 	.word	0x00000002
 8002804:	00000003 	.word	0x00000003
 8002808:	40012c00 	.word	0x40012c00
 800280c:	00000000 	.word	0x00000000

08002810 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002810:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8002812:	6802      	ldr	r2, [r0, #0]
 8002814:	4944      	ldr	r1, [pc, #272]	; (8002928 <HAL_UART_MspInit+0x118>)
{
 8002816:	b08c      	sub	sp, #48	; 0x30
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002818:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 800281a:	428a      	cmp	r2, r1
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800281c:	e9cd 3306 	strd	r3, r3, [sp, #24]
 8002820:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8002824:	930a      	str	r3, [sp, #40]	; 0x28
  if(huart->Instance==USART1)
 8002826:	d007      	beq.n	8002838 <HAL_UART_MspInit+0x28>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
  else if(huart->Instance==USART2)
 8002828:	4b40      	ldr	r3, [pc, #256]	; (800292c <HAL_UART_MspInit+0x11c>)
 800282a:	429a      	cmp	r2, r3
 800282c:	d028      	beq.n	8002880 <HAL_UART_MspInit+0x70>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
  else if(huart->Instance==USART3)
 800282e:	4b40      	ldr	r3, [pc, #256]	; (8002930 <HAL_UART_MspInit+0x120>)
 8002830:	429a      	cmp	r2, r3
 8002832:	d048      	beq.n	80028c6 <HAL_UART_MspInit+0xb6>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002834:	b00c      	add	sp, #48	; 0x30
 8002836:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8002838:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800283c:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002840:	ed9f 7b33 	vldr	d7, [pc, #204]	; 8002910 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002844:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002846:	483b      	ldr	r0, [pc, #236]	; (8002934 <HAL_UART_MspInit+0x124>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8002848:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800284c:	619a      	str	r2, [r3, #24]
 800284e:	699a      	ldr	r2, [r3, #24]
 8002850:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8002854:	9200      	str	r2, [sp, #0]
 8002856:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002858:	695a      	ldr	r2, [r3, #20]
 800285a:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800285e:	615a      	str	r2, [r3, #20]
 8002860:	695b      	ldr	r3, [r3, #20]
 8002862:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002866:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002868:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800286a:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800286c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800286e:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002872:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002876:	9c01      	ldr	r4, [sp, #4]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002878:	f000 fdfc 	bl	8003474 <HAL_GPIO_Init>
}
 800287c:	b00c      	add	sp, #48	; 0x30
 800287e:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8002880:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002884:	ed9f 7b24 	vldr	d7, [pc, #144]	; 8002918 <HAL_UART_MspInit+0x108>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002888:	69da      	ldr	r2, [r3, #28]
 800288a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800288e:	61da      	str	r2, [r3, #28]
 8002890:	69da      	ldr	r2, [r3, #28]
 8002892:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8002896:	9202      	str	r2, [sp, #8]
 8002898:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800289a:	695a      	ldr	r2, [r3, #20]
 800289c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80028a0:	615a      	str	r2, [r3, #20]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028aa:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028ac:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ae:	a906      	add	r1, sp, #24
 80028b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80028b4:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028b8:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028bc:	9c03      	ldr	r4, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028be:	f000 fdd9 	bl	8003474 <HAL_GPIO_Init>
}
 80028c2:	b00c      	add	sp, #48	; 0x30
 80028c4:	bd10      	pop	{r4, pc}
    __HAL_RCC_USART3_CLK_ENABLE();
 80028c6:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028ca:	ed9f 7b15 	vldr	d7, [pc, #84]	; 8002920 <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART3_CLK_ENABLE();
 80028ce:	69da      	ldr	r2, [r3, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028d0:	4819      	ldr	r0, [pc, #100]	; (8002938 <HAL_UART_MspInit+0x128>)
    __HAL_RCC_USART3_CLK_ENABLE();
 80028d2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028d6:	61da      	str	r2, [r3, #28]
 80028d8:	69da      	ldr	r2, [r3, #28]
 80028da:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
 80028de:	9204      	str	r2, [sp, #16]
 80028e0:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80028e8:	615a      	str	r2, [r3, #20]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80028f2:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028f4:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f6:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028f8:	ed8d 7b06 	vstr	d7, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028fc:	e9cd 2309 	strd	r2, r3, [sp, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002900:	9c05      	ldr	r4, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002902:	f000 fdb7 	bl	8003474 <HAL_GPIO_Init>
}
 8002906:	b00c      	add	sp, #48	; 0x30
 8002908:	bd10      	pop	{r4, pc}
 800290a:	bf00      	nop
 800290c:	f3af 8000 	nop.w
 8002910:	00000030 	.word	0x00000030
 8002914:	00000002 	.word	0x00000002
 8002918:	0000000c 	.word	0x0000000c
 800291c:	00000002 	.word	0x00000002
 8002920:	00000c00 	.word	0x00000c00
 8002924:	00000002 	.word	0x00000002
 8002928:	40013800 	.word	0x40013800
 800292c:	40004400 	.word	0x40004400
 8002930:	40004800 	.word	0x40004800
 8002934:	48000800 	.word	0x48000800
 8002938:	48000400 	.word	0x48000400

0800293c <SystemInit>:
  */
void SystemInit(void)
{
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800293c:	4a03      	ldr	r2, [pc, #12]	; (800294c <SystemInit+0x10>)
 800293e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8002942:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002946:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800294a:	4770      	bx	lr
 800294c:	e000ed00 	.word	0xe000ed00

08002950 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002950:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002952:	4a0e      	ldr	r2, [pc, #56]	; (800298c <HAL_InitTick+0x3c>)
 8002954:	4b0e      	ldr	r3, [pc, #56]	; (8002990 <HAL_InitTick+0x40>)
 8002956:	7812      	ldrb	r2, [r2, #0]
 8002958:	681b      	ldr	r3, [r3, #0]
{
 800295a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800295c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002960:	fbb0 f0f2 	udiv	r0, r0, r2
 8002964:	fbb3 f0f0 	udiv	r0, r3, r0
 8002968:	f000 fd64 	bl	8003434 <HAL_SYSTICK_Config>
 800296c:	b908      	cbnz	r0, 8002972 <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800296e:	2d0f      	cmp	r5, #15
 8002970:	d901      	bls.n	8002976 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8002972:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8002974:	bd38      	pop	{r3, r4, r5, pc}
 8002976:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002978:	4602      	mov	r2, r0
 800297a:	4629      	mov	r1, r5
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f000 fd0c 	bl	800339c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002984:	4b03      	ldr	r3, [pc, #12]	; (8002994 <HAL_InitTick+0x44>)
 8002986:	4620      	mov	r0, r4
 8002988:	601d      	str	r5, [r3, #0]
}
 800298a:	bd38      	pop	{r3, r4, r5, pc}
 800298c:	2000047c 	.word	0x2000047c
 8002990:	20000478 	.word	0x20000478
 8002994:	20000480 	.word	0x20000480

08002998 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002998:	4a07      	ldr	r2, [pc, #28]	; (80029b8 <HAL_Init+0x20>)
{
 800299a:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800299c:	6813      	ldr	r3, [r2, #0]
 800299e:	f043 0310 	orr.w	r3, r3, #16
 80029a2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a4:	2003      	movs	r0, #3
 80029a6:	f000 fce7 	bl	8003378 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80029aa:	2004      	movs	r0, #4
 80029ac:	f7ff ffd0 	bl	8002950 <HAL_InitTick>
  HAL_MspInit();
 80029b0:	f7ff fe18 	bl	80025e4 <HAL_MspInit>
}
 80029b4:	2000      	movs	r0, #0
 80029b6:	bd08      	pop	{r3, pc}
 80029b8:	40022000 	.word	0x40022000

080029bc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80029bc:	4a03      	ldr	r2, [pc, #12]	; (80029cc <HAL_IncTick+0x10>)
 80029be:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <HAL_IncTick+0x14>)
 80029c0:	6811      	ldr	r1, [r2, #0]
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	440b      	add	r3, r1
 80029c6:	6013      	str	r3, [r2, #0]
}
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	200007cc 	.word	0x200007cc
 80029d0:	2000047c 	.word	0x2000047c

080029d4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80029d4:	4b01      	ldr	r3, [pc, #4]	; (80029dc <HAL_GetTick+0x8>)
 80029d6:	6818      	ldr	r0, [r3, #0]
}
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	200007cc 	.word	0x200007cc

080029e0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e0:	b538      	push	{r3, r4, r5, lr}
 80029e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80029e4:	f7ff fff6 	bl	80029d4 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e8:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80029ea:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80029ec:	d002      	beq.n	80029f4 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ee:	4b04      	ldr	r3, [pc, #16]	; (8002a00 <HAL_Delay+0x20>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	441c      	add	r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80029f4:	f7ff ffee 	bl	80029d4 <HAL_GetTick>
 80029f8:	1b43      	subs	r3, r0, r5
 80029fa:	42a3      	cmp	r3, r4
 80029fc:	d3fa      	bcc.n	80029f4 <HAL_Delay+0x14>
  {
  }
}
 80029fe:	bd38      	pop	{r3, r4, r5, pc}
 8002a00:	2000047c 	.word	0x2000047c

08002a04 <ADC_Disable>:
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002a04:	6802      	ldr	r2, [r0, #0]
{
 8002a06:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002a08:	6893      	ldr	r3, [r2, #8]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d001      	beq.n	8002a16 <ADC_Disable+0x12>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a12:	2000      	movs	r0, #0
}
 8002a14:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002a16:	6811      	ldr	r1, [r2, #0]
 8002a18:	07cc      	lsls	r4, r1, #31
 8002a1a:	d5fa      	bpl.n	8002a12 <ADC_Disable+0xe>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002a1c:	6891      	ldr	r1, [r2, #8]
 8002a1e:	f001 010d 	and.w	r1, r1, #13
 8002a22:	2901      	cmp	r1, #1
 8002a24:	4604      	mov	r4, r0
 8002a26:	d009      	beq.n	8002a3c <ADC_Disable+0x38>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a28:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8002a2a:	f042 0210 	orr.w	r2, r2, #16
 8002a2e:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002a30:	4618      	mov	r0, r3
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a32:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002a34:	f043 0301 	orr.w	r3, r3, #1
 8002a38:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002a3a:	bd38      	pop	{r3, r4, r5, pc}
      __HAL_ADC_DISABLE(hadc);
 8002a3c:	6893      	ldr	r3, [r2, #8]
 8002a3e:	2103      	movs	r1, #3
 8002a40:	f043 0302 	orr.w	r3, r3, #2
 8002a44:	6093      	str	r3, [r2, #8]
 8002a46:	6011      	str	r1, [r2, #0]
    tickstart = HAL_GetTick();
 8002a48:	f7ff ffc4 	bl	80029d4 <HAL_GetTick>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a4c:	6823      	ldr	r3, [r4, #0]
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	07d9      	lsls	r1, r3, #31
    tickstart = HAL_GetTick();
 8002a52:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a54:	d403      	bmi.n	8002a5e <ADC_Disable+0x5a>
 8002a56:	e7dc      	b.n	8002a12 <ADC_Disable+0xe>
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	07db      	lsls	r3, r3, #31
 8002a5c:	d5d9      	bpl.n	8002a12 <ADC_Disable+0xe>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a5e:	f7ff ffb9 	bl	80029d4 <HAL_GetTick>
 8002a62:	1b40      	subs	r0, r0, r5
 8002a64:	2802      	cmp	r0, #2
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a66:	6823      	ldr	r3, [r4, #0]
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a68:	d9f6      	bls.n	8002a58 <ADC_Disable+0x54>
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	07d2      	lsls	r2, r2, #31
 8002a6e:	d5f3      	bpl.n	8002a58 <ADC_Disable+0x54>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a72:	f043 0310 	orr.w	r3, r3, #16
 8002a76:	6423      	str	r3, [r4, #64]	; 0x40
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a78:	6c63      	ldr	r3, [r4, #68]	; 0x44
          return HAL_ERROR;
 8002a7a:	2001      	movs	r0, #1
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a7c:	4303      	orrs	r3, r0
 8002a7e:	6463      	str	r3, [r4, #68]	; 0x44
}
 8002a80:	bd38      	pop	{r3, r4, r5, pc}
 8002a82:	bf00      	nop

08002a84 <HAL_ADC_Init>:
{
 8002a84:	b530      	push	{r4, r5, lr}
 8002a86:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002a88:	2300      	movs	r3, #0
 8002a8a:	9301      	str	r3, [sp, #4]
  if(hadc == NULL)
 8002a8c:	2800      	cmp	r0, #0
 8002a8e:	f000 8083 	beq.w	8002b98 <HAL_ADC_Init+0x114>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a92:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002a94:	f013 0310 	ands.w	r3, r3, #16
 8002a98:	4604      	mov	r4, r0
 8002a9a:	d116      	bne.n	8002aca <HAL_ADC_Init+0x46>
    if (hadc->State == HAL_ADC_STATE_RESET)
 8002a9c:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8002a9e:	2d00      	cmp	r5, #0
 8002aa0:	d07d      	beq.n	8002b9e <HAL_ADC_Init+0x11a>
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002aa2:	6822      	ldr	r2, [r4, #0]
 8002aa4:	6891      	ldr	r1, [r2, #8]
 8002aa6:	00cd      	lsls	r5, r1, #3
 8002aa8:	d56a      	bpl.n	8002b80 <HAL_ADC_Init+0xfc>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8002aaa:	6891      	ldr	r1, [r2, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8002aac:	0088      	lsls	r0, r1, #2
 8002aae:	d467      	bmi.n	8002b80 <HAL_ADC_Init+0xfc>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ab0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002ab2:	06c9      	lsls	r1, r1, #27
 8002ab4:	d400      	bmi.n	8002ab8 <HAL_ADC_Init+0x34>
 8002ab6:	b163      	cbz	r3, 8002ad2 <HAL_ADC_Init+0x4e>
    ADC_STATE_CLR_SET(hadc->State,
 8002ab8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002aba:	f023 0312 	bic.w	r3, r3, #18
    tmp_hal_status = HAL_ERROR; 
 8002abe:	2001      	movs	r0, #1
    ADC_STATE_CLR_SET(hadc->State,
 8002ac0:	f043 0310 	orr.w	r3, r3, #16
 8002ac4:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002ac6:	b003      	add	sp, #12
 8002ac8:	bd30      	pop	{r4, r5, pc}
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002aca:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002acc:	06d8      	lsls	r0, r3, #27
 8002ace:	d4f3      	bmi.n	8002ab8 <HAL_ADC_Init+0x34>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002ad0:	6822      	ldr	r2, [r4, #0]
 8002ad2:	6890      	ldr	r0, [r2, #8]
      (tmp_hal_status == HAL_OK)                                &&
 8002ad4:	f010 0004 	ands.w	r0, r0, #4
 8002ad8:	d1ee      	bne.n	8002ab8 <HAL_ADC_Init+0x34>
    ADC_STATE_CLR_SET(hadc->State,
 8002ada:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002adc:	f421 7181 	bic.w	r1, r1, #258	; 0x102
 8002ae0:	f041 0102 	orr.w	r1, r1, #2
 8002ae4:	6421      	str	r1, [r4, #64]	; 0x40
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002ae6:	6893      	ldr	r3, [r2, #8]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	f000 80a4 	beq.w	8002c3a <HAL_ADC_Init+0x1b6>
      MODIFY_REG(tmpADC_Common->CCR       ,
 8002af2:	495a      	ldr	r1, [pc, #360]	; (8002c5c <HAL_ADC_Init+0x1d8>)
 8002af4:	6865      	ldr	r5, [r4, #4]
 8002af6:	688b      	ldr	r3, [r1, #8]
 8002af8:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002afc:	432b      	orrs	r3, r5
 8002afe:	608b      	str	r3, [r1, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b00:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b02:	68e1      	ldr	r1, [r4, #12]
 8002b04:	7e65      	ldrb	r5, [r4, #25]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	68a3      	ldr	r3, [r4, #8]
 8002b0a:	ea43 0301 	orr.w	r3, r3, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b0e:	f894 1020 	ldrb.w	r1, [r4, #32]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b12:	bf18      	it	ne
 8002b14:	f44f 5080 	movne.w	r0, #4096	; 0x1000
 8002b18:	ea43 3345 	orr.w	r3, r3, r5, lsl #13
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b1c:	2901      	cmp	r1, #1
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8002b1e:	ea43 0300 	orr.w	r3, r3, r0
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002b22:	f000 8082 	beq.w	8002c2a <HAL_ADC_Init+0x1a6>
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8002b28:	2901      	cmp	r1, #1
 8002b2a:	d002      	beq.n	8002b32 <HAL_ADC_Init+0xae>
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002b2c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8002b2e:	4301      	orrs	r1, r0
 8002b30:	430b      	orrs	r3, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002b32:	6891      	ldr	r1, [r2, #8]
 8002b34:	f011 0f0c 	tst.w	r1, #12
 8002b38:	d10c      	bne.n	8002b54 <HAL_ADC_Init+0xd0>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002b3a:	68d1      	ldr	r1, [r2, #12]
 8002b3c:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8002b40:	f021 0102 	bic.w	r1, r1, #2
 8002b44:	60d1      	str	r1, [r2, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002b46:	f894 1030 	ldrb.w	r1, [r4, #48]	; 0x30
 8002b4a:	7e20      	ldrb	r0, [r4, #24]
 8002b4c:	0049      	lsls	r1, r1, #1
 8002b4e:	ea41 3180 	orr.w	r1, r1, r0, lsl #14
 8002b52:	430b      	orrs	r3, r1
    MODIFY_REG(hadc->Instance->CFGR,
 8002b54:	68d0      	ldr	r0, [r2, #12]
 8002b56:	4942      	ldr	r1, [pc, #264]	; (8002c60 <HAL_ADC_Init+0x1dc>)
 8002b58:	4001      	ands	r1, r0
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b5a:	6920      	ldr	r0, [r4, #16]
    MODIFY_REG(hadc->Instance->CFGR,
 8002b5c:	430b      	orrs	r3, r1
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b5e:	2801      	cmp	r0, #1
    MODIFY_REG(hadc->Instance->CFGR,
 8002b60:	60d3      	str	r3, [r2, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002b62:	d05a      	beq.n	8002c1a <HAL_ADC_Init+0x196>
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002b64:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8002b66:	f023 030f 	bic.w	r3, r3, #15
 8002b6a:	6313      	str	r3, [r2, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 8002b6c:	2000      	movs	r0, #0
 8002b6e:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8002b70:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b72:	f023 0303 	bic.w	r3, r3, #3
 8002b76:	f043 0301 	orr.w	r3, r3, #1
 8002b7a:	6423      	str	r3, [r4, #64]	; 0x40
}
 8002b7c:	b003      	add	sp, #12
 8002b7e:	bd30      	pop	{r4, r5, pc}
      ADC_STATE_CLR_SET(hadc->State,
 8002b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b82:	f023 0312 	bic.w	r3, r3, #18
 8002b86:	f043 0310 	orr.w	r3, r3, #16
 8002b8a:	6423      	str	r3, [r4, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8c:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6463      	str	r3, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b96:	e78f      	b.n	8002ab8 <HAL_ADC_Init+0x34>
    return HAL_ERROR;
 8002b98:	2001      	movs	r0, #1
}
 8002b9a:	b003      	add	sp, #12
 8002b9c:	bd30      	pop	{r4, r5, pc}
      hadc->InjectionConfig.ContextQueue = 0U;
 8002b9e:	e9c0 5512 	strd	r5, r5, [r0, #72]	; 0x48
      ADC_CLEAR_ERRORCODE(hadc);
 8002ba2:	6445      	str	r5, [r0, #68]	; 0x44
      hadc->Lock = HAL_UNLOCKED;
 8002ba4:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
    HAL_ADC_MspInit(hadc);
 8002ba8:	f7ff fd36 	bl	8002618 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8002bac:	6822      	ldr	r2, [r4, #0]
 8002bae:	6893      	ldr	r3, [r2, #8]
 8002bb0:	00d9      	lsls	r1, r3, #3
 8002bb2:	d501      	bpl.n	8002bb8 <HAL_ADC_Init+0x134>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bb4:	462b      	mov	r3, r5
 8002bb6:	e775      	b.n	8002aa4 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 8002bb8:	4620      	mov	r0, r4
 8002bba:	f7ff ff23 	bl	8002a04 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bbe:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002bc0:	06d2      	lsls	r2, r2, #27
        tmp_hal_status = ADC_Disable(hadc);
 8002bc2:	4603      	mov	r3, r0
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002bc4:	f53f af6d 	bmi.w	8002aa2 <HAL_ADC_Init+0x1e>
 8002bc8:	2800      	cmp	r0, #0
 8002bca:	f47f af6a 	bne.w	8002aa2 <HAL_ADC_Init+0x1e>
          ADC_STATE_CLR_SET(hadc->State,
 8002bce:	6c21      	ldr	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002bd0:	6822      	ldr	r2, [r4, #0]
          ADC_STATE_CLR_SET(hadc->State,
 8002bd2:	f421 5188 	bic.w	r1, r1, #4352	; 0x1100
 8002bd6:	f021 0102 	bic.w	r1, r1, #2
 8002bda:	f041 0102 	orr.w	r1, r1, #2
 8002bde:	6421      	str	r1, [r4, #64]	; 0x40
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002be0:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002be2:	4920      	ldr	r1, [pc, #128]	; (8002c64 <HAL_ADC_Init+0x1e0>)
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8002be4:	f020 5040 	bic.w	r0, r0, #805306368	; 0x30000000
 8002be8:	6090      	str	r0, [r2, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002bea:	6890      	ldr	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bec:	6809      	ldr	r1, [r1, #0]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8002bee:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002bf2:	6090      	str	r0, [r2, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002bf4:	481c      	ldr	r0, [pc, #112]	; (8002c68 <HAL_ADC_Init+0x1e4>)
 8002bf6:	fba0 0101 	umull	r0, r1, r0, r1
 8002bfa:	0c89      	lsrs	r1, r1, #18
 8002bfc:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8002c00:	0049      	lsls	r1, r1, #1
 8002c02:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8002c04:	9901      	ldr	r1, [sp, #4]
 8002c06:	2900      	cmp	r1, #0
 8002c08:	f43f af4c 	beq.w	8002aa4 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 8002c0c:	9901      	ldr	r1, [sp, #4]
 8002c0e:	3901      	subs	r1, #1
 8002c10:	9101      	str	r1, [sp, #4]
          while(wait_loop_index != 0U)
 8002c12:	9901      	ldr	r1, [sp, #4]
 8002c14:	2900      	cmp	r1, #0
 8002c16:	d1f9      	bne.n	8002c0c <HAL_ADC_Init+0x188>
 8002c18:	e744      	b.n	8002aa4 <HAL_ADC_Init+0x20>
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002c1a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c1c:	69e3      	ldr	r3, [r4, #28]
 8002c1e:	f021 010f 	bic.w	r1, r1, #15
 8002c22:	3b01      	subs	r3, #1
 8002c24:	430b      	orrs	r3, r1
 8002c26:	6313      	str	r3, [r2, #48]	; 0x30
 8002c28:	e7a0      	b.n	8002b6c <HAL_ADC_Init+0xe8>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c2a:	b95d      	cbnz	r5, 8002c44 <HAL_ADC_Init+0x1c0>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8002c2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8002c2e:	3901      	subs	r1, #1
 8002c30:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c38:	e775      	b.n	8002b26 <HAL_ADC_Init+0xa2>
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8002c3a:	6813      	ldr	r3, [r2, #0]
 8002c3c:	07db      	lsls	r3, r3, #31
 8002c3e:	f53f af5f 	bmi.w	8002b00 <HAL_ADC_Init+0x7c>
 8002c42:	e756      	b.n	8002af2 <HAL_ADC_Init+0x6e>
        ADC_STATE_CLR_SET(hadc->State,
 8002c44:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002c46:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 8002c4a:	f041 0120 	orr.w	r1, r1, #32
 8002c4e:	6421      	str	r1, [r4, #64]	; 0x40
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c50:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8002c52:	f041 0101 	orr.w	r1, r1, #1
 8002c56:	6461      	str	r1, [r4, #68]	; 0x44
 8002c58:	e765      	b.n	8002b26 <HAL_ADC_Init+0xa2>
 8002c5a:	bf00      	nop
 8002c5c:	50000300 	.word	0x50000300
 8002c60:	fff0c007 	.word	0xfff0c007
 8002c64:	20000478 	.word	0x20000478
 8002c68:	431bde83 	.word	0x431bde83

08002c6c <HAL_ADC_ConfigChannel>:
{
 8002c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002c6e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002c72:	68cc      	ldr	r4, [r1, #12]
{
 8002c74:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002c76:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002c78:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8002c7a:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002c7c:	f000 80e2 	beq.w	8002e44 <HAL_ADC_ConfigChannel+0x1d8>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c80:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hadc);
 8002c82:	2201      	movs	r2, #1
 8002c84:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002c88:	689d      	ldr	r5, [r3, #8]
 8002c8a:	076d      	lsls	r5, r5, #29
 8002c8c:	d43b      	bmi.n	8002d06 <HAL_ADC_ConfigChannel+0x9a>
    if (sConfig->Rank < 5U)
 8002c8e:	684a      	ldr	r2, [r1, #4]
 8002c90:	2a04      	cmp	r2, #4
 8002c92:	d875      	bhi.n	8002d80 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->SQR1,
 8002c94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002c98:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 8002c9a:	680d      	ldr	r5, [r1, #0]
 8002c9c:	0052      	lsls	r2, r2, #1
 8002c9e:	f04f 0c1f 	mov.w	ip, #31
 8002ca2:	fa0c fc02 	lsl.w	ip, ip, r2
 8002ca6:	ea26 0c0c 	bic.w	ip, r6, ip
 8002caa:	fa05 f202 	lsl.w	r2, r5, r2
 8002cae:	ea4c 0202 	orr.w	r2, ip, r2
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	f012 0f0c 	tst.w	r2, #12
 8002cba:	d137      	bne.n	8002d2c <HAL_ADC_ConfigChannel+0xc0>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002cbc:	2d09      	cmp	r5, #9
 8002cbe:	f240 80ad 	bls.w	8002e1c <HAL_ADC_ConfigChannel+0x1b0>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002cc2:	688f      	ldr	r7, [r1, #8]
 8002cc4:	699a      	ldr	r2, [r3, #24]
 8002cc6:	eb05 0645 	add.w	r6, r5, r5, lsl #1
 8002cca:	3e1e      	subs	r6, #30
 8002ccc:	f04f 0e07 	mov.w	lr, #7
 8002cd0:	fa07 fc06 	lsl.w	ip, r7, r6
 8002cd4:	fa0e f606 	lsl.w	r6, lr, r6
 8002cd8:	ea22 0206 	bic.w	r2, r2, r6
 8002cdc:	ea42 020c 	orr.w	r2, r2, ip
 8002ce0:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002ce2:	68da      	ldr	r2, [r3, #12]
    switch (sConfig->OffsetNumber)
 8002ce4:	690e      	ldr	r6, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002ce6:	694f      	ldr	r7, [r1, #20]
 8002ce8:	f3c2 02c1 	ubfx	r2, r2, #3, #2
 8002cec:	0052      	lsls	r2, r2, #1
    switch (sConfig->OffsetNumber)
 8002cee:	3e01      	subs	r6, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8002cf0:	fa07 f202 	lsl.w	r2, r7, r2
    switch (sConfig->OffsetNumber)
 8002cf4:	2e03      	cmp	r6, #3
 8002cf6:	f200 811d 	bhi.w	8002f34 <HAL_ADC_ConfigChannel+0x2c8>
 8002cfa:	e8df f016 	tbh	[pc, r6, lsl #1]
 8002cfe:	000e      	.short	0x000e
 8002d00:	00f500ff 	.word	0x00f500ff
 8002d04:	00eb      	.short	0x00eb
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d06:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002d08:	f043 0320 	orr.w	r3, r3, #32
 8002d0c:	6403      	str	r3, [r0, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8002d0e:	2300      	movs	r3, #0
 8002d10:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8002d14:	4610      	mov	r0, r2
 8002d16:	b003      	add	sp, #12
 8002d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002d1a:	6e1f      	ldr	r7, [r3, #96]	; 0x60
 8002d1c:	4e9b      	ldr	r6, [pc, #620]	; (8002f8c <HAL_ADC_ConfigChannel+0x320>)
 8002d1e:	403e      	ands	r6, r7
 8002d20:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002d24:	4332      	orrs	r2, r6
 8002d26:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002d2a:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002d2c:	689a      	ldr	r2, [r3, #8]
 8002d2e:	f002 0203 	and.w	r2, r2, #3
 8002d32:	2a01      	cmp	r2, #1
 8002d34:	f000 8081 	beq.w	8002e3a <HAL_ADC_ConfigChannel+0x1ce>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002d38:	2c01      	cmp	r4, #1
 8002d3a:	f000 8087 	beq.w	8002e4c <HAL_ADC_ConfigChannel+0x1e0>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002d3e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002d42:	2101      	movs	r1, #1
 8002d44:	40a9      	lsls	r1, r5
 8002d46:	ea22 0201 	bic.w	r2, r2, r1
 8002d4a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d4e:	2d10      	cmp	r5, #16
 8002d50:	d02d      	beq.n	8002dae <HAL_ADC_ConfigChannel+0x142>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002d52:	2d11      	cmp	r5, #17
 8002d54:	f040 8090 	bne.w	8002e78 <HAL_ADC_ConfigChannel+0x20c>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002d58:	4a8d      	ldr	r2, [pc, #564]	; (8002f90 <HAL_ADC_ConfigChannel+0x324>)
 8002d5a:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002d5c:	01d6      	lsls	r6, r2, #7
 8002d5e:	d44a      	bmi.n	8002df6 <HAL_ADC_ConfigChannel+0x18a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002d60:	689a      	ldr	r2, [r3, #8]
 8002d62:	f002 0203 	and.w	r2, r2, #3
 8002d66:	2a01      	cmp	r2, #1
 8002d68:	f000 80dc 	beq.w	8002f24 <HAL_ADC_ConfigChannel+0x2b8>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d70:	d141      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x18a>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d72:	4987      	ldr	r1, [pc, #540]	; (8002f90 <HAL_ADC_ConfigChannel+0x324>)
 8002d74:	688b      	ldr	r3, [r1, #8]
 8002d76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7a:	2200      	movs	r2, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002d7c:	608b      	str	r3, [r1, #8]
 8002d7e:	e7c6      	b.n	8002d0e <HAL_ADC_ConfigChannel+0xa2>
    else if (sConfig->Rank < 10U)
 8002d80:	2a09      	cmp	r2, #9
 8002d82:	d93a      	bls.n	8002dfa <HAL_ADC_ConfigChannel+0x18e>
    else if (sConfig->Rank < 15U)
 8002d84:	2a0e      	cmp	r2, #14
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d86:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002d8a:	ea4f 0242 	mov.w	r2, r2, lsl #1
    else if (sConfig->Rank < 15U)
 8002d8e:	f200 8093 	bhi.w	8002eb8 <HAL_ADC_ConfigChannel+0x24c>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8002d92:	6b9e      	ldr	r6, [r3, #56]	; 0x38
 8002d94:	680d      	ldr	r5, [r1, #0]
 8002d96:	3a3c      	subs	r2, #60	; 0x3c
 8002d98:	f04f 0c1f 	mov.w	ip, #31
 8002d9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8002da0:	ea26 060c 	bic.w	r6, r6, ip
 8002da4:	fa05 f202 	lsl.w	r2, r5, r2
 8002da8:	4332      	orrs	r2, r6
 8002daa:	639a      	str	r2, [r3, #56]	; 0x38
 8002dac:	e782      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x48>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002dae:	4a78      	ldr	r2, [pc, #480]	; (8002f90 <HAL_ADC_ConfigChannel+0x324>)
 8002db0:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002db2:	0217      	lsls	r7, r2, #8
 8002db4:	d41f      	bmi.n	8002df6 <HAL_ADC_ConfigChannel+0x18a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	f002 0203 	and.w	r2, r2, #3
 8002dbc:	2a01      	cmp	r2, #1
 8002dbe:	f000 80a7 	beq.w	8002f10 <HAL_ADC_ConfigChannel+0x2a4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dc6:	d116      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x18a>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002dc8:	4a71      	ldr	r2, [pc, #452]	; (8002f90 <HAL_ADC_ConfigChannel+0x324>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dca:	4c72      	ldr	r4, [pc, #456]	; (8002f94 <HAL_ADC_ConfigChannel+0x328>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002dcc:	6893      	ldr	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dce:	4972      	ldr	r1, [pc, #456]	; (8002f98 <HAL_ADC_ConfigChannel+0x32c>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002dd0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002dd4:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002dd6:	6823      	ldr	r3, [r4, #0]
 8002dd8:	fba1 2303 	umull	r2, r3, r1, r3
 8002ddc:	0c9b      	lsrs	r3, r3, #18
 8002dde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002de6:	9b01      	ldr	r3, [sp, #4]
 8002de8:	b12b      	cbz	r3, 8002df6 <HAL_ADC_ConfigChannel+0x18a>
            wait_loop_index--;
 8002dea:	9b01      	ldr	r3, [sp, #4]
 8002dec:	3b01      	subs	r3, #1
 8002dee:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8002df0:	9b01      	ldr	r3, [sp, #4]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f9      	bne.n	8002dea <HAL_ADC_ConfigChannel+0x17e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002df6:	2200      	movs	r2, #0
 8002df8:	e789      	b.n	8002d0e <HAL_ADC_ConfigChannel+0xa2>
      MODIFY_REG(hadc->Instance->SQR2,
 8002dfa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8002dfe:	0052      	lsls	r2, r2, #1
 8002e00:	6b5e      	ldr	r6, [r3, #52]	; 0x34
 8002e02:	680d      	ldr	r5, [r1, #0]
 8002e04:	3a1e      	subs	r2, #30
 8002e06:	f04f 0c1f 	mov.w	ip, #31
 8002e0a:	fa0c fc02 	lsl.w	ip, ip, r2
 8002e0e:	ea26 060c 	bic.w	r6, r6, ip
 8002e12:	fa05 f202 	lsl.w	r2, r5, r2
 8002e16:	4332      	orrs	r2, r6
 8002e18:	635a      	str	r2, [r3, #52]	; 0x34
 8002e1a:	e74b      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002e1c:	695a      	ldr	r2, [r3, #20]
 8002e1e:	688e      	ldr	r6, [r1, #8]
 8002e20:	eb05 0e45 	add.w	lr, r5, r5, lsl #1
 8002e24:	f04f 0c07 	mov.w	ip, #7
 8002e28:	fa0c fc0e 	lsl.w	ip, ip, lr
 8002e2c:	fa06 f60e 	lsl.w	r6, r6, lr
 8002e30:	ea22 020c 	bic.w	r2, r2, ip
 8002e34:	4332      	orrs	r2, r6
 8002e36:	615a      	str	r2, [r3, #20]
 8002e38:	e753      	b.n	8002ce2 <HAL_ADC_ConfigChannel+0x76>
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002e3a:	681a      	ldr	r2, [r3, #0]
 8002e3c:	07d2      	lsls	r2, r2, #31
 8002e3e:	f57f af7b 	bpl.w	8002d38 <HAL_ADC_ConfigChannel+0xcc>
 8002e42:	e7d8      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x18a>
  __HAL_LOCK(hadc);
 8002e44:	2202      	movs	r2, #2
}
 8002e46:	4610      	mov	r0, r2
 8002e48:	b003      	add	sp, #12
 8002e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e4c:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002e50:	40ac      	lsls	r4, r5
 8002e52:	4314      	orrs	r4, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e54:	2d09      	cmp	r5, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002e56:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002e5a:	d91f      	bls.n	8002e9c <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR2,
 8002e5c:	688c      	ldr	r4, [r1, #8]
 8002e5e:	699a      	ldr	r2, [r3, #24]
 8002e60:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 8002e64:	391b      	subs	r1, #27
 8002e66:	2607      	movs	r6, #7
 8002e68:	408c      	lsls	r4, r1
 8002e6a:	fa06 f101 	lsl.w	r1, r6, r1
 8002e6e:	ea22 0201 	bic.w	r2, r2, r1
 8002e72:	4322      	orrs	r2, r4
 8002e74:	619a      	str	r2, [r3, #24]
 8002e76:	e76a      	b.n	8002d4e <HAL_ADC_ConfigChannel+0xe2>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002e78:	2d12      	cmp	r5, #18
 8002e7a:	d1bc      	bne.n	8002df6 <HAL_ADC_ConfigChannel+0x18a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002e7c:	4a44      	ldr	r2, [pc, #272]	; (8002f90 <HAL_ADC_ConfigChannel+0x324>)
 8002e7e:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002e80:	0255      	lsls	r5, r2, #9
 8002e82:	d4b8      	bmi.n	8002df6 <HAL_ADC_ConfigChannel+0x18a>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	f002 0203 	and.w	r2, r2, #3
 8002e8a:	2a01      	cmp	r2, #1
 8002e8c:	d04e      	beq.n	8002f2c <HAL_ADC_ConfigChannel+0x2c0>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002e8e:	4940      	ldr	r1, [pc, #256]	; (8002f90 <HAL_ADC_ConfigChannel+0x324>)
 8002e90:	688b      	ldr	r3, [r1, #8]
 8002e92:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e96:	2200      	movs	r2, #0
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002e98:	608b      	str	r3, [r1, #8]
 8002e9a:	e738      	b.n	8002d0e <HAL_ADC_ConfigChannel+0xa2>
        MODIFY_REG(hadc->Instance->SMPR1,
 8002e9c:	6889      	ldr	r1, [r1, #8]
 8002e9e:	695a      	ldr	r2, [r3, #20]
 8002ea0:	3501      	adds	r5, #1
 8002ea2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002ea6:	2407      	movs	r4, #7
 8002ea8:	40a9      	lsls	r1, r5
 8002eaa:	fa04 f505 	lsl.w	r5, r4, r5
 8002eae:	ea22 0205 	bic.w	r2, r2, r5
 8002eb2:	430a      	orrs	r2, r1
 8002eb4:	615a      	str	r2, [r3, #20]
 8002eb6:	e79e      	b.n	8002df6 <HAL_ADC_ConfigChannel+0x18a>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002eb8:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 8002eba:	680d      	ldr	r5, [r1, #0]
 8002ebc:	3a5a      	subs	r2, #90	; 0x5a
 8002ebe:	f04f 0c1f 	mov.w	ip, #31
 8002ec2:	fa0c fc02 	lsl.w	ip, ip, r2
 8002ec6:	ea26 060c 	bic.w	r6, r6, ip
 8002eca:	fa05 f202 	lsl.w	r2, r5, r2
 8002ece:	4332      	orrs	r2, r6
 8002ed0:	63da      	str	r2, [r3, #60]	; 0x3c
 8002ed2:	e6ef      	b.n	8002cb4 <HAL_ADC_ConfigChannel+0x48>
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002ed4:	6edf      	ldr	r7, [r3, #108]	; 0x6c
 8002ed6:	4e2d      	ldr	r6, [pc, #180]	; (8002f8c <HAL_ADC_ConfigChannel+0x320>)
 8002ed8:	403e      	ands	r6, r7
 8002eda:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002ede:	4332      	orrs	r2, r6
 8002ee0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ee4:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8002ee6:	e721      	b.n	8002d2c <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002ee8:	6e9f      	ldr	r7, [r3, #104]	; 0x68
 8002eea:	4e28      	ldr	r6, [pc, #160]	; (8002f8c <HAL_ADC_ConfigChannel+0x320>)
 8002eec:	403e      	ands	r6, r7
 8002eee:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002ef2:	4332      	orrs	r2, r6
 8002ef4:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002ef8:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 8002efa:	e717      	b.n	8002d2c <HAL_ADC_ConfigChannel+0xc0>
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002efc:	6e5f      	ldr	r7, [r3, #100]	; 0x64
 8002efe:	4e23      	ldr	r6, [pc, #140]	; (8002f8c <HAL_ADC_ConfigChannel+0x320>)
 8002f00:	403e      	ands	r6, r7
 8002f02:	ea46 6685 	orr.w	r6, r6, r5, lsl #26
 8002f06:	4332      	orrs	r2, r6
 8002f08:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002f0c:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8002f0e:	e70d      	b.n	8002d2c <HAL_ADC_ConfigChannel+0xc0>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	07d4      	lsls	r4, r2, #31
 8002f14:	f57f af55 	bpl.w	8002dc2 <HAL_ADC_ConfigChannel+0x156>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f18:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8002f1a:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 8002f1e:	2201      	movs	r2, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f20:	6403      	str	r3, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 8002f22:	e6f4      	b.n	8002d0e <HAL_ADC_ConfigChannel+0xa2>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	07d2      	lsls	r2, r2, #31
 8002f28:	d4f6      	bmi.n	8002f18 <HAL_ADC_ConfigChannel+0x2ac>
 8002f2a:	e71f      	b.n	8002d6c <HAL_ADC_ConfigChannel+0x100>
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	07d9      	lsls	r1, r3, #31
 8002f30:	d5ad      	bpl.n	8002e8e <HAL_ADC_ConfigChannel+0x222>
 8002f32:	e7f1      	b.n	8002f18 <HAL_ADC_ConfigChannel+0x2ac>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f34:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f36:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002f3a:	ebb2 6f85 	cmp.w	r2, r5, lsl #26
 8002f3e:	ea4f 6685 	mov.w	r6, r5, lsl #26
 8002f42:	d014      	beq.n	8002f6e <HAL_ADC_ConfigChannel+0x302>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f44:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f46:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002f4a:	4296      	cmp	r6, r2
 8002f4c:	d014      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x30c>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f4e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f50:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002f54:	4296      	cmp	r6, r2
 8002f56:	d014      	beq.n	8002f82 <HAL_ADC_ConfigChannel+0x316>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002f58:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f5a:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8002f5e:	4296      	cmp	r6, r2
 8002f60:	f47f aee4 	bne.w	8002d2c <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002f64:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002f66:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f6a:	66da      	str	r2, [r3, #108]	; 0x6c
 8002f6c:	e6de      	b.n	8002d2c <HAL_ADC_ConfigChannel+0xc0>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002f6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f74:	661a      	str	r2, [r3, #96]	; 0x60
 8002f76:	e7e5      	b.n	8002f44 <HAL_ADC_ConfigChannel+0x2d8>
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8002f78:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002f7a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f7e:	665a      	str	r2, [r3, #100]	; 0x64
 8002f80:	e7e5      	b.n	8002f4e <HAL_ADC_ConfigChannel+0x2e2>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002f82:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002f84:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002f88:	669a      	str	r2, [r3, #104]	; 0x68
 8002f8a:	e7e5      	b.n	8002f58 <HAL_ADC_ConfigChannel+0x2ec>
 8002f8c:	83fff000 	.word	0x83fff000
 8002f90:	50000300 	.word	0x50000300
 8002f94:	20000478 	.word	0x20000478
 8002f98:	431bde83 	.word	0x431bde83

08002f9c <HAL_ADCEx_InjectedConfigChannel>:
{
 8002f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8002f9e:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002fa2:	68cc      	ldr	r4, [r1, #12]
{
 8002fa4:	b083      	sub	sp, #12
  __IO uint32_t wait_loop_index = 0U;
 8002fa6:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8002fa8:	2b01      	cmp	r3, #1
  __IO uint32_t wait_loop_index = 0U;
 8002faa:	9201      	str	r2, [sp, #4]
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fac:	6902      	ldr	r2, [r0, #16]
  __HAL_LOCK(hadc);
 8002fae:	f000 818e 	beq.w	80032ce <HAL_ADCEx_InjectedConfigChannel+0x332>
 8002fb2:	2301      	movs	r3, #1
 8002fb4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002fb8:	b31a      	cbz	r2, 8003002 <HAL_ADCEx_InjectedConfigChannel+0x66>
      (sConfigInjected->InjectedNbrOfConversion == 1U)  )
 8002fba:	698b      	ldr	r3, [r1, #24]
  if ((hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)  ||
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d020      	beq.n	8003002 <HAL_ADCEx_InjectedConfigChannel+0x66>
    if (hadc->InjectionConfig.ChannelCount == 0U)
 8002fc0:	6cc5      	ldr	r5, [r0, #76]	; 0x4c
 8002fc2:	2d00      	cmp	r5, #0
 8002fc4:	f040 811d 	bne.w	8003202 <HAL_ADCEx_InjectedConfigChannel+0x266>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002fc8:	6a0a      	ldr	r2, [r1, #32]
      hadc->InjectionConfig.ChannelCount = sConfigInjected->InjectedNbrOfConversion;
 8002fca:	64c3      	str	r3, [r0, #76]	; 0x4c
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8002fcc:	2a01      	cmp	r2, #1
 8002fce:	f000 8189 	beq.w	80032e4 <HAL_ADCEx_InjectedConfigChannel+0x348>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U)           |
 8002fd2:	6a4d      	ldr	r5, [r1, #36]	; 0x24
 8002fd4:	3b01      	subs	r3, #1
 8002fd6:	432a      	orrs	r2, r5
 8002fd8:	431a      	orrs	r2, r3
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002fda:	684d      	ldr	r5, [r1, #4]
 8002fdc:	680e      	ldr	r6, [r1, #0]
      hadc->InjectionConfig.ChannelCount --;
 8002fde:	64c3      	str	r3, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8002fe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002fe4:	006d      	lsls	r5, r5, #1
 8002fe6:	3502      	adds	r5, #2
 8002fe8:	fa06 f305 	lsl.w	r3, r6, r5
 8002fec:	261f      	movs	r6, #31
 8002fee:	fa06 f505 	lsl.w	r5, r6, r5
 8002ff2:	ea22 0205 	bic.w	r2, r2, r5
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	6482      	str	r2, [r0, #72]	; 0x48
        MODIFY_REG(hadc->Instance->JSQR              ,
 8002ffa:	6803      	ldr	r3, [r0, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ffc:	f04f 0c00 	mov.w	ip, #0
 8003000:	e00a      	b.n	8003018 <HAL_ADCEx_InjectedConfigChannel+0x7c>
    if (sConfigInjected->InjectedRank == ADC_INJECTED_RANK_1)
 8003002:	684b      	ldr	r3, [r1, #4]
 8003004:	2b01      	cmp	r3, #1
 8003006:	f000 80e8 	beq.w	80031da <HAL_ADCEx_InjectedConfigChannel+0x23e>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800300a:	6c02      	ldr	r2, [r0, #64]	; 0x40
        MODIFY_REG(hadc->Instance->JSQR              ,
 800300c:	6803      	ldr	r3, [r0, #0]
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800300e:	f042 0220 	orr.w	r2, r2, #32
 8003012:	6402      	str	r2, [r0, #64]	; 0x40
      tmp_hal_status = HAL_ERROR;
 8003014:	f04f 0c01 	mov.w	ip, #1
  if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8003018:	689a      	ldr	r2, [r3, #8]
 800301a:	0712      	lsls	r2, r2, #28
 800301c:	d40d      	bmi.n	800303a <HAL_ADCEx_InjectedConfigChannel+0x9e>
    if (sConfigInjected->AutoInjectedConv == DISABLE)
 800301e:	7f4a      	ldrb	r2, [r1, #29]
 8003020:	2a00      	cmp	r2, #0
 8003022:	f040 80c9 	bne.w	80031b8 <HAL_ADCEx_InjectedConfigChannel+0x21c>
      MODIFY_REG(hadc->Instance->CFGR                                                            ,
 8003026:	7f0a      	ldrb	r2, [r1, #28]
 8003028:	68dd      	ldr	r5, [r3, #12]
 800302a:	7f8e      	ldrb	r6, [r1, #30]
 800302c:	0512      	lsls	r2, r2, #20
 800302e:	f425 1540 	bic.w	r5, r5, #3145728	; 0x300000
 8003032:	ea42 5246 	orr.w	r2, r2, r6, lsl #21
 8003036:	432a      	orrs	r2, r5
 8003038:	60da      	str	r2, [r3, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	f012 0f0c 	tst.w	r2, #12
 8003040:	d13a      	bne.n	80030b8 <HAL_ADCEx_InjectedConfigChannel+0x11c>
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 8003042:	6a0a      	ldr	r2, [r1, #32]
 8003044:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 8003046:	68da      	ldr	r2, [r3, #12]
 8003048:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    if (sConfigInjected->ExternalTrigInjecConv == ADC_INJECTED_SOFTWARE_START)
 800304c:	f000 813a 	beq.w	80032c4 <HAL_ADCEx_InjectedConfigChannel+0x328>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO);
 8003050:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->AutoInjectedConv == ENABLE)
 8003052:	7f4a      	ldrb	r2, [r1, #29]
 8003054:	2a01      	cmp	r2, #1
 8003056:	f000 811c 	beq.w	8003292 <HAL_ADCEx_InjectedConfigChannel+0x2f6>
    if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800305a:	680e      	ldr	r6, [r1, #0]
 800305c:	2e09      	cmp	r6, #9
 800305e:	f240 809d 	bls.w	800319c <HAL_ADCEx_InjectedConfigChannel+0x200>
      MODIFY_REG(hadc->Instance->SMPR2                                                             ,
 8003062:	688d      	ldr	r5, [r1, #8]
 8003064:	699a      	ldr	r2, [r3, #24]
 8003066:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
 800306a:	f1ae 0e1e 	sub.w	lr, lr, #30
 800306e:	2707      	movs	r7, #7
 8003070:	fa05 f50e 	lsl.w	r5, r5, lr
 8003074:	fa07 fe0e 	lsl.w	lr, r7, lr
 8003078:	ea22 020e 	bic.w	r2, r2, lr
 800307c:	432a      	orrs	r2, r5
 800307e:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003080:	68da      	ldr	r2, [r3, #12]
    switch (sConfigInjected->InjectedOffsetNumber)
 8003082:	690d      	ldr	r5, [r1, #16]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003084:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 8003088:	694a      	ldr	r2, [r1, #20]
 800308a:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
    switch (sConfigInjected->InjectedOffsetNumber)
 800308e:	3d01      	subs	r5, #1
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfigInjected->InjectedOffset);
 8003090:	fa02 f20e 	lsl.w	r2, r2, lr
    switch (sConfigInjected->InjectedOffsetNumber)
 8003094:	2d03      	cmp	r5, #3
 8003096:	f200 813b 	bhi.w	8003310 <HAL_ADCEx_InjectedConfigChannel+0x374>
 800309a:	e8df f015 	tbh	[pc, r5, lsl #1]
 800309e:	0004      	.short	0x0004
 80030a0:	00e600f0 	.word	0x00e600f0
 80030a4:	00dc      	.short	0x00dc
      MODIFY_REG(hadc->Instance->OFR1                               ,
 80030a6:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 80030aa:	4daa      	ldr	r5, [pc, #680]	; (8003354 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 80030ac:	6e1e      	ldr	r6, [r3, #96]	; 0x60
 80030ae:	4035      	ands	r5, r6
 80030b0:	432a      	orrs	r2, r5
 80030b2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80030b6:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	f002 0203 	and.w	r2, r2, #3
 80030be:	2a01      	cmp	r2, #1
 80030c0:	d023      	beq.n	800310a <HAL_ADCEx_InjectedConfigChannel+0x16e>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030c2:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80030c4:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 80030c6:	d026      	beq.n	8003116 <HAL_ADCEx_InjectedConfigChannel+0x17a>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80030c8:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80030cc:	2401      	movs	r4, #1
 80030ce:	4094      	lsls	r4, r2
 80030d0:	ea21 0104 	bic.w	r1, r1, r4
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80030d4:	2a10      	cmp	r2, #16
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 80030d6:	f8c3 10b0 	str.w	r1, [r3, #176]	; 0xb0
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 80030da:	d034      	beq.n	8003146 <HAL_ADCEx_InjectedConfigChannel+0x1aa>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80030dc:	2a11      	cmp	r2, #17
 80030de:	f040 80de 	bne.w	800329e <HAL_ADCEx_InjectedConfigChannel+0x302>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80030e2:	4a9d      	ldr	r2, [pc, #628]	; (8003358 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 80030e4:	6892      	ldr	r2, [r2, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT)       &&
 80030e6:	01d5      	lsls	r5, r2, #7
 80030e8:	d409      	bmi.n	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80030ea:	689a      	ldr	r2, [r3, #8]
 80030ec:	f002 0203 	and.w	r2, r2, #3
 80030f0:	2a01      	cmp	r2, #1
 80030f2:	f000 8105 	beq.w	8003300 <HAL_ADCEx_InjectedConfigChannel+0x364>
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80030f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80030fa:	f000 80ed 	beq.w	80032d8 <HAL_ADCEx_InjectedConfigChannel+0x33c>
  __HAL_UNLOCK(hadc);
 80030fe:	2300      	movs	r3, #0
 8003100:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8003104:	4660      	mov	r0, ip
 8003106:	b003      	add	sp, #12
 8003108:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (ADC_IS_ENABLE(hadc) == RESET)
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	07d7      	lsls	r7, r2, #31
 800310e:	d4f6      	bmi.n	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003110:	2c01      	cmp	r4, #1
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003112:	680a      	ldr	r2, [r1, #0]
    if (sConfigInjected->InjectedSingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003114:	d1d8      	bne.n	80030c8 <HAL_ADCEx_InjectedConfigChannel+0x12c>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003116:	f8d3 50b0 	ldr.w	r5, [r3, #176]	; 0xb0
 800311a:	4094      	lsls	r4, r2
 800311c:	432c      	orrs	r4, r5
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 800311e:	2a09      	cmp	r2, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfigInjected->InjectedChannel));
 8003120:	f8c3 40b0 	str.w	r4, [r3, #176]	; 0xb0
      if (sConfigInjected->InjectedChannel >= ADC_CHANNEL_10)
 8003124:	f240 8089 	bls.w	800323a <HAL_ADCEx_InjectedConfigChannel+0x29e>
        MODIFY_REG(hadc->Instance->SMPR2,
 8003128:	688d      	ldr	r5, [r1, #8]
 800312a:	6999      	ldr	r1, [r3, #24]
 800312c:	eb02 0442 	add.w	r4, r2, r2, lsl #1
 8003130:	3c1b      	subs	r4, #27
 8003132:	2607      	movs	r6, #7
 8003134:	40a5      	lsls	r5, r4
 8003136:	fa06 f404 	lsl.w	r4, r6, r4
 800313a:	ea21 0104 	bic.w	r1, r1, r4
 800313e:	4329      	orrs	r1, r5
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003140:	2a10      	cmp	r2, #16
        MODIFY_REG(hadc->Instance->SMPR2,
 8003142:	6199      	str	r1, [r3, #24]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003144:	d1ca      	bne.n	80030dc <HAL_ADCEx_InjectedConfigChannel+0x140>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8003146:	4a84      	ldr	r2, [pc, #528]	; (8003358 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 8003148:	6892      	ldr	r2, [r2, #8]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 800314a:	0216      	lsls	r6, r2, #8
 800314c:	d4d7      	bmi.n	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	f002 0203 	and.w	r2, r2, #3
 8003154:	2a01      	cmp	r2, #1
 8003156:	f000 80c8 	beq.w	80032ea <HAL_ADCEx_InjectedConfigChannel+0x34e>
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800315a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800315e:	d1ce      	bne.n	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003160:	4a7d      	ldr	r2, [pc, #500]	; (8003358 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003162:	497e      	ldr	r1, [pc, #504]	; (800335c <HAL_ADCEx_InjectedConfigChannel+0x3c0>)
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8003164:	6893      	ldr	r3, [r2, #8]
 8003166:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800316a:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800316c:	f1a2 624e 	sub.w	r2, r2, #216006656	; 0xce00000
 8003170:	680b      	ldr	r3, [r1, #0]
 8003172:	f5a2 2284 	sub.w	r2, r2, #270336	; 0x42000
 8003176:	f2a2 427d 	subw	r2, r2, #1149	; 0x47d
 800317a:	fba2 2303 	umull	r2, r3, r2, r3
 800317e:	0c9b      	lsrs	r3, r3, #18
 8003180:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003188:	9b01      	ldr	r3, [sp, #4]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d0b7      	beq.n	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
            wait_loop_index--;
 800318e:	9b01      	ldr	r3, [sp, #4]
 8003190:	3b01      	subs	r3, #1
 8003192:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8003194:	9b01      	ldr	r3, [sp, #4]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d1f9      	bne.n	800318e <HAL_ADCEx_InjectedConfigChannel+0x1f2>
 800319a:	e7b0      	b.n	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
      MODIFY_REG(hadc->Instance->SMPR1                                                             ,
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	688d      	ldr	r5, [r1, #8]
 80031a0:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80031a4:	f04f 0e07 	mov.w	lr, #7
 80031a8:	fa0e fe07 	lsl.w	lr, lr, r7
 80031ac:	40bd      	lsls	r5, r7
 80031ae:	ea22 020e 	bic.w	r2, r2, lr
 80031b2:	432a      	orrs	r2, r5
 80031b4:	615a      	str	r2, [r3, #20]
 80031b6:	e763      	b.n	8003080 <HAL_ADCEx_InjectedConfigChannel+0xe4>
      MODIFY_REG(hadc->Instance->CFGR                                                ,
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	7f8d      	ldrb	r5, [r1, #30]
 80031bc:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80031c0:	ea42 5245 	orr.w	r2, r2, r5, lsl #21
 80031c4:	60da      	str	r2, [r3, #12]
      if (sConfigInjected->InjectedDiscontinuousConvMode == ENABLE)
 80031c6:	7f0a      	ldrb	r2, [r1, #28]
 80031c8:	2a01      	cmp	r2, #1
 80031ca:	f47f af36 	bne.w	800303a <HAL_ADCEx_InjectedConfigChannel+0x9e>
        tmp_hal_status = HAL_ERROR;
 80031ce:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031d0:	6c02      	ldr	r2, [r0, #64]	; 0x40
 80031d2:	f042 0220 	orr.w	r2, r2, #32
 80031d6:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80031d8:	e72f      	b.n	800303a <HAL_ADCEx_InjectedConfigChannel+0x9e>
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80031da:	6a0b      	ldr	r3, [r1, #32]
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80031dc:	680a      	ldr	r2, [r1, #0]
      MODIFY_REG(hadc->Instance->JSQR           ,
 80031de:	4e60      	ldr	r6, [pc, #384]	; (8003360 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
      if (sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80031e0:	2b01      	cmp	r3, #1
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) |
 80031e2:	bf1e      	ittt	ne
 80031e4:	6a4d      	ldrne	r5, [r1, #36]	; 0x24
 80031e6:	432b      	orrne	r3, r5
 80031e8:	ea43 2202 	orrne.w	r2, r3, r2, lsl #8
      MODIFY_REG(hadc->Instance->JSQR           ,
 80031ec:	6803      	ldr	r3, [r0, #0]
 80031ee:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
        SET_BIT(tmp_JSQR_ContextQueueBeingBuilt, ADC_JSQR_RK(sConfigInjected->InjectedChannel, ADC_INJECTED_RANK_1) );
 80031f0:	bf08      	it	eq
 80031f2:	0212      	lsleq	r2, r2, #8
      MODIFY_REG(hadc->Instance->JSQR           ,
 80031f4:	4035      	ands	r5, r6
 80031f6:	4315      	orrs	r5, r2
 80031f8:	64dd      	str	r5, [r3, #76]	; 0x4c
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031fa:	f04f 0c00 	mov.w	ip, #0
      hadc->InjectionConfig.ContextQueue = tmp_JSQR_ContextQueueBeingBuilt;
 80031fe:	6482      	str	r2, [r0, #72]	; 0x48
 8003200:	e70a      	b.n	8003018 <HAL_ADCEx_InjectedConfigChannel+0x7c>
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003202:	684b      	ldr	r3, [r1, #4]
 8003204:	680e      	ldr	r6, [r1, #0]
 8003206:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003208:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	3302      	adds	r3, #2
 8003210:	271f      	movs	r7, #31
 8003212:	409e      	lsls	r6, r3
 8003214:	fa07 f303 	lsl.w	r3, r7, r3
 8003218:	ea22 0203 	bic.w	r2, r2, r3
      hadc->InjectionConfig.ChannelCount --;
 800321c:	3d01      	subs	r5, #1
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 800321e:	4332      	orrs	r2, r6
      hadc->InjectionConfig.ChannelCount --;
 8003220:	64c5      	str	r5, [r0, #76]	; 0x4c
      MODIFY_REG(hadc->InjectionConfig.ContextQueue                                          ,
 8003222:	6482      	str	r2, [r0, #72]	; 0x48
      if (hadc->InjectionConfig.ChannelCount == 0U)
 8003224:	2d00      	cmp	r5, #0
 8003226:	f47f aee8 	bne.w	8002ffa <HAL_ADCEx_InjectedConfigChannel+0x5e>
        MODIFY_REG(hadc->Instance->JSQR              ,
 800322a:	6803      	ldr	r3, [r0, #0]
 800322c:	4e4c      	ldr	r6, [pc, #304]	; (8003360 <HAL_ADCEx_InjectedConfigChannel+0x3c4>)
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800322e:	46ac      	mov	ip, r5
        MODIFY_REG(hadc->Instance->JSQR              ,
 8003230:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 8003232:	4035      	ands	r5, r6
 8003234:	432a      	orrs	r2, r5
 8003236:	64da      	str	r2, [r3, #76]	; 0x4c
 8003238:	e6ee      	b.n	8003018 <HAL_ADCEx_InjectedConfigChannel+0x7c>
        MODIFY_REG(hadc->Instance->SMPR1,
 800323a:	688c      	ldr	r4, [r1, #8]
 800323c:	3201      	adds	r2, #1
 800323e:	eb02 0142 	add.w	r1, r2, r2, lsl #1
 8003242:	2507      	movs	r5, #7
 8003244:	695a      	ldr	r2, [r3, #20]
 8003246:	408c      	lsls	r4, r1
 8003248:	fa05 f101 	lsl.w	r1, r5, r1
 800324c:	ea22 0201 	bic.w	r2, r2, r1
 8003250:	4322      	orrs	r2, r4
 8003252:	615a      	str	r2, [r3, #20]
    if (( (sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) &&
 8003254:	e753      	b.n	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
      MODIFY_REG(hadc->Instance->OFR4                               ,
 8003256:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 800325a:	4d3e      	ldr	r5, [pc, #248]	; (8003354 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 800325c:	6ede      	ldr	r6, [r3, #108]	; 0x6c
 800325e:	4035      	ands	r5, r6
 8003260:	432a      	orrs	r2, r5
 8003262:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003266:	66da      	str	r2, [r3, #108]	; 0x6c
      break;
 8003268:	e726      	b.n	80030b8 <HAL_ADCEx_InjectedConfigChannel+0x11c>
      MODIFY_REG(hadc->Instance->OFR3                               ,
 800326a:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 800326e:	4d39      	ldr	r5, [pc, #228]	; (8003354 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 8003270:	6e9e      	ldr	r6, [r3, #104]	; 0x68
 8003272:	4035      	ands	r5, r6
 8003274:	432a      	orrs	r2, r5
 8003276:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800327a:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 800327c:	e71c      	b.n	80030b8 <HAL_ADCEx_InjectedConfigChannel+0x11c>
      MODIFY_REG(hadc->Instance->OFR2                               ,
 800327e:	ea42 6286 	orr.w	r2, r2, r6, lsl #26
 8003282:	4d34      	ldr	r5, [pc, #208]	; (8003354 <HAL_ADCEx_InjectedConfigChannel+0x3b8>)
 8003284:	6e5e      	ldr	r6, [r3, #100]	; 0x64
 8003286:	4035      	ands	r5, r6
 8003288:	432a      	orrs	r2, r5
 800328a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800328e:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 8003290:	e712      	b.n	80030b8 <HAL_ADCEx_InjectedConfigChannel+0x11c>
        tmp_hal_status = HAL_ERROR;
 8003292:	4694      	mov	ip, r2
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003294:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8003296:	f042 0220 	orr.w	r2, r2, #32
 800329a:	6402      	str	r2, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 800329c:	e6dd      	b.n	800305a <HAL_ADCEx_InjectedConfigChannel+0xbe>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800329e:	2a12      	cmp	r2, #18
 80032a0:	f47f af2d 	bne.w	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80032a4:	4a2c      	ldr	r2, [pc, #176]	; (8003358 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 80032a6:	6892      	ldr	r2, [r2, #8]
        ( (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)    &&
 80032a8:	0254      	lsls	r4, r2, #9
 80032aa:	f53f af28 	bmi.w	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032ae:	689a      	ldr	r2, [r3, #8]
 80032b0:	f002 0203 	and.w	r2, r2, #3
 80032b4:	2a01      	cmp	r2, #1
 80032b6:	d027      	beq.n	8003308 <HAL_ADCEx_InjectedConfigChannel+0x36c>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80032b8:	4a27      	ldr	r2, [pc, #156]	; (8003358 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 80032ba:	6893      	ldr	r3, [r2, #8]
 80032bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80032c0:	6093      	str	r3, [r2, #8]
 80032c2:	e71c      	b.n	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
      MODIFY_REG(hadc->Instance->CFGR                                              ,
 80032c4:	7f4d      	ldrb	r5, [r1, #29]
 80032c6:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 80032ca:	60da      	str	r2, [r3, #12]
 80032cc:	e6c5      	b.n	800305a <HAL_ADCEx_InjectedConfigChannel+0xbe>
  __HAL_LOCK(hadc);
 80032ce:	f04f 0c02 	mov.w	ip, #2
}
 80032d2:	4660      	mov	r0, ip
 80032d4:	b003      	add	sp, #12
 80032d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80032d8:	4a1f      	ldr	r2, [pc, #124]	; (8003358 <HAL_ADCEx_InjectedConfigChannel+0x3bc>)
 80032da:	6893      	ldr	r3, [r2, #8]
 80032dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80032e0:	6093      	str	r3, [r2, #8]
 80032e2:	e70c      	b.n	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
        SET_BIT(hadc->InjectionConfig.ContextQueue, (sConfigInjected->InjectedNbrOfConversion - 1U) );        
 80032e4:	1e5a      	subs	r2, r3, #1
 80032e6:	4613      	mov	r3, r2
 80032e8:	e677      	b.n	8002fda <HAL_ADCEx_InjectedConfigChannel+0x3e>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	07d2      	lsls	r2, r2, #31
 80032ee:	f57f af34 	bpl.w	800315a <HAL_ADCEx_InjectedConfigChannel+0x1be>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032f2:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80032f4:	f043 0320 	orr.w	r3, r3, #32
        tmp_hal_status = HAL_ERROR;
 80032f8:	f04f 0c01 	mov.w	ip, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032fc:	6403      	str	r3, [r0, #64]	; 0x40
        tmp_hal_status = HAL_ERROR;
 80032fe:	e6fe      	b.n	80030fe <HAL_ADCEx_InjectedConfigChannel+0x162>
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	07d1      	lsls	r1, r2, #31
 8003304:	d4f5      	bmi.n	80032f2 <HAL_ADCEx_InjectedConfigChannel+0x356>
 8003306:	e6f6      	b.n	80030f6 <HAL_ADCEx_InjectedConfigChannel+0x15a>
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	07db      	lsls	r3, r3, #31
 800330c:	d5d4      	bpl.n	80032b8 <HAL_ADCEx_InjectedConfigChannel+0x31c>
 800330e:	e7f0      	b.n	80032f2 <HAL_ADCEx_InjectedConfigChannel+0x356>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003310:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003312:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003316:	ebb2 6f86 	cmp.w	r2, r6, lsl #26
 800331a:	ea4f 6586 	mov.w	r5, r6, lsl #26
 800331e:	d014      	beq.n	800334a <HAL_ADCEx_InjectedConfigChannel+0x3ae>
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003320:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003322:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003326:	4295      	cmp	r5, r2
 8003328:	d01c      	beq.n	8003364 <HAL_ADCEx_InjectedConfigChannel+0x3c8>
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 800332a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800332c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8003330:	4295      	cmp	r5, r2
 8003332:	d01c      	beq.n	800336e <HAL_ADCEx_InjectedConfigChannel+0x3d2>
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfigInjected->InjectedChannel))
 8003334:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003336:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 800333a:	4295      	cmp	r5, r2
 800333c:	f47f aebc 	bne.w	80030b8 <HAL_ADCEx_InjectedConfigChannel+0x11c>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8003340:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003342:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003346:	66da      	str	r2, [r3, #108]	; 0x6c
 8003348:	e6b6      	b.n	80030b8 <HAL_ADCEx_InjectedConfigChannel+0x11c>
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 800334a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800334c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003350:	661a      	str	r2, [r3, #96]	; 0x60
 8003352:	e7e5      	b.n	8003320 <HAL_ADCEx_InjectedConfigChannel+0x384>
 8003354:	83fff000 	.word	0x83fff000
 8003358:	50000300 	.word	0x50000300
 800335c:	20000478 	.word	0x20000478
 8003360:	82082000 	.word	0x82082000
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8003364:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003366:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800336a:	665a      	str	r2, [r3, #100]	; 0x64
 800336c:	e7dd      	b.n	800332a <HAL_ADCEx_InjectedConfigChannel+0x38e>
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 800336e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003370:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003374:	669a      	str	r2, [r3, #104]	; 0x68
 8003376:	e7dd      	b.n	8003334 <HAL_ADCEx_InjectedConfigChannel+0x398>

08003378 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003378:	4907      	ldr	r1, [pc, #28]	; (8003398 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800337a:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800337c:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800337e:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003382:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003386:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003388:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800338a:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800338e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8003392:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003394:	4770      	bx	lr
 8003396:	bf00      	nop
 8003398:	e000ed00 	.word	0xe000ed00

0800339c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800339c:	4b1c      	ldr	r3, [pc, #112]	; (8003410 <HAL_NVIC_SetPriority+0x74>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033a4:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033a6:	f1c3 0e07 	rsb	lr, r3, #7
 80033aa:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ae:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033b2:	bf28      	it	cs
 80033b4:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033b8:	f1bc 0f06 	cmp.w	ip, #6
 80033bc:	d91b      	bls.n	80033f6 <HAL_NVIC_SetPriority+0x5a>
 80033be:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033c0:	f04f 3cff 	mov.w	ip, #4294967295
 80033c4:	fa0c fc03 	lsl.w	ip, ip, r3
 80033c8:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033cc:	f04f 3cff 	mov.w	ip, #4294967295
 80033d0:	fa0c fc0e 	lsl.w	ip, ip, lr
 80033d4:	ea21 010c 	bic.w	r1, r1, ip
 80033d8:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 80033da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033dc:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 80033e0:	db0c      	blt.n	80033fc <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033e2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80033e6:	0109      	lsls	r1, r1, #4
 80033e8:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80033ec:	b2c9      	uxtb	r1, r1
 80033ee:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80033f2:	f85d fb04 	ldr.w	pc, [sp], #4
 80033f6:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033f8:	4613      	mov	r3, r2
 80033fa:	e7e7      	b.n	80033cc <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033fc:	4b05      	ldr	r3, [pc, #20]	; (8003414 <HAL_NVIC_SetPriority+0x78>)
 80033fe:	f000 000f 	and.w	r0, r0, #15
 8003402:	0109      	lsls	r1, r1, #4
 8003404:	4403      	add	r3, r0
 8003406:	b2c9      	uxtb	r1, r1
 8003408:	7619      	strb	r1, [r3, #24]
 800340a:	f85d fb04 	ldr.w	pc, [sp], #4
 800340e:	bf00      	nop
 8003410:	e000ed00 	.word	0xe000ed00
 8003414:	e000ecfc 	.word	0xe000ecfc

08003418 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8003418:	2800      	cmp	r0, #0
 800341a:	db08      	blt.n	800342e <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800341c:	0941      	lsrs	r1, r0, #5
 800341e:	4a04      	ldr	r2, [pc, #16]	; (8003430 <HAL_NVIC_EnableIRQ+0x18>)
 8003420:	f000 001f 	and.w	r0, r0, #31
 8003424:	2301      	movs	r3, #1
 8003426:	fa03 f000 	lsl.w	r0, r3, r0
 800342a:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800342e:	4770      	bx	lr
 8003430:	e000e100 	.word	0xe000e100

08003434 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003434:	3801      	subs	r0, #1
 8003436:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800343a:	d210      	bcs.n	800345e <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800343c:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800343e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003442:	4c08      	ldr	r4, [pc, #32]	; (8003464 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003444:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003446:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 800344a:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800344e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003450:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003452:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003454:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8003456:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800345a:	6119      	str	r1, [r3, #16]
 800345c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800345e:	2001      	movs	r0, #1
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop

0800346c <HAL_SYSTICK_IRQHandler>:
{
 800346c:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800346e:	f7ff fffb 	bl	8003468 <HAL_SYSTICK_Callback>
}
 8003472:	bd08      	pop	{r3, pc}

08003474 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003474:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003478:	680c      	ldr	r4, [r1, #0]
{
 800347a:	b085      	sub	sp, #20
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800347c:	2c00      	cmp	r4, #0
 800347e:	f000 80c3 	beq.w	8003608 <HAL_GPIO_Init+0x194>
 8003482:	f04f 0c00 	mov.w	ip, #0
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003486:	4e68      	ldr	r6, [pc, #416]	; (8003628 <HAL_GPIO_Init+0x1b4>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003488:	9100      	str	r1, [sp, #0]
  uint32_t position = 0x00u;
 800348a:	4663      	mov	r3, ip
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800348c:	f04f 0b01 	mov.w	fp, #1
 8003490:	e067      	b.n	8003562 <HAL_GPIO_Init+0xee>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003492:	2a03      	cmp	r2, #3
 8003494:	f040 80b2 	bne.w	80035fc <HAL_GPIO_Init+0x188>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003498:	fa02 f20c 	lsl.w	r2, r2, ip
 800349c:	ea6f 0e02 	mvn.w	lr, r2
      temp = GPIOx->MODER;
 80034a0:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80034a2:	ea07 0e0e 	and.w	lr, r7, lr
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80034a6:	ea42 020e 	orr.w	r2, r2, lr
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034aa:	f415 3f40 	tst.w	r5, #196608	; 0x30000
      GPIOx->MODER = temp;
 80034ae:	6002      	str	r2, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80034b0:	d051      	beq.n	8003556 <HAL_GPIO_Init+0xe2>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034b2:	4f5e      	ldr	r7, [pc, #376]	; (800362c <HAL_GPIO_Init+0x1b8>)
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	61ba      	str	r2, [r7, #24]
 80034bc:	69ba      	ldr	r2, [r7, #24]
 80034be:	f002 0201 	and.w	r2, r2, #1
 80034c2:	9203      	str	r2, [sp, #12]
 80034c4:	9a03      	ldr	r2, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2u];
 80034c6:	f023 0203 	bic.w	r2, r3, #3
 80034ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80034ce:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034d2:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2u];
 80034d6:	f8d2 e008 	ldr.w	lr, [r2, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034da:	00bf      	lsls	r7, r7, #2
 80034dc:	210f      	movs	r1, #15
 80034de:	fa01 f807 	lsl.w	r8, r1, r7
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034e2:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80034e6:	ea2e 0e08 	bic.w	lr, lr, r8
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80034ea:	d010      	beq.n	800350e <HAL_GPIO_Init+0x9a>
 80034ec:	4950      	ldr	r1, [pc, #320]	; (8003630 <HAL_GPIO_Init+0x1bc>)
 80034ee:	4288      	cmp	r0, r1
 80034f0:	f000 808d 	beq.w	800360e <HAL_GPIO_Init+0x19a>
 80034f4:	494f      	ldr	r1, [pc, #316]	; (8003634 <HAL_GPIO_Init+0x1c0>)
 80034f6:	4288      	cmp	r0, r1
 80034f8:	f000 808e 	beq.w	8003618 <HAL_GPIO_Init+0x1a4>
 80034fc:	494e      	ldr	r1, [pc, #312]	; (8003638 <HAL_GPIO_Init+0x1c4>)
 80034fe:	4288      	cmp	r0, r1
 8003500:	bf0c      	ite	eq
 8003502:	2103      	moveq	r1, #3
 8003504:	2105      	movne	r1, #5
 8003506:	fa01 f707 	lsl.w	r7, r1, r7
 800350a:	ea4e 0e07 	orr.w	lr, lr, r7
        SYSCFG->EXTICR[position >> 2u] = temp;
 800350e:	f8c2 e008 	str.w	lr, [r2, #8]
        temp = EXTI->RTSR;
 8003512:	68b2      	ldr	r2, [r6, #8]
        temp &= ~(iocurrent);
 8003514:	ea6f 0e0a 	mvn.w	lr, sl
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003518:	02ef      	lsls	r7, r5, #11
        temp &= ~(iocurrent);
 800351a:	bf54      	ite	pl
 800351c:	ea0e 0202 	andpl.w	r2, lr, r2
        {
          temp |= iocurrent;
 8003520:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR = temp;
 8003524:	60b2      	str	r2, [r6, #8]

        temp = EXTI->FTSR;
 8003526:	68f7      	ldr	r7, [r6, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003528:	02a9      	lsls	r1, r5, #10
        temp &= ~(iocurrent);
 800352a:	bf54      	ite	pl
 800352c:	ea0e 0707 	andpl.w	r7, lr, r7
        {
          temp |= iocurrent;
 8003530:	ea4a 0707 	orrmi.w	r7, sl, r7
        }
        EXTI->FTSR = temp;
 8003534:	60f7      	str	r7, [r6, #12]

        temp = EXTI->EMR;
 8003536:	6877      	ldr	r7, [r6, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003538:	03aa      	lsls	r2, r5, #14
        temp &= ~(iocurrent);
 800353a:	bf54      	ite	pl
 800353c:	ea0e 0707 	andpl.w	r7, lr, r7
        {
          temp |= iocurrent;
 8003540:	ea4a 0707 	orrmi.w	r7, sl, r7
        }
        EXTI->EMR = temp;
 8003544:	6077      	str	r7, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003546:	6832      	ldr	r2, [r6, #0]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003548:	03e9      	lsls	r1, r5, #15
        temp &= ~(iocurrent);
 800354a:	bf54      	ite	pl
 800354c:	ea0e 0202 	andpl.w	r2, lr, r2
        {
          temp |= iocurrent;
 8003550:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR = temp;
 8003554:	6032      	str	r2, [r6, #0]
      }
    }

    position++;
 8003556:	3301      	adds	r3, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003558:	fa34 f203 	lsrs.w	r2, r4, r3
 800355c:	f10c 0c02 	add.w	ip, ip, #2
 8003560:	d052      	beq.n	8003608 <HAL_GPIO_Init+0x194>
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003562:	fa0b f803 	lsl.w	r8, fp, r3
    if (iocurrent != 0x00u)
 8003566:	ea18 0a04 	ands.w	sl, r8, r4
 800356a:	d0f4      	beq.n	8003556 <HAL_GPIO_Init+0xe2>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800356c:	9900      	ldr	r1, [sp, #0]
 800356e:	684d      	ldr	r5, [r1, #4]
 8003570:	f005 0203 	and.w	r2, r5, #3
 8003574:	1e57      	subs	r7, r2, #1
 8003576:	2f01      	cmp	r7, #1
 8003578:	d88b      	bhi.n	8003492 <HAL_GPIO_Init+0x1e>
        temp = GPIOx->OSPEEDR;
 800357a:	f8d0 9008 	ldr.w	r9, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800357e:	68cf      	ldr	r7, [r1, #12]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003580:	2103      	movs	r1, #3
 8003582:	fa01 fe0c 	lsl.w	lr, r1, ip
 8003586:	ea29 090e 	bic.w	r9, r9, lr
        temp |= (GPIO_Init->Speed << (position * 2u));
 800358a:	fa07 f70c 	lsl.w	r7, r7, ip
 800358e:	ea47 0709 	orr.w	r7, r7, r9
        GPIOx->OSPEEDR = temp;
 8003592:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003594:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003596:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800359a:	f3c5 1700 	ubfx	r7, r5, #4, #1
 800359e:	409f      	lsls	r7, r3
 80035a0:	ea47 0708 	orr.w	r7, r7, r8
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035a4:	ea6f 0e0e 	mvn.w	lr, lr
        GPIOx->OTYPER = temp;
 80035a8:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 80035aa:	68c7      	ldr	r7, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035ac:	9900      	ldr	r1, [sp, #0]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80035ae:	ea07 080e 	and.w	r8, r7, lr
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035b2:	688f      	ldr	r7, [r1, #8]
 80035b4:	fa07 f70c 	lsl.w	r7, r7, ip
 80035b8:	ea47 0708 	orr.w	r7, r7, r8
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035bc:	2a02      	cmp	r2, #2
        GPIOx->PUPDR = temp;
 80035be:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c0:	fa02 f20c 	lsl.w	r2, r2, ip
 80035c4:	f47f af6c 	bne.w	80034a0 <HAL_GPIO_Init+0x2c>
        temp = GPIOx->AFR[position >> 3u];
 80035c8:	ea4f 09d3 	mov.w	r9, r3, lsr #3
 80035cc:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035d0:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 80035d4:	f8d9 1020 	ldr.w	r1, [r9, #32]
 80035d8:	9101      	str	r1, [sp, #4]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035da:	9900      	ldr	r1, [sp, #0]
 80035dc:	690f      	ldr	r7, [r1, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035de:	ea4f 0888 	mov.w	r8, r8, lsl #2
 80035e2:	210f      	movs	r1, #15
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035e4:	fa07 f708 	lsl.w	r7, r7, r8
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80035e8:	fa01 f808 	lsl.w	r8, r1, r8
 80035ec:	9901      	ldr	r1, [sp, #4]
 80035ee:	ea21 0808 	bic.w	r8, r1, r8
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80035f2:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3u] = temp;
 80035f6:	f8c9 7020 	str.w	r7, [r9, #32]
 80035fa:	e751      	b.n	80034a0 <HAL_GPIO_Init+0x2c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80035fc:	2103      	movs	r1, #3
 80035fe:	fa01 fe0c 	lsl.w	lr, r1, ip
 8003602:	ea6f 0e0e 	mvn.w	lr, lr
 8003606:	e7d0      	b.n	80035aa <HAL_GPIO_Init+0x136>
  }
}
 8003608:	b005      	add	sp, #20
 800360a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800360e:	fa0b f707 	lsl.w	r7, fp, r7
 8003612:	ea4e 0e07 	orr.w	lr, lr, r7
 8003616:	e77a      	b.n	800350e <HAL_GPIO_Init+0x9a>
 8003618:	f04f 0802 	mov.w	r8, #2
 800361c:	fa08 f707 	lsl.w	r7, r8, r7
 8003620:	ea4e 0e07 	orr.w	lr, lr, r7
 8003624:	e773      	b.n	800350e <HAL_GPIO_Init+0x9a>
 8003626:	bf00      	nop
 8003628:	40010400 	.word	0x40010400
 800362c:	40021000 	.word	0x40021000
 8003630:	48000400 	.word	0x48000400
 8003634:	48000800 	.word	0x48000800
 8003638:	48000c00 	.word	0x48000c00

0800363c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800363c:	b10a      	cbz	r2, 8003642 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800363e:	6181      	str	r1, [r0, #24]
 8003640:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003642:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8003644:	4770      	bx	lr
 8003646:	bf00      	nop

08003648 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003648:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800364a:	ea01 0203 	and.w	r2, r1, r3
 800364e:	ea21 0103 	bic.w	r1, r1, r3
 8003652:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8003656:	6181      	str	r1, [r0, #24]
}
 8003658:	4770      	bx	lr
 800365a:	bf00      	nop

0800365c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800365c:	6803      	ldr	r3, [r0, #0]
{
 800365e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003662:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003664:	6998      	ldr	r0, [r3, #24]
 8003666:	0740      	lsls	r0, r0, #29
 8003668:	d469      	bmi.n	800373e <I2C_WaitOnRXNEFlagUntilTimeout+0xe2>
 800366a:	460f      	mov	r7, r1
 800366c:	4690      	mov	r8, r2
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800366e:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 8003672:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003674:	f014 0410 	ands.w	r4, r4, #16
 8003678:	d064      	beq.n	8003744 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  uint32_t error_code = 0;
 800367a:	2500      	movs	r5, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800367c:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 8003680:	4644      	mov	r4, r8
  HAL_StatusTypeDef status = HAL_OK;
 8003682:	46aa      	mov	sl, r5
 8003684:	1c79      	adds	r1, r7, #1

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003686:	699a      	ldr	r2, [r3, #24]
 8003688:	d15e      	bne.n	8003748 <I2C_WaitOnRXNEFlagUntilTimeout+0xec>
 800368a:	0690      	lsls	r0, r2, #26
 800368c:	f100 808a 	bmi.w	80037a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x148>
 8003690:	f1ba 0f00 	cmp.w	sl, #0
 8003694:	d104      	bne.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
 8003696:	699c      	ldr	r4, [r3, #24]
 8003698:	06a1      	lsls	r1, r4, #26
 800369a:	d5fc      	bpl.n	8003696 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800369c:	2220      	movs	r2, #32
 800369e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036a0:	f045 0404 	orr.w	r4, r5, #4

    status = HAL_ERROR;
 80036a4:	2101      	movs	r1, #1
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036a6:	699a      	ldr	r2, [r3, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036a8:	05d0      	lsls	r0, r2, #23
 80036aa:	d530      	bpl.n	800370e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  {
    error_code |= HAL_I2C_ERROR_BERR;

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036ac:	f44f 7180 	mov.w	r1, #256	; 0x100

    status = HAL_ERROR;
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036b0:	0555      	lsls	r5, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036b2:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 80036b4:	f044 0401 	orr.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036b8:	d504      	bpl.n	80036c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
  {
    error_code |= HAL_I2C_ERROR_OVR;

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80036ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80036be:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 80036c0:	f044 0408 	orr.w	r4, r4, #8

    status = HAL_ERROR;
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80036c4:	0591      	lsls	r1, r2, #22
 80036c6:	d504      	bpl.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
  {
    error_code |= HAL_I2C_ERROR_ARLO;

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 80036cc:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036d0:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80036d2:	699a      	ldr	r2, [r3, #24]
 80036d4:	0797      	lsls	r7, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 80036d6:	bf44      	itt	mi
 80036d8:	2200      	movmi	r2, #0
 80036da:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036dc:	699a      	ldr	r2, [r3, #24]
 80036de:	07d5      	lsls	r5, r2, #31
 80036e0:	d403      	bmi.n	80036ea <I2C_WaitOnRXNEFlagUntilTimeout+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80036e2:	699a      	ldr	r2, [r3, #24]
 80036e4:	f042 0201 	orr.w	r2, r2, #1
 80036e8:	619a      	str	r2, [r3, #24]
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	4845      	ldr	r0, [pc, #276]	; (8003804 <I2C_WaitOnRXNEFlagUntilTimeout+0x1a8>)
 80036ee:	4002      	ands	r2, r0
 80036f0:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 80036f2:	6c73      	ldr	r3, [r6, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f4:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80036f6:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80036f8:	431c      	orrs	r4, r3
 80036fa:	6474      	str	r4, [r6, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036fc:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003700:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003704:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
      return HAL_ERROR;
 8003708:	2001      	movs	r0, #1
}
 800370a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800370e:	0550      	lsls	r0, r2, #21
 8003710:	d4d3      	bmi.n	80036ba <I2C_WaitOnRXNEFlagUntilTimeout+0x5e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003712:	0592      	lsls	r2, r2, #22
 8003714:	d4d8      	bmi.n	80036c8 <I2C_WaitOnRXNEFlagUntilTimeout+0x6c>
  if (status != HAL_OK)
 8003716:	2900      	cmp	r1, #0
 8003718:	d1db      	bne.n	80036d2 <I2C_WaitOnRXNEFlagUntilTimeout+0x76>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800371a:	699a      	ldr	r2, [r3, #24]
 800371c:	0692      	lsls	r2, r2, #26
 800371e:	d446      	bmi.n	80037ae <I2C_WaitOnRXNEFlagUntilTimeout+0x152>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003720:	f7ff f958 	bl	80029d4 <HAL_GetTick>
 8003724:	eba0 0008 	sub.w	r0, r0, r8
 8003728:	42b8      	cmp	r0, r7
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800372a:	6833      	ldr	r3, [r6, #0]
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800372c:	d800      	bhi.n	8003730 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>
 800372e:	b91f      	cbnz	r7, 8003738 <I2C_WaitOnRXNEFlagUntilTimeout+0xdc>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	f012 0204 	ands.w	r2, r2, #4
 8003736:	d05a      	beq.n	80037ee <I2C_WaitOnRXNEFlagUntilTimeout+0x192>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	0751      	lsls	r1, r2, #29
 800373c:	d599      	bpl.n	8003672 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800373e:	2000      	movs	r0, #0
}
 8003740:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003744:	4621      	mov	r1, r4
 8003746:	e7ae      	b.n	80036a6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003748:	0692      	lsls	r2, r2, #26
 800374a:	d42b      	bmi.n	80037a4 <I2C_WaitOnRXNEFlagUntilTimeout+0x148>
 800374c:	f1ba 0f00 	cmp.w	sl, #0
 8003750:	d1a6      	bne.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003752:	f7ff f93f 	bl	80029d4 <HAL_GetTick>
 8003756:	1b00      	subs	r0, r0, r4
 8003758:	4287      	cmp	r7, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800375a:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800375c:	d301      	bcc.n	8003762 <I2C_WaitOnRXNEFlagUntilTimeout+0x106>
 800375e:	2f00      	cmp	r7, #0
 8003760:	d190      	bne.n	8003684 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003762:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8003764:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003768:	6999      	ldr	r1, [r3, #24]
 800376a:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 800376c:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800376e:	d501      	bpl.n	8003774 <I2C_WaitOnRXNEFlagUntilTimeout+0x118>
 8003770:	0441      	lsls	r1, r0, #17
 8003772:	d50c      	bpl.n	800378e <I2C_WaitOnRXNEFlagUntilTimeout+0x132>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003774:	699a      	ldr	r2, [r3, #24]
 8003776:	0690      	lsls	r0, r2, #26
 8003778:	d484      	bmi.n	8003684 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800377a:	f7ff f92b 	bl	80029d4 <HAL_GetTick>
 800377e:	1b00      	subs	r0, r0, r4
 8003780:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003782:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003784:	d9f6      	bls.n	8003774 <I2C_WaitOnRXNEFlagUntilTimeout+0x118>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003786:	2520      	movs	r5, #32
              status = HAL_ERROR;
 8003788:	f04f 0a01 	mov.w	sl, #1
 800378c:	e77a      	b.n	8003684 <I2C_WaitOnRXNEFlagUntilTimeout+0x28>
              (tmp1 != I2C_CR2_STOP) && \
 800378e:	2a20      	cmp	r2, #32
 8003790:	d0f0      	beq.n	8003774 <I2C_WaitOnRXNEFlagUntilTimeout+0x118>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003798:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800379a:	f7ff f91b 	bl	80029d4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800379e:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
 80037a0:	4604      	mov	r4, r0
 80037a2:	e7e7      	b.n	8003774 <I2C_WaitOnRXNEFlagUntilTimeout+0x118>
    if (status == HAL_OK)
 80037a4:	f1ba 0f00 	cmp.w	sl, #0
 80037a8:	f43f af78 	beq.w	800369c <I2C_WaitOnRXNEFlagUntilTimeout+0x40>
 80037ac:	e778      	b.n	80036a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x44>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037ae:	699a      	ldr	r2, [r3, #24]
 80037b0:	0750      	lsls	r0, r2, #29
 80037b2:	d502      	bpl.n	80037ba <I2C_WaitOnRXNEFlagUntilTimeout+0x15e>
 80037b4:	8d32      	ldrh	r2, [r6, #40]	; 0x28
 80037b6:	2a00      	cmp	r2, #0
 80037b8:	d1c1      	bne.n	800373e <I2C_WaitOnRXNEFlagUntilTimeout+0xe2>
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80037ba:	699a      	ldr	r2, [r3, #24]
 80037bc:	f012 0210 	ands.w	r2, r2, #16
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037c0:	bf1c      	itt	ne
 80037c2:	2110      	movne	r1, #16
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80037c4:	2204      	movne	r2, #4
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037c6:	f04f 0420 	mov.w	r4, #32
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037ca:	bf18      	it	ne
 80037cc:	61d9      	strne	r1, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037ce:	6472      	str	r2, [r6, #68]	; 0x44
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80037d0:	61dc      	str	r4, [r3, #28]
        I2C_RESET_CR2(hi2c);
 80037d2:	685a      	ldr	r2, [r3, #4]
 80037d4:	490b      	ldr	r1, [pc, #44]	; (8003804 <I2C_WaitOnRXNEFlagUntilTimeout+0x1a8>)
 80037d6:	400a      	ands	r2, r1
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037d8:	2100      	movs	r1, #0
        I2C_RESET_CR2(hi2c);
 80037da:	605a      	str	r2, [r3, #4]
        hi2c->State = HAL_I2C_STATE_READY;
 80037dc:	f886 4041 	strb.w	r4, [r6, #65]	; 0x41
        __HAL_UNLOCK(hi2c);
 80037e0:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e4:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
        return HAL_ERROR;
 80037e8:	2001      	movs	r0, #1
}
 80037ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ee:	6c73      	ldr	r3, [r6, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 80037f0:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
        hi2c->State = HAL_I2C_STATE_READY;
 80037f4:	2120      	movs	r1, #32
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037f6:	430b      	orrs	r3, r1
 80037f8:	6473      	str	r3, [r6, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037fa:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
        return HAL_ERROR;
 80037fe:	2001      	movs	r0, #1
}
 8003800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003804:	fe00e800 	.word	0xfe00e800

08003808 <I2C_WaitOnSTOPFlagUntilTimeout>:
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003808:	6803      	ldr	r3, [r0, #0]
{
 800380a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800380e:	4606      	mov	r6, r0
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003810:	6998      	ldr	r0, [r3, #24]
 8003812:	0680      	lsls	r0, r0, #26
 8003814:	d462      	bmi.n	80038dc <I2C_WaitOnSTOPFlagUntilTimeout+0xd4>
 8003816:	460f      	mov	r7, r1
 8003818:	4690      	mov	r8, r2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381a:	f04f 0910 	mov.w	r9, #16
  uint32_t itflag   = hi2c->Instance->ISR;
 800381e:	699c      	ldr	r4, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003820:	f014 0410 	ands.w	r4, r4, #16
 8003824:	d06f      	beq.n	8003906 <I2C_WaitOnSTOPFlagUntilTimeout+0xfe>
  uint32_t error_code = 0;
 8003826:	2500      	movs	r5, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003828:	f8c3 901c 	str.w	r9, [r3, #28]
  uint32_t tickstart = Tickstart;
 800382c:	4644      	mov	r4, r8
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	46aa      	mov	sl, r5
 8003830:	1c79      	adds	r1, r7, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	d169      	bne.n	800390a <I2C_WaitOnSTOPFlagUntilTimeout+0x102>
 8003836:	0690      	lsls	r0, r2, #26
 8003838:	f100 8096 	bmi.w	8003968 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
 800383c:	f1ba 0f00 	cmp.w	sl, #0
 8003840:	d104      	bne.n	800384c <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
 8003842:	699c      	ldr	r4, [r3, #24]
 8003844:	06a1      	lsls	r1, r4, #26
 8003846:	d5fc      	bpl.n	8003842 <I2C_WaitOnSTOPFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003848:	2220      	movs	r2, #32
 800384a:	61da      	str	r2, [r3, #28]
    error_code |= HAL_I2C_ERROR_AF;
 800384c:	f045 0404 	orr.w	r4, r5, #4
    status = HAL_ERROR;
 8003850:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8003852:	699a      	ldr	r2, [r3, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003854:	05d0      	lsls	r0, r2, #23
 8003856:	d530      	bpl.n	80038ba <I2C_WaitOnSTOPFlagUntilTimeout+0xb2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003858:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800385c:	0555      	lsls	r5, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800385e:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8003860:	f044 0401 	orr.w	r4, r4, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003864:	d504      	bpl.n	8003870 <I2C_WaitOnSTOPFlagUntilTimeout+0x68>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003866:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800386a:	61d9      	str	r1, [r3, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 800386c:	f044 0408 	orr.w	r4, r4, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003870:	0597      	lsls	r7, r2, #22
 8003872:	d504      	bpl.n	800387e <I2C_WaitOnSTOPFlagUntilTimeout+0x76>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003874:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003878:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800387c:	61da      	str	r2, [r3, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800387e:	699a      	ldr	r2, [r3, #24]
 8003880:	0790      	lsls	r0, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003882:	bf44      	itt	mi
 8003884:	2200      	movmi	r2, #0
 8003886:	629a      	strmi	r2, [r3, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003888:	699a      	ldr	r2, [r3, #24]
 800388a:	07d1      	lsls	r1, r2, #31
 800388c:	d403      	bmi.n	8003896 <I2C_WaitOnSTOPFlagUntilTimeout+0x8e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800388e:	699a      	ldr	r2, [r3, #24]
 8003890:	f042 0201 	orr.w	r2, r2, #1
 8003894:	619a      	str	r2, [r3, #24]
    I2C_RESET_CR2(hi2c);
 8003896:	685a      	ldr	r2, [r3, #4]
 8003898:	4836      	ldr	r0, [pc, #216]	; (8003974 <I2C_WaitOnSTOPFlagUntilTimeout+0x16c>)
 800389a:	4002      	ands	r2, r0
 800389c:	605a      	str	r2, [r3, #4]
    hi2c->ErrorCode |= error_code;
 800389e:	6c73      	ldr	r3, [r6, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a0:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80038a2:	2220      	movs	r2, #32
    hi2c->ErrorCode |= error_code;
 80038a4:	431c      	orrs	r4, r3
 80038a6:	6474      	str	r4, [r6, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 80038a8:	f886 1040 	strb.w	r1, [r6, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 80038ac:	f886 2041 	strb.w	r2, [r6, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038b0:	f886 1042 	strb.w	r1, [r6, #66]	; 0x42
      return HAL_ERROR;
 80038b4:	2001      	movs	r0, #1
}
 80038b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80038ba:	0550      	lsls	r0, r2, #21
 80038bc:	d4d3      	bmi.n	8003866 <I2C_WaitOnSTOPFlagUntilTimeout+0x5e>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80038be:	0595      	lsls	r5, r2, #22
 80038c0:	d4d8      	bmi.n	8003874 <I2C_WaitOnSTOPFlagUntilTimeout+0x6c>
  if (status != HAL_OK)
 80038c2:	2900      	cmp	r1, #0
 80038c4:	d1db      	bne.n	800387e <I2C_WaitOnSTOPFlagUntilTimeout+0x76>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038c6:	f7ff f885 	bl	80029d4 <HAL_GetTick>
 80038ca:	eba0 0008 	sub.w	r0, r0, r8
 80038ce:	42b8      	cmp	r0, r7
 80038d0:	d807      	bhi.n	80038e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
 80038d2:	b137      	cbz	r7, 80038e2 <I2C_WaitOnSTOPFlagUntilTimeout+0xda>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80038d4:	6833      	ldr	r3, [r6, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038d6:	699a      	ldr	r2, [r3, #24]
 80038d8:	0692      	lsls	r2, r2, #26
 80038da:	d5a0      	bpl.n	800381e <I2C_WaitOnSTOPFlagUntilTimeout+0x16>
  return HAL_OK;
 80038dc:	2000      	movs	r0, #0
}
 80038de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80038e2:	6833      	ldr	r3, [r6, #0]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	f012 0220 	ands.w	r2, r2, #32
 80038ea:	d1f4      	bne.n	80038d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xce>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038ec:	6c73      	ldr	r3, [r6, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 80038ee:	f886 2040 	strb.w	r2, [r6, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 80038f2:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80038f4:	430b      	orrs	r3, r1
 80038f6:	6473      	str	r3, [r6, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80038f8:	f886 1041 	strb.w	r1, [r6, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80038fc:	f886 2042 	strb.w	r2, [r6, #66]	; 0x42
          __HAL_UNLOCK(hi2c);
 8003900:	2001      	movs	r0, #1
}
 8003902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  HAL_StatusTypeDef status = HAL_OK;
 8003906:	4621      	mov	r1, r4
 8003908:	e7a3      	b.n	8003852 <I2C_WaitOnSTOPFlagUntilTimeout+0x4a>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800390a:	0692      	lsls	r2, r2, #26
 800390c:	d42c      	bmi.n	8003968 <I2C_WaitOnSTOPFlagUntilTimeout+0x160>
 800390e:	f1ba 0f00 	cmp.w	sl, #0
 8003912:	d19b      	bne.n	800384c <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003914:	f7ff f85e 	bl	80029d4 <HAL_GetTick>
 8003918:	1b00      	subs	r0, r0, r4
 800391a:	4287      	cmp	r7, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800391c:	6833      	ldr	r3, [r6, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800391e:	d301      	bcc.n	8003924 <I2C_WaitOnSTOPFlagUntilTimeout+0x11c>
 8003920:	2f00      	cmp	r7, #0
 8003922:	d185      	bne.n	8003830 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003924:	6858      	ldr	r0, [r3, #4]
          tmp2 = hi2c->Mode;
 8003926:	f896 2042 	ldrb.w	r2, [r6, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800392a:	6999      	ldr	r1, [r3, #24]
 800392c:	0409      	lsls	r1, r1, #16
          tmp2 = hi2c->Mode;
 800392e:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003930:	d501      	bpl.n	8003936 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
 8003932:	0441      	lsls	r1, r0, #17
 8003934:	d50d      	bpl.n	8003952 <I2C_WaitOnSTOPFlagUntilTimeout+0x14a>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003936:	699a      	ldr	r2, [r3, #24]
 8003938:	0690      	lsls	r0, r2, #26
 800393a:	f53f af79 	bmi.w	8003830 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800393e:	f7ff f849 	bl	80029d4 <HAL_GetTick>
 8003942:	1b00      	subs	r0, r0, r4
 8003944:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003946:	6833      	ldr	r3, [r6, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003948:	d9f5      	bls.n	8003936 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800394a:	2520      	movs	r5, #32
              status = HAL_ERROR;
 800394c:	f04f 0a01 	mov.w	sl, #1
 8003950:	e76e      	b.n	8003830 <I2C_WaitOnSTOPFlagUntilTimeout+0x28>
              (tmp1 != I2C_CR2_STOP) && \
 8003952:	2a20      	cmp	r2, #32
 8003954:	d0ef      	beq.n	8003936 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003956:	685a      	ldr	r2, [r3, #4]
 8003958:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800395c:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 800395e:	f7ff f839 	bl	80029d4 <HAL_GetTick>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003962:	6833      	ldr	r3, [r6, #0]
            tickstart = HAL_GetTick();
 8003964:	4604      	mov	r4, r0
 8003966:	e7e6      	b.n	8003936 <I2C_WaitOnSTOPFlagUntilTimeout+0x12e>
    if (status == HAL_OK)
 8003968:	f1ba 0f00 	cmp.w	sl, #0
 800396c:	f43f af6c 	beq.w	8003848 <I2C_WaitOnSTOPFlagUntilTimeout+0x40>
 8003970:	e76c      	b.n	800384c <I2C_WaitOnSTOPFlagUntilTimeout+0x44>
 8003972:	bf00      	nop
 8003974:	fe00e800 	.word	0xfe00e800

08003978 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8003978:	2800      	cmp	r0, #0
 800397a:	d04f      	beq.n	8003a1c <HAL_I2C_Init+0xa4>
{
 800397c:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800397e:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 8003982:	4604      	mov	r4, r0
 8003984:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003988:	2b00      	cmp	r3, #0
 800398a:	d042      	beq.n	8003a12 <HAL_I2C_Init+0x9a>
  __HAL_I2C_DISABLE(hi2c);
 800398c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800398e:	2224      	movs	r2, #36	; 0x24
 8003990:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  __HAL_I2C_DISABLE(hi2c);
 8003994:	6819      	ldr	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003996:	6862      	ldr	r2, [r4, #4]
  __HAL_I2C_DISABLE(hi2c);
 8003998:	f021 0101 	bic.w	r1, r1, #1
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800399c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
  __HAL_I2C_DISABLE(hi2c);
 80039a0:	6019      	str	r1, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80039a2:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039a4:	689a      	ldr	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039a6:	68e1      	ldr	r1, [r4, #12]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039ac:	2901      	cmp	r1, #1
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80039ae:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80039b0:	68a2      	ldr	r2, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80039b2:	d02a      	beq.n	8003a0a <HAL_I2C_Init+0x92>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039b4:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80039b8:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80039ba:	609a      	str	r2, [r3, #8]
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80039bc:	bf04      	itt	eq
 80039be:	f44f 6200 	moveq.w	r2, #2048	; 0x800
 80039c2:	605a      	streq	r2, [r3, #4]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039c4:	6859      	ldr	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039c6:	6922      	ldr	r2, [r4, #16]
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80039c8:	f041 7100 	orr.w	r1, r1, #33554432	; 0x2000000
 80039cc:	f441 4100 	orr.w	r1, r1, #32768	; 0x8000
 80039d0:	6059      	str	r1, [r3, #4]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039d2:	6961      	ldr	r1, [r4, #20]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039d4:	68d8      	ldr	r0, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039d6:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80039d8:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039da:	f420 4000 	bic.w	r0, r0, #32768	; 0x8000
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039de:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039e2:	69e1      	ldr	r1, [r4, #28]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80039e4:	60d8      	str	r0, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039e6:	6a20      	ldr	r0, [r4, #32]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80039e8:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80039ea:	4301      	orrs	r1, r0
 80039ec:	6019      	str	r1, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80039ee:	6819      	ldr	r1, [r3, #0]
 80039f0:	f041 0101 	orr.w	r1, r1, #1
 80039f4:	6019      	str	r1, [r3, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039f6:	2200      	movs	r2, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80039f8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039fa:	6462      	str	r2, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80039fc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a00:	6322      	str	r2, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a02:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
  return HAL_OK;
 8003a06:	4610      	mov	r0, r2
}
 8003a08:	bd10      	pop	{r4, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003a0a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a0e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a10:	e7d8      	b.n	80039c4 <HAL_I2C_Init+0x4c>
    hi2c->Lock = HAL_UNLOCKED;
 8003a12:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    HAL_I2C_MspInit(hi2c);
 8003a16:	f7fe fe43 	bl	80026a0 <HAL_I2C_MspInit>
 8003a1a:	e7b7      	b.n	800398c <HAL_I2C_Init+0x14>
    return HAL_ERROR;
 8003a1c:	2001      	movs	r0, #1
}
 8003a1e:	4770      	bx	lr

08003a20 <HAL_I2C_Master_Transmit>:
{
 8003a20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a24:	461d      	mov	r5, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a26:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003a2a:	9e0a      	ldr	r6, [sp, #40]	; 0x28
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a2c:	2b20      	cmp	r3, #32
 8003a2e:	d129      	bne.n	8003a84 <HAL_I2C_Master_Transmit+0x64>
    __HAL_LOCK(hi2c);
 8003a30:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	4604      	mov	r4, r0
 8003a38:	d024      	beq.n	8003a84 <HAL_I2C_Master_Transmit+0x64>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003a40:	468b      	mov	fp, r1
 8003a42:	4617      	mov	r7, r2
 8003a44:	f7fe ffc6 	bl	80029d4 <HAL_GetTick>
 8003a48:	4681      	mov	r9, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a4a:	6820      	ldr	r0, [r4, #0]
 8003a4c:	6983      	ldr	r3, [r0, #24]
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	d51b      	bpl.n	8003a8a <HAL_I2C_Master_Transmit+0x6a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a52:	f7fe ffbf 	bl	80029d4 <HAL_GetTick>
 8003a56:	eba0 0009 	sub.w	r0, r0, r9
 8003a5a:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a5c:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a5e:	d9f5      	bls.n	8003a4c <HAL_I2C_Master_Transmit+0x2c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a60:	6983      	ldr	r3, [r0, #24]
 8003a62:	0419      	lsls	r1, r3, #16
 8003a64:	d5f2      	bpl.n	8003a4c <HAL_I2C_Master_Transmit+0x2c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a66:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a6a:	f043 0320 	orr.w	r3, r3, #32
          hi2c->State = HAL_I2C_STATE_READY;
 8003a6e:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a70:	6463      	str	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8003a72:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a7a:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      return HAL_ERROR;
 8003a7e:	2001      	movs	r0, #1
}
 8003a80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return HAL_BUSY;
 8003a84:	2002      	movs	r0, #2
}
 8003a86:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a8a:	2221      	movs	r2, #33	; 0x21
 8003a8c:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003a92:	2210      	movs	r2, #16
 8003a94:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a98:	6463      	str	r3, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8003a9a:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003a9c:	6363      	str	r3, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003a9e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8003aa0:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003aa2:	b29b      	uxth	r3, r3
 8003aa4:	2bff      	cmp	r3, #255	; 0xff
 8003aa6:	d86b      	bhi.n	8003b80 <HAL_I2C_Master_Transmit+0x160>
      hi2c->XferSize = hi2c->XferCount;
 8003aa8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003aaa:	4999      	ldr	r1, [pc, #612]	; (8003d10 <HAL_I2C_Master_Transmit+0x2f0>)
      hi2c->XferSize = hi2c->XferCount;
 8003aac:	b29b      	uxth	r3, r3
 8003aae:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ab0:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ab2:	6843      	ldr	r3, [r0, #4]
 8003ab4:	4019      	ands	r1, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003ab6:	f3cb 0309 	ubfx	r3, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8003aba:	430b      	orrs	r3, r1
 8003abc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003ac0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ac8:	6043      	str	r3, [r0, #4]
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aca:	f3cb 0b09 	ubfx	fp, fp, #0, #10
    while (hi2c->XferCount > 0U)
 8003ace:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 80cc 	beq.w	8003c70 <HAL_I2C_Master_Transmit+0x250>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003ad8:	f04f 0a20 	mov.w	sl, #32
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003adc:	6985      	ldr	r5, [r0, #24]
 8003ade:	f015 0502 	ands.w	r5, r5, #2
 8003ae2:	f040 80af 	bne.w	8003c44 <HAL_I2C_Master_Transmit+0x224>
  uint32_t itflag   = hi2c->Instance->ISR;
 8003ae6:	6983      	ldr	r3, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003ae8:	f013 0310 	ands.w	r3, r3, #16
 8003aec:	d079      	beq.n	8003be2 <HAL_I2C_Master_Transmit+0x1c2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003aee:	2310      	movs	r3, #16
 8003af0:	61c3      	str	r3, [r0, #28]
  uint32_t tickstart = Tickstart;
 8003af2:	464f      	mov	r7, r9
  HAL_StatusTypeDef status = HAL_OK;
 8003af4:	46a8      	mov	r8, r5
 8003af6:	1c72      	adds	r2, r6, #1
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003af8:	6983      	ldr	r3, [r0, #24]
 8003afa:	d174      	bne.n	8003be6 <HAL_I2C_Master_Transmit+0x1c6>
 8003afc:	0699      	lsls	r1, r3, #26
 8003afe:	f100 80f1 	bmi.w	8003ce4 <HAL_I2C_Master_Transmit+0x2c4>
 8003b02:	f1b8 0f00 	cmp.w	r8, #0
 8003b06:	d104      	bne.n	8003b12 <HAL_I2C_Master_Transmit+0xf2>
 8003b08:	6983      	ldr	r3, [r0, #24]
 8003b0a:	069a      	lsls	r2, r3, #26
 8003b0c:	d5fc      	bpl.n	8003b08 <HAL_I2C_Master_Transmit+0xe8>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b0e:	f8c0 a01c 	str.w	sl, [r0, #28]
    error_code |= HAL_I2C_ERROR_AF;
 8003b12:	f045 0304 	orr.w	r3, r5, #4
    status = HAL_ERROR;
 8003b16:	2101      	movs	r1, #1
  itflag = hi2c->Instance->ISR;
 8003b18:	6982      	ldr	r2, [r0, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003b1a:	05d7      	lsls	r7, r2, #23
 8003b1c:	d540      	bpl.n	8003ba0 <HAL_I2C_Master_Transmit+0x180>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b22:	0556      	lsls	r6, r2, #21
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003b24:	61c1      	str	r1, [r0, #28]
    error_code |= HAL_I2C_ERROR_BERR;
 8003b26:	f043 0301 	orr.w	r3, r3, #1
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003b2a:	d504      	bpl.n	8003b36 <HAL_I2C_Master_Transmit+0x116>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003b2c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003b30:	61c1      	str	r1, [r0, #28]
    error_code |= HAL_I2C_ERROR_OVR;
 8003b32:	f043 0308 	orr.w	r3, r3, #8
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003b36:	0591      	lsls	r1, r2, #22
 8003b38:	d504      	bpl.n	8003b44 <HAL_I2C_Master_Transmit+0x124>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b3a:	f44f 7200 	mov.w	r2, #512	; 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8003b3e:	f043 0302 	orr.w	r3, r3, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003b42:	61c2      	str	r2, [r0, #28]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b44:	6982      	ldr	r2, [r0, #24]
 8003b46:	0797      	lsls	r7, r2, #30
    hi2c->Instance->TXDR = 0x00U;
 8003b48:	bf44      	itt	mi
 8003b4a:	2200      	movmi	r2, #0
 8003b4c:	6282      	strmi	r2, [r0, #40]	; 0x28
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b4e:	6982      	ldr	r2, [r0, #24]
 8003b50:	07d6      	lsls	r6, r2, #31
 8003b52:	d403      	bmi.n	8003b5c <HAL_I2C_Master_Transmit+0x13c>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b54:	6982      	ldr	r2, [r0, #24]
 8003b56:	f042 0201 	orr.w	r2, r2, #1
 8003b5a:	6182      	str	r2, [r0, #24]
    I2C_RESET_CR2(hi2c);
 8003b5c:	6842      	ldr	r2, [r0, #4]
 8003b5e:	4d6d      	ldr	r5, [pc, #436]	; (8003d14 <HAL_I2C_Master_Transmit+0x2f4>)
 8003b60:	402a      	ands	r2, r5
 8003b62:	6042      	str	r2, [r0, #4]
    hi2c->ErrorCode |= error_code;
 8003b64:	6c62      	ldr	r2, [r4, #68]	; 0x44
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b66:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8003b68:	2020      	movs	r0, #32
    hi2c->ErrorCode |= error_code;
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	6463      	str	r3, [r4, #68]	; 0x44
    __HAL_UNLOCK(hi2c);
 8003b6e:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    hi2c->State = HAL_I2C_STATE_READY;
 8003b72:	f884 0041 	strb.w	r0, [r4, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b76:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
        return HAL_ERROR;
 8003b7a:	2001      	movs	r0, #1
}
 8003b7c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b80:	6843      	ldr	r3, [r0, #4]
 8003b82:	4a63      	ldr	r2, [pc, #396]	; (8003d10 <HAL_I2C_Master_Transmit+0x2f0>)
 8003b84:	401a      	ands	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b86:	f3cb 0309 	ubfx	r3, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 8003b90:	f443 3390 	orr.w	r3, r3, #73728	; 0x12000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003b94:	22ff      	movs	r2, #255	; 0xff
 8003b96:	8522      	strh	r2, [r4, #40]	; 0x28
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003b98:	f3cb 0b09 	ubfx	fp, fp, #0, #10
  MODIFY_REG(hi2c->Instance->CR2, \
 8003b9c:	6043      	str	r3, [r0, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003b9e:	e796      	b.n	8003ace <HAL_I2C_Master_Transmit+0xae>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003ba0:	0555      	lsls	r5, r2, #21
 8003ba2:	d4c3      	bmi.n	8003b2c <HAL_I2C_Master_Transmit+0x10c>
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003ba4:	0592      	lsls	r2, r2, #22
 8003ba6:	d4c8      	bmi.n	8003b3a <HAL_I2C_Master_Transmit+0x11a>
  if (status != HAL_OK)
 8003ba8:	2900      	cmp	r1, #0
 8003baa:	d1cb      	bne.n	8003b44 <HAL_I2C_Master_Transmit+0x124>
    if (Timeout != HAL_MAX_DELAY)
 8003bac:	1c73      	adds	r3, r6, #1
 8003bae:	d095      	beq.n	8003adc <HAL_I2C_Master_Transmit+0xbc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb0:	f7fe ff10 	bl	80029d4 <HAL_GetTick>
 8003bb4:	eba0 0009 	sub.w	r0, r0, r9
 8003bb8:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003bba:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbc:	d301      	bcc.n	8003bc2 <HAL_I2C_Master_Transmit+0x1a2>
 8003bbe:	2e00      	cmp	r6, #0
 8003bc0:	d18c      	bne.n	8003adc <HAL_I2C_Master_Transmit+0xbc>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8003bc2:	6983      	ldr	r3, [r0, #24]
 8003bc4:	f013 0302 	ands.w	r3, r3, #2
 8003bc8:	d188      	bne.n	8003adc <HAL_I2C_Master_Transmit+0xbc>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bca:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8003bcc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	6462      	str	r2, [r4, #68]	; 0x44
          return HAL_ERROR;
 8003bd6:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8003bd8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
 8003be0:	e751      	b.n	8003a86 <HAL_I2C_Master_Transmit+0x66>
  HAL_StatusTypeDef status = HAL_OK;
 8003be2:	4619      	mov	r1, r3
 8003be4:	e798      	b.n	8003b18 <HAL_I2C_Master_Transmit+0xf8>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003be6:	069b      	lsls	r3, r3, #26
 8003be8:	d47c      	bmi.n	8003ce4 <HAL_I2C_Master_Transmit+0x2c4>
 8003bea:	f1b8 0f00 	cmp.w	r8, #0
 8003bee:	d190      	bne.n	8003b12 <HAL_I2C_Master_Transmit+0xf2>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bf0:	f7fe fef0 	bl	80029d4 <HAL_GetTick>
 8003bf4:	1bc0      	subs	r0, r0, r7
 8003bf6:	4286      	cmp	r6, r0
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003bf8:	6820      	ldr	r0, [r4, #0]
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003bfa:	d302      	bcc.n	8003c02 <HAL_I2C_Master_Transmit+0x1e2>
 8003bfc:	2e00      	cmp	r6, #0
 8003bfe:	f47f af7a 	bne.w	8003af6 <HAL_I2C_Master_Transmit+0xd6>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003c02:	6841      	ldr	r1, [r0, #4]
          tmp2 = hi2c->Mode;
 8003c04:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c08:	6982      	ldr	r2, [r0, #24]
 8003c0a:	0412      	lsls	r2, r2, #16
          tmp2 = hi2c->Mode;
 8003c0c:	b2db      	uxtb	r3, r3
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003c0e:	d50b      	bpl.n	8003c28 <HAL_I2C_Master_Transmit+0x208>
 8003c10:	044a      	lsls	r2, r1, #17
 8003c12:	d409      	bmi.n	8003c28 <HAL_I2C_Master_Transmit+0x208>
              (tmp1 != I2C_CR2_STOP) && \
 8003c14:	2b20      	cmp	r3, #32
 8003c16:	d007      	beq.n	8003c28 <HAL_I2C_Master_Transmit+0x208>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003c18:	6843      	ldr	r3, [r0, #4]
 8003c1a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c1e:	6043      	str	r3, [r0, #4]
            tickstart = HAL_GetTick();
 8003c20:	f7fe fed8 	bl	80029d4 <HAL_GetTick>
 8003c24:	4607      	mov	r7, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003c26:	6820      	ldr	r0, [r4, #0]
 8003c28:	6983      	ldr	r3, [r0, #24]
 8003c2a:	0699      	lsls	r1, r3, #26
 8003c2c:	f53f af63 	bmi.w	8003af6 <HAL_I2C_Master_Transmit+0xd6>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c30:	f7fe fed0 	bl	80029d4 <HAL_GetTick>
 8003c34:	1bc0      	subs	r0, r0, r7
 8003c36:	2819      	cmp	r0, #25
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003c38:	6820      	ldr	r0, [r4, #0]
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003c3a:	d9f5      	bls.n	8003c28 <HAL_I2C_Master_Transmit+0x208>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003c3c:	2520      	movs	r5, #32
              status = HAL_ERROR;
 8003c3e:	f04f 0801 	mov.w	r8, #1
 8003c42:	e758      	b.n	8003af6 <HAL_I2C_Master_Transmit+0xd6>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c44:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003c46:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003c48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c4c:	6282      	str	r2, [r0, #40]	; 0x28
      hi2c->XferCount--;
 8003c4e:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8003c50:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003c52:	3a01      	subs	r2, #1
 8003c54:	b292      	uxth	r2, r2
 8003c56:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c58:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c5e:	b292      	uxth	r2, r2
      hi2c->XferSize--;
 8003c60:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003c62:	b102      	cbz	r2, 8003c66 <HAL_I2C_Master_Transmit+0x246>
 8003c64:	b343      	cbz	r3, 8003cb8 <HAL_I2C_Master_Transmit+0x298>
    while (hi2c->XferCount > 0U)
 8003c66:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f47f af36 	bne.w	8003adc <HAL_I2C_Master_Transmit+0xbc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c70:	464a      	mov	r2, r9
 8003c72:	4631      	mov	r1, r6
 8003c74:	4620      	mov	r0, r4
 8003c76:	f7ff fdc7 	bl	8003808 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d146      	bne.n	8003d0c <HAL_I2C_Master_Transmit+0x2ec>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c7e:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003c80:	4d24      	ldr	r5, [pc, #144]	; (8003d14 <HAL_I2C_Master_Transmit+0x2f4>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003c82:	2120      	movs	r1, #32
 8003c84:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	402a      	ands	r2, r5
 8003c8a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003c8c:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003c90:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003c94:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003c98:	e6f5      	b.n	8003a86 <HAL_I2C_Master_Transmit+0x66>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c9a:	6983      	ldr	r3, [r0, #24]
 8003c9c:	061a      	lsls	r2, r3, #24
 8003c9e:	d410      	bmi.n	8003cc2 <HAL_I2C_Master_Transmit+0x2a2>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ca0:	f7fe fe98 	bl	80029d4 <HAL_GetTick>
 8003ca4:	eba0 0009 	sub.w	r0, r0, r9
 8003ca8:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003caa:	6820      	ldr	r0, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cac:	d300      	bcc.n	8003cb0 <HAL_I2C_Master_Transmit+0x290>
 8003cae:	b91e      	cbnz	r6, 8003cb8 <HAL_I2C_Master_Transmit+0x298>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003cb0:	6983      	ldr	r3, [r0, #24]
 8003cb2:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003cb6:	d088      	beq.n	8003bca <HAL_I2C_Master_Transmit+0x1aa>
 8003cb8:	1c75      	adds	r5, r6, #1
 8003cba:	d1ee      	bne.n	8003c9a <HAL_I2C_Master_Transmit+0x27a>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cbc:	6983      	ldr	r3, [r0, #24]
 8003cbe:	0619      	lsls	r1, r3, #24
 8003cc0:	d5fc      	bpl.n	8003cbc <HAL_I2C_Master_Transmit+0x29c>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003cc2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	2bff      	cmp	r3, #255	; 0xff
 8003cc8:	d911      	bls.n	8003cee <HAL_I2C_Master_Transmit+0x2ce>
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cca:	6843      	ldr	r3, [r0, #4]
 8003ccc:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <HAL_I2C_Master_Transmit+0x2f8>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	ea4b 0303 	orr.w	r3, fp, r3
 8003cd4:	f043 73ff 	orr.w	r3, r3, #33423360	; 0x1fe0000
 8003cd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003cdc:	22ff      	movs	r2, #255	; 0xff
 8003cde:	8522      	strh	r2, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ce0:	6043      	str	r3, [r0, #4]
}
 8003ce2:	e7c0      	b.n	8003c66 <HAL_I2C_Master_Transmit+0x246>
    if (status == HAL_OK)
 8003ce4:	f1b8 0f00 	cmp.w	r8, #0
 8003ce8:	f43f af11 	beq.w	8003b0e <HAL_I2C_Master_Transmit+0xee>
 8003cec:	e711      	b.n	8003b12 <HAL_I2C_Master_Transmit+0xf2>
          hi2c->XferSize = hi2c->XferCount;
 8003cee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cf0:	4909      	ldr	r1, [pc, #36]	; (8003d18 <HAL_I2C_Master_Transmit+0x2f8>)
          hi2c->XferSize = hi2c->XferCount;
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003cf6:	b2da      	uxtb	r2, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003cf8:	6843      	ldr	r3, [r0, #4]
 8003cfa:	400b      	ands	r3, r1
 8003cfc:	ea4b 0303 	orr.w	r3, fp, r3
 8003d00:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8003d04:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d08:	6043      	str	r3, [r0, #4]
}
 8003d0a:	e7ac      	b.n	8003c66 <HAL_I2C_Master_Transmit+0x246>
      return HAL_ERROR;
 8003d0c:	2001      	movs	r0, #1
 8003d0e:	e6ba      	b.n	8003a86 <HAL_I2C_Master_Transmit+0x66>
 8003d10:	fc009800 	.word	0xfc009800
 8003d14:	fe00e800 	.word	0xfe00e800
 8003d18:	fc009c00 	.word	0xfc009c00

08003d1c <HAL_I2C_Master_Receive>:
{
 8003d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d20:	4698      	mov	r8, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d22:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
{
 8003d26:	9e08      	ldr	r6, [sp, #32]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d28:	2b20      	cmp	r3, #32
 8003d2a:	d128      	bne.n	8003d7e <HAL_I2C_Master_Receive+0x62>
    __HAL_LOCK(hi2c);
 8003d2c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	4604      	mov	r4, r0
 8003d34:	d023      	beq.n	8003d7e <HAL_I2C_Master_Receive+0x62>
 8003d36:	2301      	movs	r3, #1
 8003d38:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tickstart = HAL_GetTick();
 8003d3c:	4689      	mov	r9, r1
 8003d3e:	4617      	mov	r7, r2
 8003d40:	f7fe fe48 	bl	80029d4 <HAL_GetTick>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d44:	6823      	ldr	r3, [r4, #0]
    tickstart = HAL_GetTick();
 8003d46:	4605      	mov	r5, r0
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d48:	699a      	ldr	r2, [r3, #24]
 8003d4a:	0411      	lsls	r1, r2, #16
 8003d4c:	d51a      	bpl.n	8003d84 <HAL_I2C_Master_Receive+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d4e:	f7fe fe41 	bl	80029d4 <HAL_GetTick>
 8003d52:	1b40      	subs	r0, r0, r5
 8003d54:	2819      	cmp	r0, #25
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d56:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d58:	d9f6      	bls.n	8003d48 <HAL_I2C_Master_Receive+0x2c>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003d5a:	699a      	ldr	r2, [r3, #24]
 8003d5c:	0412      	lsls	r2, r2, #16
 8003d5e:	d5f3      	bpl.n	8003d48 <HAL_I2C_Master_Receive+0x2c>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d60:	6c63      	ldr	r3, [r4, #68]	; 0x44
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d62:	2200      	movs	r2, #0
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d64:	f043 0320 	orr.w	r3, r3, #32
          hi2c->State = HAL_I2C_STATE_READY;
 8003d68:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003d6a:	6463      	str	r3, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8003d6c:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d74:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
      return HAL_ERROR;
 8003d78:	2001      	movs	r0, #1
}
 8003d7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 8003d7e:	2002      	movs	r0, #2
}
 8003d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003d84:	2122      	movs	r1, #34	; 0x22
 8003d86:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8a:	2200      	movs	r2, #0
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003d8c:	2110      	movs	r1, #16
 8003d8e:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d92:	6462      	str	r2, [r4, #68]	; 0x44
    hi2c->XferCount = Size;
 8003d94:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003d98:	6362      	str	r2, [r4, #52]	; 0x34
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d9a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
    hi2c->pBuffPtr  = pData;
 8003d9c:	6267      	str	r7, [r4, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003d9e:	b292      	uxth	r2, r2
 8003da0:	2aff      	cmp	r2, #255	; 0xff
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003da2:	f3c9 0709 	ubfx	r7, r9, #0, #10
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003da6:	d865      	bhi.n	8003e74 <HAL_I2C_Master_Receive+0x158>
      hi2c->XferSize = hi2c->XferCount;
 8003da8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  MODIFY_REG(hi2c->Instance->CR2, \
 8003daa:	484e      	ldr	r0, [pc, #312]	; (8003ee4 <HAL_I2C_Master_Receive+0x1c8>)
      hi2c->XferSize = hi2c->XferCount;
 8003dac:	b292      	uxth	r2, r2
 8003dae:	8522      	strh	r2, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003db0:	b2d1      	uxtb	r1, r2
  MODIFY_REG(hi2c->Instance->CR2, \
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	4002      	ands	r2, r0
 8003db6:	433a      	orrs	r2, r7
 8003db8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003dbc:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
 8003dc0:	f442 5210 	orr.w	r2, r2, #9216	; 0x2400
 8003dc4:	605a      	str	r2, [r3, #4]
    while (hi2c->XferCount > 0U)
 8003dc6:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d03d      	beq.n	8003e4a <HAL_I2C_Master_Receive+0x12e>
  MODIFY_REG(hi2c->Instance->CR2, \
 8003dce:	f8df 811c 	ldr.w	r8, [pc, #284]	; 8003eec <HAL_I2C_Master_Receive+0x1d0>
 8003dd2:	f8df a11c 	ldr.w	sl, [pc, #284]	; 8003ef0 <HAL_I2C_Master_Receive+0x1d4>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003dd6:	f04f 09ff 	mov.w	r9, #255	; 0xff
 8003dda:	e003      	b.n	8003de4 <HAL_I2C_Master_Receive+0xc8>
    while (hi2c->XferCount > 0U)
 8003ddc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d032      	beq.n	8003e4a <HAL_I2C_Master_Receive+0x12e>
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de4:	462a      	mov	r2, r5
 8003de6:	4631      	mov	r1, r6
 8003de8:	4620      	mov	r0, r4
 8003dea:	f7ff fc37 	bl	800365c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003dee:	2800      	cmp	r0, #0
 8003df0:	d175      	bne.n	8003ede <HAL_I2C_Master_Receive+0x1c2>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003df2:	6822      	ldr	r2, [r4, #0]
 8003df4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003df6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003df8:	701a      	strb	r2, [r3, #0]
      hi2c->XferCount--;
 8003dfa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003dfc:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      hi2c->pBuffPtr++;
 8003dfe:	6a61      	ldr	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8003e00:	3a01      	subs	r2, #1
 8003e02:	b292      	uxth	r2, r2
 8003e04:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e06:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8003e08:	3b01      	subs	r3, #1
      hi2c->pBuffPtr++;
 8003e0a:	3101      	adds	r1, #1
      hi2c->XferSize--;
 8003e0c:	b29b      	uxth	r3, r3
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e0e:	b292      	uxth	r2, r2
      hi2c->pBuffPtr++;
 8003e10:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8003e12:	8523      	strh	r3, [r4, #40]	; 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003e14:	2a00      	cmp	r2, #0
 8003e16:	d0e1      	beq.n	8003ddc <HAL_I2C_Master_Receive+0xc0>
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d1df      	bne.n	8003ddc <HAL_I2C_Master_Receive+0xc0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e1c:	6822      	ldr	r2, [r4, #0]
 8003e1e:	1c70      	adds	r0, r6, #1
 8003e20:	d134      	bne.n	8003e8c <HAL_I2C_Master_Receive+0x170>
 8003e22:	6993      	ldr	r3, [r2, #24]
 8003e24:	0619      	lsls	r1, r3, #24
 8003e26:	d5fc      	bpl.n	8003e22 <HAL_I2C_Master_Receive+0x106>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003e28:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	2bff      	cmp	r3, #255	; 0xff
 8003e2e:	d948      	bls.n	8003ec2 <HAL_I2C_Master_Receive+0x1a6>
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e30:	6853      	ldr	r3, [r2, #4]
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e32:	f8a4 9028 	strh.w	r9, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e36:	ea03 0308 	and.w	r3, r3, r8
 8003e3a:	433b      	orrs	r3, r7
 8003e3c:	ea43 030a 	orr.w	r3, r3, sl
 8003e40:	6053      	str	r3, [r2, #4]
    while (hi2c->XferCount > 0U)
 8003e42:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d1cc      	bne.n	8003de4 <HAL_I2C_Master_Receive+0xc8>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e4a:	462a      	mov	r2, r5
 8003e4c:	4631      	mov	r1, r6
 8003e4e:	4620      	mov	r0, r4
 8003e50:	f7ff fcda 	bl	8003808 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003e54:	2800      	cmp	r0, #0
 8003e56:	d142      	bne.n	8003ede <HAL_I2C_Master_Receive+0x1c2>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e58:	6823      	ldr	r3, [r4, #0]
    I2C_RESET_CR2(hi2c);
 8003e5a:	4d23      	ldr	r5, [pc, #140]	; (8003ee8 <HAL_I2C_Master_Receive+0x1cc>)
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e5c:	2120      	movs	r1, #32
 8003e5e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	402a      	ands	r2, r5
 8003e64:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003e66:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003e6a:	f884 0040 	strb.w	r0, [r4, #64]	; 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003e6e:	f884 0042 	strb.w	r0, [r4, #66]	; 0x42
    return HAL_OK;
 8003e72:	e785      	b.n	8003d80 <HAL_I2C_Master_Receive+0x64>
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e74:	685a      	ldr	r2, [r3, #4]
 8003e76:	491b      	ldr	r1, [pc, #108]	; (8003ee4 <HAL_I2C_Master_Receive+0x1c8>)
 8003e78:	400a      	ands	r2, r1
 8003e7a:	433a      	orrs	r2, r7
 8003e7c:	f042 72ff 	orr.w	r2, r2, #33423360	; 0x1fe0000
 8003e80:	f442 3292 	orr.w	r2, r2, #74752	; 0x12400
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003e84:	21ff      	movs	r1, #255	; 0xff
 8003e86:	8521      	strh	r1, [r4, #40]	; 0x28
  MODIFY_REG(hi2c->Instance->CR2, \
 8003e88:	605a      	str	r2, [r3, #4]
}
 8003e8a:	e79c      	b.n	8003dc6 <HAL_I2C_Master_Receive+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e8c:	6993      	ldr	r3, [r2, #24]
 8003e8e:	061b      	lsls	r3, r3, #24
 8003e90:	d4ca      	bmi.n	8003e28 <HAL_I2C_Master_Receive+0x10c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e92:	f7fe fd9f 	bl	80029d4 <HAL_GetTick>
 8003e96:	1b40      	subs	r0, r0, r5
 8003e98:	4286      	cmp	r6, r0
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003e9a:	6822      	ldr	r2, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e9c:	d301      	bcc.n	8003ea2 <HAL_I2C_Master_Receive+0x186>
 8003e9e:	2e00      	cmp	r6, #0
 8003ea0:	d1bd      	bne.n	8003e1e <HAL_I2C_Master_Receive+0x102>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003ea2:	6993      	ldr	r3, [r2, #24]
 8003ea4:	f013 0380 	ands.w	r3, r3, #128	; 0x80
 8003ea8:	d1b9      	bne.n	8003e1e <HAL_I2C_Master_Receive+0x102>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eaa:	6c62      	ldr	r2, [r4, #68]	; 0x44
          __HAL_UNLOCK(hi2c);
 8003eac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
          hi2c->State = HAL_I2C_STATE_READY;
 8003eb0:	2120      	movs	r1, #32
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003eb2:	430a      	orrs	r2, r1
 8003eb4:	6462      	str	r2, [r4, #68]	; 0x44
          return HAL_ERROR;
 8003eb6:	2001      	movs	r0, #1
          hi2c->State = HAL_I2C_STATE_READY;
 8003eb8:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ebc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
          return HAL_ERROR;
 8003ec0:	e75e      	b.n	8003d80 <HAL_I2C_Master_Receive+0x64>
          hi2c->XferSize = hi2c->XferCount;
 8003ec2:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8003ec4:	b29b      	uxth	r3, r3
 8003ec6:	8523      	strh	r3, [r4, #40]	; 0x28
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003ec8:	b2d9      	uxtb	r1, r3
  MODIFY_REG(hi2c->Instance->CR2, \
 8003eca:	6853      	ldr	r3, [r2, #4]
 8003ecc:	ea03 0308 	and.w	r3, r3, r8
 8003ed0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8003ed4:	433b      	orrs	r3, r7
 8003ed6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003eda:	6053      	str	r3, [r2, #4]
}
 8003edc:	e77e      	b.n	8003ddc <HAL_I2C_Master_Receive+0xc0>
        return HAL_ERROR;
 8003ede:	2001      	movs	r0, #1
}
 8003ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee4:	fc009800 	.word	0xfc009800
 8003ee8:	fe00e800 	.word	0xfe00e800
 8003eec:	fc009c00 	.word	0xfc009c00
 8003ef0:	01ff0000 	.word	0x01ff0000

08003ef4 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ef4:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003ef8:	2a20      	cmp	r2, #32
 8003efa:	d123      	bne.n	8003f44 <HAL_I2CEx_ConfigAnalogFilter+0x50>
 8003efc:	fa5f fc82 	uxtb.w	ip, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f00:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8003f04:	2a01      	cmp	r2, #1
 8003f06:	4603      	mov	r3, r0
 8003f08:	d01c      	beq.n	8003f44 <HAL_I2CEx_ConfigAnalogFilter+0x50>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f0a:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f0c:	2024      	movs	r0, #36	; 0x24
{
 8003f0e:	b500      	push	{lr}
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f10:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003f14:	6810      	ldr	r0, [r2, #0]
 8003f16:	f020 0001 	bic.w	r0, r0, #1
 8003f1a:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003f1c:	6810      	ldr	r0, [r2, #0]
 8003f1e:	f420 5080 	bic.w	r0, r0, #4096	; 0x1000
 8003f22:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003f24:	6810      	ldr	r0, [r2, #0]
 8003f26:	4301      	orrs	r1, r0
 8003f28:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f2a:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f2c:	f04f 0e00 	mov.w	lr, #0
    __HAL_I2C_ENABLE(hi2c);
 8003f30:	f041 0101 	orr.w	r1, r1, #1
 8003f34:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f36:	f883 c041 	strb.w	ip, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003f3a:	f883 e040 	strb.w	lr, [r3, #64]	; 0x40

    return HAL_OK;
 8003f3e:	4670      	mov	r0, lr
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f40:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8003f44:	2002      	movs	r0, #2
}
 8003f46:	4770      	bx	lr

08003f48 <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f48:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8003f4c:	2a20      	cmp	r2, #32
 8003f4e:	d122      	bne.n	8003f96 <HAL_I2CEx_ConfigDigitalFilter+0x4e>
{
 8003f50:	b500      	push	{lr}
 8003f52:	fa5f fe82 	uxtb.w	lr, r2
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f56:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
 8003f5a:	2a01      	cmp	r2, #1
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	d01c      	beq.n	8003f9a <HAL_I2CEx_ConfigDigitalFilter+0x52>

    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003f60:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8003f62:	2024      	movs	r0, #36	; 0x24
 8003f64:	f883 0041 	strb.w	r0, [r3, #65]	; 0x41
    __HAL_I2C_DISABLE(hi2c);
 8003f68:	6810      	ldr	r0, [r2, #0]
 8003f6a:	f020 0001 	bic.w	r0, r0, #1
 8003f6e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003f70:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003f72:	f420 6070 	bic.w	r0, r0, #3840	; 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003f76:	ea40 2101 	orr.w	r1, r0, r1, lsl #8

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003f7a:	6011      	str	r1, [r2, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003f7c:	6811      	ldr	r1, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7e:	f04f 0c00 	mov.w	ip, #0
    __HAL_I2C_ENABLE(hi2c);
 8003f82:	f041 0101 	orr.w	r1, r1, #1
 8003f86:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8003f88:	f883 e041 	strb.w	lr, [r3, #65]	; 0x41
    __HAL_UNLOCK(hi2c);
 8003f8c:	f883 c040 	strb.w	ip, [r3, #64]	; 0x40

    return HAL_OK;
 8003f90:	4660      	mov	r0, ip
  }
  else
  {
    return HAL_BUSY;
  }
}
 8003f92:	f85d fb04 	ldr.w	pc, [sp], #4
    return HAL_BUSY;
 8003f96:	2002      	movs	r0, #2
}
 8003f98:	4770      	bx	lr
    return HAL_BUSY;
 8003f9a:	2002      	movs	r0, #2
}
 8003f9c:	f85d fb04 	ldr.w	pc, [sp], #4

08003fa0 <HAL_I2CEx_EnableFastModePlus>:
{
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa0:	4a09      	ldr	r2, [pc, #36]	; (8003fc8 <HAL_I2CEx_EnableFastModePlus+0x28>)
{
 8003fa2:	b410      	push	{r4}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa4:	6991      	ldr	r1, [r2, #24]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003fa6:	4c09      	ldr	r4, [pc, #36]	; (8003fcc <HAL_I2CEx_EnableFastModePlus+0x2c>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fa8:	f041 0101 	orr.w	r1, r1, #1
 8003fac:	6191      	str	r1, [r2, #24]
 8003fae:	6992      	ldr	r2, [r2, #24]
{
 8003fb0:	b083      	sub	sp, #12
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fb2:	f002 0201 	and.w	r2, r2, #1
 8003fb6:	9201      	str	r2, [sp, #4]
 8003fb8:	9b01      	ldr	r3, [sp, #4]
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8003fba:	6823      	ldr	r3, [r4, #0]
 8003fbc:	4318      	orrs	r0, r3
 8003fbe:	6020      	str	r0, [r4, #0]
}
 8003fc0:	b003      	add	sp, #12
 8003fc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40021000 	.word	0x40021000
 8003fcc:	40010000 	.word	0x40010000

08003fd0 <HAL_RCC_OscConfig>:
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fd0:	2800      	cmp	r0, #0
 8003fd2:	f000 828c 	beq.w	80044ee <HAL_RCC_OscConfig+0x51e>
{
 8003fd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fda:	6803      	ldr	r3, [r0, #0]
 8003fdc:	07d9      	lsls	r1, r3, #31
{
 8003fde:	b083      	sub	sp, #12
 8003fe0:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	d54f      	bpl.n	8004084 <HAL_RCC_OscConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003fe4:	49b4      	ldr	r1, [pc, #720]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
 8003fe6:	684a      	ldr	r2, [r1, #4]
 8003fe8:	f002 020c 	and.w	r2, r2, #12
 8003fec:	2a04      	cmp	r2, #4
 8003fee:	f000 816d 	beq.w	80042cc <HAL_RCC_OscConfig+0x2fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003ff2:	684a      	ldr	r2, [r1, #4]
 8003ff4:	f002 020c 	and.w	r2, r2, #12
 8003ff8:	2a08      	cmp	r2, #8
 8003ffa:	f000 8163 	beq.w	80042c4 <HAL_RCC_OscConfig+0x2f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ffe:	6863      	ldr	r3, [r4, #4]
 8004000:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004004:	d017      	beq.n	8004036 <HAL_RCC_OscConfig+0x66>
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 819c 	beq.w	8004344 <HAL_RCC_OscConfig+0x374>
 800400c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004010:	f000 8258 	beq.w	80044c4 <HAL_RCC_OscConfig+0x4f4>
 8004014:	4ba8      	ldr	r3, [pc, #672]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800401c:	601a      	str	r2, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004024:	601a      	str	r2, [r3, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004026:	4aa4      	ldr	r2, [pc, #656]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
 8004028:	68a1      	ldr	r1, [r4, #8]
 800402a:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800402c:	f023 030f 	bic.w	r3, r3, #15
 8004030:	430b      	orrs	r3, r1
 8004032:	62d3      	str	r3, [r2, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004034:	e00a      	b.n	800404c <HAL_RCC_OscConfig+0x7c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004036:	4aa0      	ldr	r2, [pc, #640]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
 8004038:	6813      	ldr	r3, [r2, #0]
 800403a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403e:	6013      	str	r3, [r2, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004040:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8004042:	68a1      	ldr	r1, [r4, #8]
 8004044:	f023 030f 	bic.w	r3, r3, #15
 8004048:	430b      	orrs	r3, r1
 800404a:	62d3      	str	r3, [r2, #44]	; 0x2c
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800404c:	f7fe fcc2 	bl	80029d4 <HAL_GetTick>
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004050:	4f99      	ldr	r7, [pc, #612]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
        tickstart = HAL_GetTick();
 8004052:	4605      	mov	r5, r0
 8004054:	f44f 3800 	mov.w	r8, #131072	; 0x20000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004058:	2601      	movs	r6, #1
 800405a:	e005      	b.n	8004068 <HAL_RCC_OscConfig+0x98>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800405c:	f7fe fcba 	bl	80029d4 <HAL_GetTick>
 8004060:	1b40      	subs	r0, r0, r5
 8004062:	2864      	cmp	r0, #100	; 0x64
 8004064:	f200 816a 	bhi.w	800433c <HAL_RCC_OscConfig+0x36c>
 8004068:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	fa98 f3a8 	rbit	r3, r8
 8004072:	fab3 f383 	clz	r3, r3
 8004076:	f003 031f 	and.w	r3, r3, #31
 800407a:	fa06 f303 	lsl.w	r3, r6, r3
 800407e:	4213      	tst	r3, r2
 8004080:	d0ec      	beq.n	800405c <HAL_RCC_OscConfig+0x8c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004082:	6823      	ldr	r3, [r4, #0]
 8004084:	079f      	lsls	r7, r3, #30
 8004086:	d541      	bpl.n	800410c <HAL_RCC_OscConfig+0x13c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8004088:	4a8b      	ldr	r2, [pc, #556]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
 800408a:	6851      	ldr	r1, [r2, #4]
 800408c:	f011 0f0c 	tst.w	r1, #12
 8004090:	f000 80c8 	beq.w	8004224 <HAL_RCC_OscConfig+0x254>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004094:	6851      	ldr	r1, [r2, #4]
 8004096:	f001 010c 	and.w	r1, r1, #12
 800409a:	2908      	cmp	r1, #8
 800409c:	f000 80be 	beq.w	800421c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80040a0:	6922      	ldr	r2, [r4, #16]
 80040a2:	2a00      	cmp	r2, #0
 80040a4:	f000 81ad 	beq.w	8004402 <HAL_RCC_OscConfig+0x432>
 80040a8:	2501      	movs	r5, #1
 80040aa:	fa95 f3a5 	rbit	r3, r5
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040ae:	fab3 f383 	clz	r3, r3
 80040b2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040b6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040ba:	009b      	lsls	r3, r3, #2
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040bc:	4f7e      	ldr	r7, [pc, #504]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
        __HAL_RCC_HSI_ENABLE();
 80040be:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 80040c0:	f7fe fc88 	bl	80029d4 <HAL_GetTick>
 80040c4:	f04f 0802 	mov.w	r8, #2
 80040c8:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ca:	e005      	b.n	80040d8 <HAL_RCC_OscConfig+0x108>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040cc:	f7fe fc82 	bl	80029d4 <HAL_GetTick>
 80040d0:	1b80      	subs	r0, r0, r6
 80040d2:	2802      	cmp	r0, #2
 80040d4:	f200 8132 	bhi.w	800433c <HAL_RCC_OscConfig+0x36c>
 80040d8:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	fa98 f3a8 	rbit	r3, r8
 80040e2:	fab3 f383 	clz	r3, r3
 80040e6:	f003 031f 	and.w	r3, r3, #31
 80040ea:	fa05 f303 	lsl.w	r3, r5, r3
 80040ee:	4213      	tst	r3, r2
 80040f0:	d0ec      	beq.n	80040cc <HAL_RCC_OscConfig+0xfc>
            return HAL_TIMEOUT;
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040f2:	6839      	ldr	r1, [r7, #0]
 80040f4:	22f8      	movs	r2, #248	; 0xf8
 80040f6:	fa92 f2a2 	rbit	r2, r2
 80040fa:	6963      	ldr	r3, [r4, #20]
 80040fc:	fab2 f282 	clz	r2, r2
 8004100:	4093      	lsls	r3, r2
 8004102:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8004106:	4313      	orrs	r3, r2
 8004108:	603b      	str	r3, [r7, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410a:	6823      	ldr	r3, [r4, #0]
 800410c:	071d      	lsls	r5, r3, #28
 800410e:	d421      	bmi.n	8004154 <HAL_RCC_OscConfig+0x184>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004110:	0758      	lsls	r0, r3, #29
 8004112:	d54c      	bpl.n	80041ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004114:	4b68      	ldr	r3, [pc, #416]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
 8004116:	69da      	ldr	r2, [r3, #28]
 8004118:	00d1      	lsls	r1, r2, #3
 800411a:	f140 80c1 	bpl.w	80042a0 <HAL_RCC_OscConfig+0x2d0>
    FlagStatus       pwrclkchanged = RESET;
 800411e:	f04f 0800 	mov.w	r8, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004122:	4d66      	ldr	r5, [pc, #408]	; (80042bc <HAL_RCC_OscConfig+0x2ec>)
 8004124:	682b      	ldr	r3, [r5, #0]
 8004126:	05da      	lsls	r2, r3, #23
 8004128:	f140 80f8 	bpl.w	800431c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800412c:	68e3      	ldr	r3, [r4, #12]
 800412e:	2b01      	cmp	r3, #1
 8004130:	f000 818d 	beq.w	800444e <HAL_RCC_OscConfig+0x47e>
 8004134:	2b00      	cmp	r3, #0
 8004136:	f000 812e 	beq.w	8004396 <HAL_RCC_OscConfig+0x3c6>
 800413a:	2b05      	cmp	r3, #5
 800413c:	4b5e      	ldr	r3, [pc, #376]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
 800413e:	6a1a      	ldr	r2, [r3, #32]
 8004140:	f000 81cd 	beq.w	80044de <HAL_RCC_OscConfig+0x50e>
 8004144:	f022 0201 	bic.w	r2, r2, #1
 8004148:	621a      	str	r2, [r3, #32]
 800414a:	6a1a      	ldr	r2, [r3, #32]
 800414c:	f022 0204 	bic.w	r2, r2, #4
 8004150:	621a      	str	r2, [r3, #32]
 8004152:	e181      	b.n	8004458 <HAL_RCC_OscConfig+0x488>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004154:	69a2      	ldr	r2, [r4, #24]
 8004156:	2a00      	cmp	r2, #0
 8004158:	d07b      	beq.n	8004252 <HAL_RCC_OscConfig+0x282>
 800415a:	2501      	movs	r5, #1
 800415c:	fa95 f2a5 	rbit	r2, r5
      __HAL_RCC_LSI_ENABLE();
 8004160:	4b57      	ldr	r3, [pc, #348]	; (80042c0 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004162:	4f55      	ldr	r7, [pc, #340]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_ENABLE();
 8004164:	fab2 f282 	clz	r2, r2
 8004168:	4413      	add	r3, r2
 800416a:	009b      	lsls	r3, r3, #2
 800416c:	f04f 0802 	mov.w	r8, #2
 8004170:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 8004172:	f7fe fc2f 	bl	80029d4 <HAL_GetTick>
 8004176:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004178:	e005      	b.n	8004186 <HAL_RCC_OscConfig+0x1b6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800417a:	f7fe fc2b 	bl	80029d4 <HAL_GetTick>
 800417e:	1b80      	subs	r0, r0, r6
 8004180:	2802      	cmp	r0, #2
 8004182:	f200 80db 	bhi.w	800433c <HAL_RCC_OscConfig+0x36c>
 8004186:	fa98 f3a8 	rbit	r3, r8
 800418a:	fa98 f3a8 	rbit	r3, r8
 800418e:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004194:	fa98 f3a8 	rbit	r3, r8
 8004198:	fab3 f383 	clz	r3, r3
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	fa05 f303 	lsl.w	r3, r5, r3
 80041a4:	4213      	tst	r3, r2
 80041a6:	d0e8      	beq.n	800417a <HAL_RCC_OscConfig+0x1aa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a8:	6823      	ldr	r3, [r4, #0]
 80041aa:	0758      	lsls	r0, r3, #29
 80041ac:	d4b2      	bmi.n	8004114 <HAL_RCC_OscConfig+0x144>
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ae:	69e0      	ldr	r0, [r4, #28]
 80041b0:	b380      	cbz	r0, 8004214 <HAL_RCC_OscConfig+0x244>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041b2:	4d41      	ldr	r5, [pc, #260]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
 80041b4:	686b      	ldr	r3, [r5, #4]
 80041b6:	f003 030c 	and.w	r3, r3, #12
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	f000 8171 	beq.w	80044a2 <HAL_RCC_OscConfig+0x4d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041c0:	2802      	cmp	r0, #2
 80041c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041c6:	f000 8194 	beq.w	80044f2 <HAL_RCC_OscConfig+0x522>
 80041ca:	fa93 f3a3 	rbit	r3, r3
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041ce:	fab3 f383 	clz	r3, r3
 80041d2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80041d6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	2200      	movs	r2, #0
 80041de:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041e0:	f7fe fbf8 	bl	80029d4 <HAL_GetTick>
 80041e4:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80041e8:	4604      	mov	r4, r0
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041ea:	2601      	movs	r6, #1
 80041ec:	e005      	b.n	80041fa <HAL_RCC_OscConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041ee:	f7fe fbf1 	bl	80029d4 <HAL_GetTick>
 80041f2:	1b00      	subs	r0, r0, r4
 80041f4:	2802      	cmp	r0, #2
 80041f6:	f200 80a1 	bhi.w	800433c <HAL_RCC_OscConfig+0x36c>
 80041fa:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80041fe:	682a      	ldr	r2, [r5, #0]
 8004200:	fa97 f3a7 	rbit	r3, r7
 8004204:	fab3 f383 	clz	r3, r3
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	fa06 f303 	lsl.w	r3, r6, r3
 8004210:	4213      	tst	r3, r2
 8004212:	d1ec      	bne.n	80041ee <HAL_RCC_OscConfig+0x21e>
        }
      }
    }
  }

  return HAL_OK;
 8004214:	2000      	movs	r0, #0
}
 8004216:	b003      	add	sp, #12
 8004218:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800421c:	6852      	ldr	r2, [r2, #4]
 800421e:	03d6      	lsls	r6, r2, #15
 8004220:	f53f af3e 	bmi.w	80040a0 <HAL_RCC_OscConfig+0xd0>
 8004224:	2202      	movs	r2, #2
 8004226:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800422a:	4923      	ldr	r1, [pc, #140]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
 800422c:	6808      	ldr	r0, [r1, #0]
 800422e:	fa92 f2a2 	rbit	r2, r2
 8004232:	fab2 f282 	clz	r2, r2
 8004236:	f002 021f 	and.w	r2, r2, #31
 800423a:	2101      	movs	r1, #1
 800423c:	fa01 f202 	lsl.w	r2, r1, r2
 8004240:	4202      	tst	r2, r0
 8004242:	d05a      	beq.n	80042fa <HAL_RCC_OscConfig+0x32a>
 8004244:	6922      	ldr	r2, [r4, #16]
 8004246:	428a      	cmp	r2, r1
 8004248:	d057      	beq.n	80042fa <HAL_RCC_OscConfig+0x32a>
        return HAL_ERROR;
 800424a:	2001      	movs	r0, #1
}
 800424c:	b003      	add	sp, #12
 800424e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004252:	2601      	movs	r6, #1
 8004254:	fa96 f1a6 	rbit	r1, r6
      __HAL_RCC_LSI_DISABLE();
 8004258:	4b19      	ldr	r3, [pc, #100]	; (80042c0 <HAL_RCC_OscConfig+0x2f0>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800425a:	4f17      	ldr	r7, [pc, #92]	; (80042b8 <HAL_RCC_OscConfig+0x2e8>)
      __HAL_RCC_LSI_DISABLE();
 800425c:	fab1 f181 	clz	r1, r1
 8004260:	440b      	add	r3, r1
 8004262:	009b      	lsls	r3, r3, #2
 8004264:	f04f 0802 	mov.w	r8, #2
 8004268:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800426a:	f7fe fbb3 	bl	80029d4 <HAL_GetTick>
 800426e:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004270:	e004      	b.n	800427c <HAL_RCC_OscConfig+0x2ac>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004272:	f7fe fbaf 	bl	80029d4 <HAL_GetTick>
 8004276:	1b40      	subs	r0, r0, r5
 8004278:	2802      	cmp	r0, #2
 800427a:	d85f      	bhi.n	800433c <HAL_RCC_OscConfig+0x36c>
 800427c:	fa98 f3a8 	rbit	r3, r8
 8004280:	fa98 f3a8 	rbit	r3, r8
 8004284:	fa98 f3a8 	rbit	r3, r8
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800428a:	fa98 f3a8 	rbit	r3, r8
 800428e:	fab3 f383 	clz	r3, r3
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	fa06 f303 	lsl.w	r3, r6, r3
 800429a:	4213      	tst	r3, r2
 800429c:	d1e9      	bne.n	8004272 <HAL_RCC_OscConfig+0x2a2>
 800429e:	e783      	b.n	80041a8 <HAL_RCC_OscConfig+0x1d8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80042a0:	69da      	ldr	r2, [r3, #28]
 80042a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80042a6:	61da      	str	r2, [r3, #28]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ae:	9301      	str	r3, [sp, #4]
 80042b0:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80042b2:	f04f 0801 	mov.w	r8, #1
 80042b6:	e734      	b.n	8004122 <HAL_RCC_OscConfig+0x152>
 80042b8:	40021000 	.word	0x40021000
 80042bc:	40007000 	.word	0x40007000
 80042c0:	10908120 	.word	0x10908120
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80042c4:	684a      	ldr	r2, [r1, #4]
 80042c6:	03d2      	lsls	r2, r2, #15
 80042c8:	f57f ae99 	bpl.w	8003ffe <HAL_RCC_OscConfig+0x2e>
 80042cc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80042d0:	fa92 f1a2 	rbit	r1, r2
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042d4:	49b1      	ldr	r1, [pc, #708]	; (800459c <HAL_RCC_OscConfig+0x5cc>)
 80042d6:	6808      	ldr	r0, [r1, #0]
 80042d8:	fa92 f2a2 	rbit	r2, r2
 80042dc:	fab2 f282 	clz	r2, r2
 80042e0:	f002 021f 	and.w	r2, r2, #31
 80042e4:	2101      	movs	r1, #1
 80042e6:	fa01 f202 	lsl.w	r2, r1, r2
 80042ea:	4202      	tst	r2, r0
 80042ec:	f43f aeca 	beq.w	8004084 <HAL_RCC_OscConfig+0xb4>
 80042f0:	6862      	ldr	r2, [r4, #4]
 80042f2:	2a00      	cmp	r2, #0
 80042f4:	f47f aec6 	bne.w	8004084 <HAL_RCC_OscConfig+0xb4>
 80042f8:	e7a7      	b.n	800424a <HAL_RCC_OscConfig+0x27a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fa:	4da8      	ldr	r5, [pc, #672]	; (800459c <HAL_RCC_OscConfig+0x5cc>)
 80042fc:	22f8      	movs	r2, #248	; 0xf8
 80042fe:	6828      	ldr	r0, [r5, #0]
 8004300:	fa92 f2a2 	rbit	r2, r2
 8004304:	fab2 f182 	clz	r1, r2
 8004308:	6962      	ldr	r2, [r4, #20]
 800430a:	f020 00f8 	bic.w	r0, r0, #248	; 0xf8
 800430e:	408a      	lsls	r2, r1
 8004310:	4302      	orrs	r2, r0
 8004312:	602a      	str	r2, [r5, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004314:	071d      	lsls	r5, r3, #28
 8004316:	f57f aefb 	bpl.w	8004110 <HAL_RCC_OscConfig+0x140>
 800431a:	e71b      	b.n	8004154 <HAL_RCC_OscConfig+0x184>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431c:	682b      	ldr	r3, [r5, #0]
 800431e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004322:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8004324:	f7fe fb56 	bl	80029d4 <HAL_GetTick>
 8004328:	4606      	mov	r6, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432a:	682b      	ldr	r3, [r5, #0]
 800432c:	05db      	lsls	r3, r3, #23
 800432e:	f53f aefd 	bmi.w	800412c <HAL_RCC_OscConfig+0x15c>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004332:	f7fe fb4f 	bl	80029d4 <HAL_GetTick>
 8004336:	1b80      	subs	r0, r0, r6
 8004338:	2864      	cmp	r0, #100	; 0x64
 800433a:	d9f6      	bls.n	800432a <HAL_RCC_OscConfig+0x35a>
            return HAL_TIMEOUT;
 800433c:	2003      	movs	r0, #3
}
 800433e:	b003      	add	sp, #12
 8004340:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004344:	4d95      	ldr	r5, [pc, #596]	; (800459c <HAL_RCC_OscConfig+0x5cc>)
 8004346:	682b      	ldr	r3, [r5, #0]
 8004348:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800434c:	602b      	str	r3, [r5, #0]
 800434e:	682b      	ldr	r3, [r5, #0]
 8004350:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004354:	602b      	str	r3, [r5, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004356:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8004358:	68a2      	ldr	r2, [r4, #8]
 800435a:	f023 030f 	bic.w	r3, r3, #15
 800435e:	4313      	orrs	r3, r2
 8004360:	62eb      	str	r3, [r5, #44]	; 0x2c
        tickstart = HAL_GetTick();
 8004362:	f7fe fb37 	bl	80029d4 <HAL_GetTick>
 8004366:	f44f 3800 	mov.w	r8, #131072	; 0x20000
 800436a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800436c:	2701      	movs	r7, #1
 800436e:	e004      	b.n	800437a <HAL_RCC_OscConfig+0x3aa>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004370:	f7fe fb30 	bl	80029d4 <HAL_GetTick>
 8004374:	1b80      	subs	r0, r0, r6
 8004376:	2864      	cmp	r0, #100	; 0x64
 8004378:	d8e0      	bhi.n	800433c <HAL_RCC_OscConfig+0x36c>
 800437a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800437e:	682a      	ldr	r2, [r5, #0]
 8004380:	fa98 f3a8 	rbit	r3, r8
 8004384:	fab3 f383 	clz	r3, r3
 8004388:	f003 031f 	and.w	r3, r3, #31
 800438c:	fa07 f303 	lsl.w	r3, r7, r3
 8004390:	4213      	tst	r3, r2
 8004392:	d1ed      	bne.n	8004370 <HAL_RCC_OscConfig+0x3a0>
 8004394:	e675      	b.n	8004082 <HAL_RCC_OscConfig+0xb2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004396:	4d81      	ldr	r5, [pc, #516]	; (800459c <HAL_RCC_OscConfig+0x5cc>)
 8004398:	6a2b      	ldr	r3, [r5, #32]
 800439a:	f023 0301 	bic.w	r3, r3, #1
 800439e:	622b      	str	r3, [r5, #32]
 80043a0:	6a2b      	ldr	r3, [r5, #32]
 80043a2:	f023 0304 	bic.w	r3, r3, #4
 80043a6:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80043a8:	f7fe fb14 	bl	80029d4 <HAL_GetTick>
 80043ac:	f04f 0902 	mov.w	r9, #2
 80043b0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043b2:	2701      	movs	r7, #1
 80043b4:	e013      	b.n	80043de <HAL_RCC_OscConfig+0x40e>
 80043b6:	fa99 f3a9 	rbit	r3, r9
 80043ba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 80043bc:	fa99 f3a9 	rbit	r3, r9
 80043c0:	fab3 f383 	clz	r3, r3
 80043c4:	f003 031f 	and.w	r3, r3, #31
 80043c8:	fa07 f303 	lsl.w	r3, r7, r3
 80043cc:	4213      	tst	r3, r2
 80043ce:	d00e      	beq.n	80043ee <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80043d0:	f7fe fb00 	bl	80029d4 <HAL_GetTick>
 80043d4:	f241 3388 	movw	r3, #5000	; 0x1388
 80043d8:	1b80      	subs	r0, r0, r6
 80043da:	4298      	cmp	r0, r3
 80043dc:	d8ae      	bhi.n	800433c <HAL_RCC_OscConfig+0x36c>
 80043de:	fa99 f3a9 	rbit	r3, r9
 80043e2:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0e5      	beq.n	80043b6 <HAL_RCC_OscConfig+0x3e6>
 80043ea:	6a2a      	ldr	r2, [r5, #32]
 80043ec:	e7e6      	b.n	80043bc <HAL_RCC_OscConfig+0x3ec>
    if(pwrclkchanged == SET)
 80043ee:	f1b8 0f00 	cmp.w	r8, #0
 80043f2:	f43f aedc 	beq.w	80041ae <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_PWR_CLK_DISABLE();
 80043f6:	4a69      	ldr	r2, [pc, #420]	; (800459c <HAL_RCC_OscConfig+0x5cc>)
 80043f8:	69d3      	ldr	r3, [r2, #28]
 80043fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043fe:	61d3      	str	r3, [r2, #28]
 8004400:	e6d5      	b.n	80041ae <HAL_RCC_OscConfig+0x1de>
 8004402:	2601      	movs	r6, #1
 8004404:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8004408:	fab3 f383 	clz	r3, r3
 800440c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8004410:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004414:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004416:	4f61      	ldr	r7, [pc, #388]	; (800459c <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_HSI_DISABLE();
 8004418:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800441a:	f7fe fadb 	bl	80029d4 <HAL_GetTick>
 800441e:	f04f 0802 	mov.w	r8, #2
 8004422:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004424:	e004      	b.n	8004430 <HAL_RCC_OscConfig+0x460>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004426:	f7fe fad5 	bl	80029d4 <HAL_GetTick>
 800442a:	1b40      	subs	r0, r0, r5
 800442c:	2802      	cmp	r0, #2
 800442e:	d885      	bhi.n	800433c <HAL_RCC_OscConfig+0x36c>
 8004430:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	fa98 f3a8 	rbit	r3, r8
 800443a:	fab3 f383 	clz	r3, r3
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	fa06 f303 	lsl.w	r3, r6, r3
 8004446:	4213      	tst	r3, r2
 8004448:	d1ed      	bne.n	8004426 <HAL_RCC_OscConfig+0x456>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800444a:	6823      	ldr	r3, [r4, #0]
 800444c:	e65e      	b.n	800410c <HAL_RCC_OscConfig+0x13c>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800444e:	4a53      	ldr	r2, [pc, #332]	; (800459c <HAL_RCC_OscConfig+0x5cc>)
 8004450:	6a13      	ldr	r3, [r2, #32]
 8004452:	f043 0301 	orr.w	r3, r3, #1
 8004456:	6213      	str	r3, [r2, #32]
      tickstart = HAL_GetTick();
 8004458:	f7fe fabc 	bl	80029d4 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800445c:	4f4f      	ldr	r7, [pc, #316]	; (800459c <HAL_RCC_OscConfig+0x5cc>)
      tickstart = HAL_GetTick();
 800445e:	4605      	mov	r5, r0
 8004460:	f04f 0902 	mov.w	r9, #2
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004464:	2601      	movs	r6, #1
 8004466:	e014      	b.n	8004492 <HAL_RCC_OscConfig+0x4c2>
 8004468:	fa99 f3a9 	rbit	r3, r9
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	fa99 f3a9 	rbit	r3, r9
 8004472:	fab3 f383 	clz	r3, r3
 8004476:	f003 031f 	and.w	r3, r3, #31
 800447a:	fa06 f303 	lsl.w	r3, r6, r3
 800447e:	4213      	tst	r3, r2
 8004480:	d1b5      	bne.n	80043ee <HAL_RCC_OscConfig+0x41e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004482:	f7fe faa7 	bl	80029d4 <HAL_GetTick>
 8004486:	f241 3388 	movw	r3, #5000	; 0x1388
 800448a:	1b40      	subs	r0, r0, r5
 800448c:	4298      	cmp	r0, r3
 800448e:	f63f af55 	bhi.w	800433c <HAL_RCC_OscConfig+0x36c>
 8004492:	fa99 f3a9 	rbit	r3, r9
 8004496:	fa99 f3a9 	rbit	r3, r9
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800449a:	2b00      	cmp	r3, #0
 800449c:	d0e4      	beq.n	8004468 <HAL_RCC_OscConfig+0x498>
 800449e:	6a3a      	ldr	r2, [r7, #32]
 80044a0:	e7e5      	b.n	800446e <HAL_RCC_OscConfig+0x49e>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80044a2:	2801      	cmp	r0, #1
 80044a4:	f43f aeb7 	beq.w	8004216 <HAL_RCC_OscConfig+0x246>
        pll_config = RCC->CFGR;
 80044a8:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80044aa:	6a22      	ldr	r2, [r4, #32]
 80044ac:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80044b0:	4291      	cmp	r1, r2
 80044b2:	f47f aeca 	bne.w	800424a <HAL_RCC_OscConfig+0x27a>
 80044b6:	6a60      	ldr	r0, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 80044b8:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
  return HAL_OK;
 80044bc:	1a18      	subs	r0, r3, r0
 80044be:	bf18      	it	ne
 80044c0:	2001      	movne	r0, #1
 80044c2:	e6a8      	b.n	8004216 <HAL_RCC_OscConfig+0x246>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80044c8:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80044d2:	601a      	str	r2, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80044da:	601a      	str	r2, [r3, #0]
 80044dc:	e5a3      	b.n	8004026 <HAL_RCC_OscConfig+0x56>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044de:	f042 0204 	orr.w	r2, r2, #4
 80044e2:	621a      	str	r2, [r3, #32]
 80044e4:	6a1a      	ldr	r2, [r3, #32]
 80044e6:	f042 0201 	orr.w	r2, r2, #1
 80044ea:	621a      	str	r2, [r3, #32]
 80044ec:	e7b4      	b.n	8004458 <HAL_RCC_OscConfig+0x488>
    return HAL_ERROR;
 80044ee:	2001      	movs	r0, #1
}
 80044f0:	4770      	bx	lr
 80044f2:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80044f6:	fab3 f383 	clz	r3, r3
 80044fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80044fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004508:	f7fe fa64 	bl	80029d4 <HAL_GetTick>
 800450c:	f04f 7800 	mov.w	r8, #33554432	; 0x2000000
 8004510:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004512:	2701      	movs	r7, #1
 8004514:	e005      	b.n	8004522 <HAL_RCC_OscConfig+0x552>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004516:	f7fe fa5d 	bl	80029d4 <HAL_GetTick>
 800451a:	1b80      	subs	r0, r0, r6
 800451c:	2802      	cmp	r0, #2
 800451e:	f63f af0d 	bhi.w	800433c <HAL_RCC_OscConfig+0x36c>
 8004522:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004526:	682a      	ldr	r2, [r5, #0]
 8004528:	fa98 f3a8 	rbit	r3, r8
 800452c:	fab3 f383 	clz	r3, r3
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	fa07 f303 	lsl.w	r3, r7, r3
 8004538:	4213      	tst	r3, r2
 800453a:	d1ec      	bne.n	8004516 <HAL_RCC_OscConfig+0x546>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800453c:	e9d4 1308 	ldrd	r1, r3, [r4, #32]
 8004540:	686a      	ldr	r2, [r5, #4]
 8004542:	430b      	orrs	r3, r1
 8004544:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8004548:	4313      	orrs	r3, r2
 800454a:	606b      	str	r3, [r5, #4]
 800454c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004550:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8004554:	fab3 f383 	clz	r3, r3
 8004558:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800455c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8004560:	009b      	lsls	r3, r3, #2
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004562:	4d0e      	ldr	r5, [pc, #56]	; (800459c <HAL_RCC_OscConfig+0x5cc>)
        __HAL_RCC_PLL_ENABLE();
 8004564:	601f      	str	r7, [r3, #0]
        tickstart = HAL_GetTick();
 8004566:	f7fe fa35 	bl	80029d4 <HAL_GetTick>
 800456a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800456e:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004570:	2601      	movs	r6, #1
 8004572:	e005      	b.n	8004580 <HAL_RCC_OscConfig+0x5b0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004574:	f7fe fa2e 	bl	80029d4 <HAL_GetTick>
 8004578:	1b00      	subs	r0, r0, r4
 800457a:	2802      	cmp	r0, #2
 800457c:	f63f aede 	bhi.w	800433c <HAL_RCC_OscConfig+0x36c>
 8004580:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004584:	682a      	ldr	r2, [r5, #0]
 8004586:	fa97 f3a7 	rbit	r3, r7
 800458a:	fab3 f383 	clz	r3, r3
 800458e:	f003 031f 	and.w	r3, r3, #31
 8004592:	fa06 f303 	lsl.w	r3, r6, r3
 8004596:	4213      	tst	r3, r2
 8004598:	d0ec      	beq.n	8004574 <HAL_RCC_OscConfig+0x5a4>
 800459a:	e63b      	b.n	8004214 <HAL_RCC_OscConfig+0x244>
 800459c:	40021000 	.word	0x40021000

080045a0 <HAL_RCC_ClockConfig>:
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
  uint32_t tickstart = 0U;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045a0:	2800      	cmp	r0, #0
 80045a2:	f000 80c8 	beq.w	8004736 <HAL_RCC_ClockConfig+0x196>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045a6:	4a6f      	ldr	r2, [pc, #444]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 80045a8:	6813      	ldr	r3, [r2, #0]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	428b      	cmp	r3, r1
{
 80045b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045b4:	460d      	mov	r5, r1
 80045b6:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045b8:	d20c      	bcs.n	80045d4 <HAL_RCC_ClockConfig+0x34>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ba:	6813      	ldr	r3, [r2, #0]
 80045bc:	f023 0307 	bic.w	r3, r3, #7
 80045c0:	430b      	orrs	r3, r1
 80045c2:	6013      	str	r3, [r2, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045c4:	6813      	ldr	r3, [r2, #0]
 80045c6:	f003 0307 	and.w	r3, r3, #7
 80045ca:	428b      	cmp	r3, r1
 80045cc:	d002      	beq.n	80045d4 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 80045ce:	2001      	movs	r0, #1

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
  
  return HAL_OK;
}
 80045d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80045d4:	6823      	ldr	r3, [r4, #0]
 80045d6:	079f      	lsls	r7, r3, #30
 80045d8:	d506      	bpl.n	80045e8 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80045da:	4963      	ldr	r1, [pc, #396]	; (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 80045dc:	68a0      	ldr	r0, [r4, #8]
 80045de:	684a      	ldr	r2, [r1, #4]
 80045e0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80045e4:	4302      	orrs	r2, r0
 80045e6:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80045e8:	07de      	lsls	r6, r3, #31
 80045ea:	d52f      	bpl.n	800464c <HAL_RCC_ClockConfig+0xac>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045ec:	6861      	ldr	r1, [r4, #4]
 80045ee:	2901      	cmp	r1, #1
 80045f0:	f000 80a3 	beq.w	800473a <HAL_RCC_ClockConfig+0x19a>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045f4:	2902      	cmp	r1, #2
 80045f6:	f000 808b 	beq.w	8004710 <HAL_RCC_ClockConfig+0x170>
 80045fa:	2202      	movs	r2, #2
 80045fc:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004600:	4b59      	ldr	r3, [pc, #356]	; (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 8004602:	6818      	ldr	r0, [r3, #0]
 8004604:	fa92 f2a2 	rbit	r2, r2
 8004608:	fab2 f282 	clz	r2, r2
 800460c:	f002 021f 	and.w	r2, r2, #31
 8004610:	2301      	movs	r3, #1
 8004612:	fa03 f202 	lsl.w	r2, r3, r2
 8004616:	4202      	tst	r2, r0
 8004618:	d0d9      	beq.n	80045ce <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800461a:	4e53      	ldr	r6, [pc, #332]	; (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 800461c:	6873      	ldr	r3, [r6, #4]
 800461e:	f023 0303 	bic.w	r3, r3, #3
 8004622:	430b      	orrs	r3, r1
 8004624:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8004626:	f7fe f9d5 	bl	80029d4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800462a:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800462e:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004630:	e005      	b.n	800463e <HAL_RCC_ClockConfig+0x9e>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004632:	f7fe f9cf 	bl	80029d4 <HAL_GetTick>
 8004636:	1bc0      	subs	r0, r0, r7
 8004638:	4540      	cmp	r0, r8
 800463a:	f200 8090 	bhi.w	800475e <HAL_RCC_ClockConfig+0x1be>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800463e:	6873      	ldr	r3, [r6, #4]
 8004640:	6862      	ldr	r2, [r4, #4]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800464a:	d1f2      	bne.n	8004632 <HAL_RCC_ClockConfig+0x92>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800464c:	4a45      	ldr	r2, [pc, #276]	; (8004764 <HAL_RCC_ClockConfig+0x1c4>)
 800464e:	6813      	ldr	r3, [r2, #0]
 8004650:	f003 0307 	and.w	r3, r3, #7
 8004654:	42ab      	cmp	r3, r5
 8004656:	d909      	bls.n	800466c <HAL_RCC_ClockConfig+0xcc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004658:	6813      	ldr	r3, [r2, #0]
 800465a:	f023 0307 	bic.w	r3, r3, #7
 800465e:	432b      	orrs	r3, r5
 8004660:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004662:	6813      	ldr	r3, [r2, #0]
 8004664:	f003 0307 	and.w	r3, r3, #7
 8004668:	42ab      	cmp	r3, r5
 800466a:	d1b0      	bne.n	80045ce <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800466c:	6823      	ldr	r3, [r4, #0]
 800466e:	0758      	lsls	r0, r3, #29
 8004670:	d506      	bpl.n	8004680 <HAL_RCC_ClockConfig+0xe0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004672:	493d      	ldr	r1, [pc, #244]	; (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 8004674:	68e0      	ldr	r0, [r4, #12]
 8004676:	684a      	ldr	r2, [r1, #4]
 8004678:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800467c:	4302      	orrs	r2, r0
 800467e:	604a      	str	r2, [r1, #4]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004680:	0719      	lsls	r1, r3, #28
 8004682:	d507      	bpl.n	8004694 <HAL_RCC_ClockConfig+0xf4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004684:	4a38      	ldr	r2, [pc, #224]	; (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 8004686:	6921      	ldr	r1, [r4, #16]
 8004688:	6853      	ldr	r3, [r2, #4]
 800468a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800468e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004692:	6053      	str	r3, [r2, #4]
uint32_t HAL_RCC_GetSysClockFreq(void)
{
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8004694:	4934      	ldr	r1, [pc, #208]	; (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 8004696:	684a      	ldr	r2, [r1, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004698:	f002 030c 	and.w	r3, r2, #12
 800469c:	2b08      	cmp	r3, #8
 800469e:	d017      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x130>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80046a0:	4932      	ldr	r1, [pc, #200]	; (800476c <HAL_RCC_ClockConfig+0x1cc>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046a2:	4b31      	ldr	r3, [pc, #196]	; (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 80046a4:	22f0      	movs	r2, #240	; 0xf0
 80046a6:	685b      	ldr	r3, [r3, #4]
 80046a8:	fa92 f2a2 	rbit	r2, r2
 80046ac:	fab2 f282 	clz	r2, r2
 80046b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046b4:	40d3      	lsrs	r3, r2
 80046b6:	4a2e      	ldr	r2, [pc, #184]	; (8004770 <HAL_RCC_ClockConfig+0x1d0>)
  HAL_InitTick (uwTickPrio);
 80046b8:	482e      	ldr	r0, [pc, #184]	; (8004774 <HAL_RCC_ClockConfig+0x1d4>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046ba:	5cd3      	ldrb	r3, [r2, r3]
 80046bc:	4a2e      	ldr	r2, [pc, #184]	; (8004778 <HAL_RCC_ClockConfig+0x1d8>)
  HAL_InitTick (uwTickPrio);
 80046be:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80046c0:	fa21 f303 	lsr.w	r3, r1, r3
 80046c4:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80046c6:	f7fe f943 	bl	8002950 <HAL_InitTick>
  return HAL_OK;
 80046ca:	2000      	movs	r0, #0
}
 80046cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046d0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80046d4:	fa93 f3a3 	rbit	r3, r3
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80046d8:	f402 1070 	and.w	r0, r2, #3932160	; 0x3c0000
 80046dc:	fab3 f383 	clz	r3, r3
 80046e0:	4c26      	ldr	r4, [pc, #152]	; (800477c <HAL_RCC_ClockConfig+0x1dc>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80046e2:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80046e4:	fa20 f303 	lsr.w	r3, r0, r3
 80046e8:	200f      	movs	r0, #15
 80046ea:	5ce3      	ldrb	r3, [r4, r3]
 80046ec:	fa90 f0a0 	rbit	r0, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80046f0:	fab0 f080 	clz	r0, r0
 80046f4:	f001 010f 	and.w	r1, r1, #15
 80046f8:	40c1      	lsrs	r1, r0
 80046fa:	4c21      	ldr	r4, [pc, #132]	; (8004780 <HAL_RCC_ClockConfig+0x1e0>)
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80046fc:	03d2      	lsls	r2, r2, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80046fe:	5c60      	ldrb	r0, [r4, r1]
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004700:	bf4a      	itet	mi
 8004702:	491a      	ldrmi	r1, [pc, #104]	; (800476c <HAL_RCC_ClockConfig+0x1cc>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004704:	491f      	ldrpl	r1, [pc, #124]	; (8004784 <HAL_RCC_ClockConfig+0x1e4>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004706:	fbb1 f1f0 	udivmi	r1, r1, r0
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800470a:	fb03 f101 	mul.w	r1, r3, r1
 800470e:	e7c8      	b.n	80046a2 <HAL_RCC_ClockConfig+0x102>
 8004710:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004714:	fa93 f2a3 	rbit	r2, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004718:	4a13      	ldr	r2, [pc, #76]	; (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 800471a:	6810      	ldr	r0, [r2, #0]
 800471c:	fa93 f3a3 	rbit	r3, r3
 8004720:	fab3 f383 	clz	r3, r3
 8004724:	f003 031f 	and.w	r3, r3, #31
 8004728:	2201      	movs	r2, #1
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	4203      	tst	r3, r0
 8004730:	f47f af73 	bne.w	800461a <HAL_RCC_ClockConfig+0x7a>
 8004734:	e74b      	b.n	80045ce <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004736:	2001      	movs	r0, #1
}
 8004738:	4770      	bx	lr
 800473a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800473e:	fa92 f3a2 	rbit	r3, r2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004742:	4b09      	ldr	r3, [pc, #36]	; (8004768 <HAL_RCC_ClockConfig+0x1c8>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	fa92 f2a2 	rbit	r2, r2
 800474a:	fab2 f282 	clz	r2, r2
 800474e:	f002 021f 	and.w	r2, r2, #31
 8004752:	fa01 f202 	lsl.w	r2, r1, r2
 8004756:	421a      	tst	r2, r3
 8004758:	f47f af5f 	bne.w	800461a <HAL_RCC_ClockConfig+0x7a>
 800475c:	e737      	b.n	80045ce <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 800475e:	2003      	movs	r0, #3
 8004760:	e736      	b.n	80045d0 <HAL_RCC_ClockConfig+0x30>
 8004762:	bf00      	nop
 8004764:	40022000 	.word	0x40022000
 8004768:	40021000 	.word	0x40021000
 800476c:	007a1200 	.word	0x007a1200
 8004770:	08007c98 	.word	0x08007c98
 8004774:	20000480 	.word	0x20000480
 8004778:	20000478 	.word	0x20000478
 800477c:	08007cb0 	.word	0x08007cb0
 8004780:	08007cc0 	.word	0x08007cc0
 8004784:	003d0900 	.word	0x003d0900

08004788 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8004788:	4915      	ldr	r1, [pc, #84]	; (80047e0 <HAL_RCC_GetSysClockFreq+0x58>)
 800478a:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 800478c:	f003 020c 	and.w	r2, r3, #12
 8004790:	2a08      	cmp	r2, #8
 8004792:	d001      	beq.n	8004798 <HAL_RCC_GetSysClockFreq+0x10>
      sysclockfreq = HSE_VALUE;
 8004794:	4813      	ldr	r0, [pc, #76]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004796:	4770      	bx	lr
{
 8004798:	b410      	push	{r4}
 800479a:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800479e:	fa92 f2a2 	rbit	r2, r2
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047a2:	fab2 f282 	clz	r2, r2
 80047a6:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 80047aa:	4c0f      	ldr	r4, [pc, #60]	; (80047e8 <HAL_RCC_GetSysClockFreq+0x60>)
 80047ac:	40d0      	lsrs	r0, r2
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047ae:	6aca      	ldr	r2, [r1, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80047b0:	5c20      	ldrb	r0, [r4, r0]
 80047b2:	210f      	movs	r1, #15
 80047b4:	fa91 f1a1 	rbit	r1, r1
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80047b8:	03db      	lsls	r3, r3, #15
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047ba:	fab1 f181 	clz	r1, r1
 80047be:	f002 020f 	and.w	r2, r2, #15
 80047c2:	4c0a      	ldr	r4, [pc, #40]	; (80047ec <HAL_RCC_GetSysClockFreq+0x64>)
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047c4:	bf4c      	ite	mi
 80047c6:	4b07      	ldrmi	r3, [pc, #28]	; (80047e4 <HAL_RCC_GetSysClockFreq+0x5c>)
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80047c8:	4b09      	ldrpl	r3, [pc, #36]	; (80047f0 <HAL_RCC_GetSysClockFreq+0x68>)
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80047ca:	fa22 f201 	lsr.w	r2, r2, r1
 80047ce:	5ca2      	ldrb	r2, [r4, r2]
}
 80047d0:	f85d 4b04 	ldr.w	r4, [sp], #4
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80047d4:	bf48      	it	mi
 80047d6:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80047da:	fb03 f000 	mul.w	r0, r3, r0
}
 80047de:	4770      	bx	lr
 80047e0:	40021000 	.word	0x40021000
 80047e4:	007a1200 	.word	0x007a1200
 80047e8:	08007cb0 	.word	0x08007cb0
 80047ec:	08007cc0 	.word	0x08007cc0
 80047f0:	003d0900 	.word	0x003d0900

080047f4 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 80047f4:	4b01      	ldr	r3, [pc, #4]	; (80047fc <HAL_RCC_GetHCLKFreq+0x8>)
}
 80047f6:	6818      	ldr	r0, [r3, #0]
 80047f8:	4770      	bx	lr
 80047fa:	bf00      	nop
 80047fc:	20000478 	.word	0x20000478

08004800 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004800:	4b08      	ldr	r3, [pc, #32]	; (8004824 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004802:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	fa92 f2a2 	rbit	r2, r2
 800480c:	fab2 f282 	clz	r2, r2
 8004810:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004814:	4904      	ldr	r1, [pc, #16]	; (8004828 <HAL_RCC_GetPCLK1Freq+0x28>)
  return SystemCoreClock;
 8004816:	4805      	ldr	r0, [pc, #20]	; (800482c <HAL_RCC_GetPCLK1Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004818:	40d3      	lsrs	r3, r2
 800481a:	6800      	ldr	r0, [r0, #0]
 800481c:	5ccb      	ldrb	r3, [r1, r3]
}    
 800481e:	40d8      	lsrs	r0, r3
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	40021000 	.word	0x40021000
 8004828:	08007ca8 	.word	0x08007ca8
 800482c:	20000478 	.word	0x20000478

08004830 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004830:	4b08      	ldr	r3, [pc, #32]	; (8004854 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004832:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	fa92 f2a2 	rbit	r2, r2
 800483c:	fab2 f282 	clz	r2, r2
 8004840:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004844:	4904      	ldr	r1, [pc, #16]	; (8004858 <HAL_RCC_GetPCLK2Freq+0x28>)
  return SystemCoreClock;
 8004846:	4805      	ldr	r0, [pc, #20]	; (800485c <HAL_RCC_GetPCLK2Freq+0x2c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004848:	40d3      	lsrs	r3, r2
 800484a:	6800      	ldr	r0, [r0, #0]
 800484c:	5ccb      	ldrb	r3, [r1, r3]
} 
 800484e:	40d8      	lsrs	r0, r3
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40021000 	.word	0x40021000
 8004858:	08007ca8 	.word	0x08007ca8
 800485c:	20000478 	.word	0x20000478

08004860 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004860:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004864:	6803      	ldr	r3, [r0, #0]
{
 8004866:	4604      	mov	r4, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004868:	03d8      	lsls	r0, r3, #15
{
 800486a:	b083      	sub	sp, #12
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800486c:	d540      	bpl.n	80048f0 <HAL_RCCEx_PeriphCLKConfig+0x90>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800486e:	4b7b      	ldr	r3, [pc, #492]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004870:	69da      	ldr	r2, [r3, #28]
 8004872:	00d1      	lsls	r1, r2, #3
 8004874:	f140 80a8 	bpl.w	80049c8 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004878:	4e79      	ldr	r6, [pc, #484]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 800487a:	6833      	ldr	r3, [r6, #0]
 800487c:	05da      	lsls	r2, r3, #23
  FlagStatus       pwrclkchanged = RESET;
 800487e:	f04f 0500 	mov.w	r5, #0
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004882:	f140 80b1 	bpl.w	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004886:	f8df 81d4 	ldr.w	r8, [pc, #468]	; 8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
 800488a:	f8d8 3020 	ldr.w	r3, [r8, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800488e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8004892:	d020      	beq.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004894:	6861      	ldr	r1, [r4, #4]
 8004896:	f401 7240 	and.w	r2, r1, #768	; 0x300
 800489a:	429a      	cmp	r2, r3
 800489c:	d01c      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x78>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800489e:	f8d8 1020 	ldr.w	r1, [r8, #32]
 80048a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80048a6:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80048aa:	fa93 f2a3 	rbit	r2, r3
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80048ae:	4f6d      	ldr	r7, [pc, #436]	; (8004a64 <HAL_RCCEx_PeriphCLKConfig+0x204>)
 80048b0:	fab2 f282 	clz	r2, r2
 80048b4:	443a      	add	r2, r7
 80048b6:	0092      	lsls	r2, r2, #2
 80048b8:	2601      	movs	r6, #1
 80048ba:	6016      	str	r6, [r2, #0]
 80048bc:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048c0:	fab3 f383 	clz	r3, r3
 80048c4:	443b      	add	r3, r7
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	2200      	movs	r2, #0
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048ca:	07cf      	lsls	r7, r1, #31
      __HAL_RCC_BACKUPRESET_RELEASE();
 80048cc:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80048ce:	f8c8 0020 	str.w	r0, [r8, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80048d2:	f100 809d 	bmi.w	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80048d6:	6861      	ldr	r1, [r4, #4]
 80048d8:	4a60      	ldr	r2, [pc, #384]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80048da:	6a13      	ldr	r3, [r2, #32]
 80048dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048e0:	430b      	orrs	r3, r1
 80048e2:	6213      	str	r3, [r2, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80048e4:	b11d      	cbz	r5, 80048ee <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048e6:	69d3      	ldr	r3, [r2, #28]
 80048e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ec:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80048ee:	6823      	ldr	r3, [r4, #0]
 80048f0:	07dd      	lsls	r5, r3, #31
 80048f2:	d506      	bpl.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0xa2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80048f4:	4959      	ldr	r1, [pc, #356]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80048f6:	68a0      	ldr	r0, [r4, #8]
 80048f8:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 80048fa:	f022 0203 	bic.w	r2, r2, #3
 80048fe:	4302      	orrs	r2, r0
 8004900:	630a      	str	r2, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004902:	0698      	lsls	r0, r3, #26
 8004904:	d506      	bpl.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xb4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004906:	4955      	ldr	r1, [pc, #340]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004908:	68e0      	ldr	r0, [r4, #12]
 800490a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800490c:	f022 0210 	bic.w	r2, r2, #16
 8004910:	4302      	orrs	r2, r0
 8004912:	630a      	str	r2, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004914:	0399      	lsls	r1, r3, #14
 8004916:	d506      	bpl.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8004918:	4950      	ldr	r1, [pc, #320]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800491a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800491c:	684a      	ldr	r2, [r1, #4]
 800491e:	f422 0280 	bic.w	r2, r2, #4194304	; 0x400000
 8004922:	4302      	orrs	r2, r0
 8004924:	604a      	str	r2, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004926:	065a      	lsls	r2, r3, #25
 8004928:	d506      	bpl.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800492a:	494c      	ldr	r1, [pc, #304]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800492c:	6920      	ldr	r0, [r4, #16]
 800492e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004930:	f022 0220 	bic.w	r2, r2, #32
 8004934:	4302      	orrs	r2, r0
 8004936:	630a      	str	r2, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004938:	041f      	lsls	r7, r3, #16
 800493a:	d506      	bpl.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800493c:	4947      	ldr	r1, [pc, #284]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800493e:	6960      	ldr	r0, [r4, #20]
 8004940:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004942:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004946:	4302      	orrs	r2, r0
 8004948:	630a      	str	r2, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800494a:	059e      	lsls	r6, r3, #22
 800494c:	d506      	bpl.n	800495c <HAL_RCCEx_PeriphCLKConfig+0xfc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800494e:	4943      	ldr	r1, [pc, #268]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004950:	69e0      	ldr	r0, [r4, #28]
 8004952:	684a      	ldr	r2, [r1, #4]
 8004954:	f422 0200 	bic.w	r2, r2, #8388608	; 0x800000
 8004958:	4302      	orrs	r2, r0
 800495a:	604a      	str	r2, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 800495c:	061d      	lsls	r5, r3, #24
 800495e:	d506      	bpl.n	800496e <HAL_RCCEx_PeriphCLKConfig+0x10e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8004960:	493e      	ldr	r1, [pc, #248]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004962:	69a0      	ldr	r0, [r4, #24]
 8004964:	6aca      	ldr	r2, [r1, #44]	; 0x2c
 8004966:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 800496a:	4302      	orrs	r2, r0
 800496c:	62ca      	str	r2, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800496e:	04d8      	lsls	r0, r3, #19
 8004970:	d506      	bpl.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004972:	493a      	ldr	r1, [pc, #232]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004974:	6a20      	ldr	r0, [r4, #32]
 8004976:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 8004978:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800497c:	4302      	orrs	r2, r0
 800497e:	630a      	str	r2, [r1, #48]	; 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004980:	0359      	lsls	r1, r3, #13
 8004982:	d506      	bpl.n	8004992 <HAL_RCCEx_PeriphCLKConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004984:	4935      	ldr	r1, [pc, #212]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004986:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8004988:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800498a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800498e:	4302      	orrs	r2, r0
 8004990:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004992:	031a      	lsls	r2, r3, #12
 8004994:	d506      	bpl.n	80049a4 <HAL_RCCEx_PeriphCLKConfig+0x144>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004996:	4931      	ldr	r1, [pc, #196]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8004998:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800499a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
 800499c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a0:	4302      	orrs	r2, r0
 80049a2:	630a      	str	r2, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80049a4:	f413 1380 	ands.w	r3, r3, #1048576	; 0x100000
 80049a8:	d103      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80049aa:	4618      	mov	r0, r3
}
 80049ac:	b003      	add	sp, #12
 80049ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80049b2:	4a2a      	ldr	r2, [pc, #168]	; (8004a5c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 80049b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80049b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80049b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  return HAL_OK;
 80049bc:	2000      	movs	r0, #0
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80049be:	430b      	orrs	r3, r1
 80049c0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80049c2:	b003      	add	sp, #12
 80049c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c8:	69da      	ldr	r2, [r3, #28]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049ca:	4e25      	ldr	r6, [pc, #148]	; (8004a60 <HAL_RCCEx_PeriphCLKConfig+0x200>)
      __HAL_RCC_PWR_CLK_ENABLE();
 80049cc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80049d0:	61da      	str	r2, [r3, #28]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049d8:	9301      	str	r3, [sp, #4]
 80049da:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049dc:	6833      	ldr	r3, [r6, #0]
 80049de:	05da      	lsls	r2, r3, #23
      pwrclkchanged = SET;
 80049e0:	f04f 0501 	mov.w	r5, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e4:	f53f af4f 	bmi.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0x26>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049e8:	6833      	ldr	r3, [r6, #0]
 80049ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049ee:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80049f0:	f7fd fff0 	bl	80029d4 <HAL_GetTick>
 80049f4:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049f6:	6833      	ldr	r3, [r6, #0]
 80049f8:	05db      	lsls	r3, r3, #23
 80049fa:	f53f af44 	bmi.w	8004886 <HAL_RCCEx_PeriphCLKConfig+0x26>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049fe:	f7fd ffe9 	bl	80029d4 <HAL_GetTick>
 8004a02:	1bc0      	subs	r0, r0, r7
 8004a04:	2864      	cmp	r0, #100	; 0x64
 8004a06:	d9f6      	bls.n	80049f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
          return HAL_TIMEOUT;
 8004a08:	2003      	movs	r0, #3
}
 8004a0a:	b003      	add	sp, #12
 8004a0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        tickstart = HAL_GetTick();
 8004a10:	f7fd ffe0 	bl	80029d4 <HAL_GetTick>
 8004a14:	f04f 0902 	mov.w	r9, #2
 8004a18:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a1a:	e015      	b.n	8004a48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004a1c:	fa99 f3a9 	rbit	r3, r9
 8004a20:	f8d8 2024 	ldr.w	r2, [r8, #36]	; 0x24
 8004a24:	fa99 f3a9 	rbit	r3, r9
 8004a28:	fab3 f383 	clz	r3, r3
 8004a2c:	f003 031f 	and.w	r3, r3, #31
 8004a30:	fa06 f303 	lsl.w	r3, r6, r3
 8004a34:	4213      	tst	r3, r2
 8004a36:	f47f af4e 	bne.w	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3a:	f7fd ffcb 	bl	80029d4 <HAL_GetTick>
 8004a3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a42:	1bc0      	subs	r0, r0, r7
 8004a44:	4298      	cmp	r0, r3
 8004a46:	d8df      	bhi.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004a48:	fa99 f3a9 	rbit	r3, r9
 8004a4c:	fa99 f3a9 	rbit	r3, r9
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d0e3      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
 8004a54:	f8d8 2020 	ldr.w	r2, [r8, #32]
 8004a58:	e7e4      	b.n	8004a24 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
 8004a5a:	bf00      	nop
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40007000 	.word	0x40007000
 8004a64:	10908100 	.word	0x10908100

08004a68 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a68:	6a03      	ldr	r3, [r0, #32]
 8004a6a:	f023 0301 	bic.w	r3, r3, #1
 8004a6e:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a70:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a72:	6842      	ldr	r2, [r0, #4]
{
 8004a74:	b470      	push	{r4, r5, r6}
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004a76:	688d      	ldr	r5, [r1, #8]
  tmpccmrx = TIMx->CCMR1;
 8004a78:	6984      	ldr	r4, [r0, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8004a7a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8004a7e:	432b      	orrs	r3, r5

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a80:	4d15      	ldr	r5, [pc, #84]	; (8004ad8 <TIM_OC1_SetConfig+0x70>)
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a82:	f424 3c80 	bic.w	ip, r4, #65536	; 0x10000
  tmpccmrx |= OC_Config->OCMode;
 8004a86:	680c      	ldr	r4, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004a88:	f02c 0c73 	bic.w	ip, ip, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a8c:	42a8      	cmp	r0, r5
  tmpccmrx |= OC_Config->OCMode;
 8004a8e:	ea4c 0404 	orr.w	r4, ip, r4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004a92:	d00b      	beq.n	8004aac <TIM_OC1_SetConfig+0x44>
 8004a94:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8004a98:	42a8      	cmp	r0, r5
 8004a9a:	d007      	beq.n	8004aac <TIM_OC1_SetConfig+0x44>
 8004a9c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004aa0:	42a8      	cmp	r0, r5
 8004aa2:	d003      	beq.n	8004aac <TIM_OC1_SetConfig+0x44>
 8004aa4:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004aa8:	42a8      	cmp	r0, r5
 8004aaa:	d10d      	bne.n	8004ac8 <TIM_OC1_SetConfig+0x60>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004aac:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8004aae:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8004ab2:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ab4:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004ab8:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8004abc:	ea46 0c05 	orr.w	ip, r6, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ac0:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8004ac4:	ea4c 0202 	orr.w	r2, ip, r2

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004ac8:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004aca:	6042      	str	r2, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004acc:	6184      	str	r4, [r0, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 8004ace:	6341      	str	r1, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004ad0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCER = tmpccer;
 8004ad2:	6203      	str	r3, [r0, #32]
}
 8004ad4:	4770      	bx	lr
 8004ad6:	bf00      	nop
 8004ad8:	40012c00 	.word	0x40012c00

08004adc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004adc:	6a03      	ldr	r3, [r0, #32]
 8004ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ae2:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae4:	6a03      	ldr	r3, [r0, #32]
{
 8004ae6:	b470      	push	{r4, r5, r6}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ae8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004aea:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004aec:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004aee:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004af2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8004af6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004af8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8004afa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004afe:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b02:	4d12      	ldr	r5, [pc, #72]	; (8004b4c <TIM_OC3_SetConfig+0x70>)
 8004b04:	42a8      	cmp	r0, r5
 8004b06:	d018      	beq.n	8004b3a <TIM_OC3_SetConfig+0x5e>
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b08:	4d11      	ldr	r5, [pc, #68]	; (8004b50 <TIM_OC3_SetConfig+0x74>)
 8004b0a:	42a8      	cmp	r0, r5
 8004b0c:	d006      	beq.n	8004b1c <TIM_OC3_SetConfig+0x40>
 8004b0e:	4d11      	ldr	r5, [pc, #68]	; (8004b54 <TIM_OC3_SetConfig+0x78>)
 8004b10:	42a8      	cmp	r0, r5
 8004b12:	d003      	beq.n	8004b1c <TIM_OC3_SetConfig+0x40>
 8004b14:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004b18:	42a8      	cmp	r0, r5
 8004b1a:	d107      	bne.n	8004b2c <TIM_OC3_SetConfig+0x50>
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b1c:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b20:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b24:	ea46 0c05 	orr.w	ip, r6, r5
 8004b28:	ea44 140c 	orr.w	r4, r4, ip, lsl #4

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b2c:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004b2e:	6044      	str	r4, [r0, #4]
  TIMx->CCMR2 = tmpccmrx;
 8004b30:	61c2      	str	r2, [r0, #28]

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
}
 8004b32:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR3 = OC_Config->Pulse;
 8004b34:	63c1      	str	r1, [r0, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8004b36:	6203      	str	r3, [r0, #32]
}
 8004b38:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b3a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b40:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b44:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b48:	e7e8      	b.n	8004b1c <TIM_OC3_SetConfig+0x40>
 8004b4a:	bf00      	nop
 8004b4c:	40012c00 	.word	0x40012c00
 8004b50:	40014000 	.word	0x40014000
 8004b54:	40014400 	.word	0x40014400

08004b58 <HAL_TIM_Base_Init>:
  if (htim == NULL)
 8004b58:	2800      	cmp	r0, #0
 8004b5a:	d074      	beq.n	8004c46 <HAL_TIM_Base_Init+0xee>
{
 8004b5c:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004b5e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004b62:	4604      	mov	r4, r0
 8004b64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d04b      	beq.n	8004c04 <HAL_TIM_Base_Init+0xac>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b6c:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b6e:	4937      	ldr	r1, [pc, #220]	; (8004c4c <HAL_TIM_Base_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004b70:	2302      	movs	r3, #2
 8004b72:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b76:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004b78:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004b7a:	d048      	beq.n	8004c0e <HAL_TIM_Base_Init+0xb6>
 8004b7c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004b80:	d04f      	beq.n	8004c22 <HAL_TIM_Base_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004b82:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8004b86:	428a      	cmp	r2, r1
 8004b88:	d011      	beq.n	8004bae <HAL_TIM_Base_Init+0x56>
 8004b8a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b8e:	428a      	cmp	r2, r1
 8004b90:	d00d      	beq.n	8004bae <HAL_TIM_Base_Init+0x56>
 8004b92:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004b96:	428a      	cmp	r2, r1
 8004b98:	d009      	beq.n	8004bae <HAL_TIM_Base_Init+0x56>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b9a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b9c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004b9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ba2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004ba4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004ba6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ba8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004baa:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004bac:	e00e      	b.n	8004bcc <HAL_TIM_Base_Init+0x74>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bae:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb0:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004bb6:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbc:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004bbe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004bc0:	68e3      	ldr	r3, [r4, #12]
 8004bc2:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004bc4:	6863      	ldr	r3, [r4, #4]
 8004bc6:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004bc8:	6963      	ldr	r3, [r4, #20]
 8004bca:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bd0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bd4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004bd8:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004bdc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004be0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004be4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bec:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004bf0:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bf4:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004bf8:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004bfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004c00:	2000      	movs	r0, #0
}
 8004c02:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004c04:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004c08:	f7fd fd8a 	bl	8002720 <HAL_TIM_Base_MspInit>
 8004c0c:	e7ae      	b.n	8004b6c <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004c0e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c10:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c16:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c1c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c1e:	69a1      	ldr	r1, [r4, #24]
 8004c20:	e7ca      	b.n	8004bb8 <HAL_TIM_Base_Init+0x60>
    tmpcr1 |= Structure->CounterMode;
 8004c22:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c24:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004c2a:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004c2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004c30:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c32:	69a1      	ldr	r1, [r4, #24]
 8004c34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c38:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004c3a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c3c:	68e3      	ldr	r3, [r4, #12]
 8004c3e:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004c40:	6863      	ldr	r3, [r4, #4]
 8004c42:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004c44:	e7c2      	b.n	8004bcc <HAL_TIM_Base_Init+0x74>
    return HAL_ERROR;
 8004c46:	2001      	movs	r0, #1
}
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	40012c00 	.word	0x40012c00

08004c50 <HAL_TIM_PWM_MspInit>:
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop

08004c54 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004c54:	2800      	cmp	r0, #0
 8004c56:	d074      	beq.n	8004d42 <HAL_TIM_PWM_Init+0xee>
{
 8004c58:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004c5e:	4604      	mov	r4, r0
 8004c60:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d04b      	beq.n	8004d00 <HAL_TIM_PWM_Init+0xac>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c68:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c6a:	4937      	ldr	r1, [pc, #220]	; (8004d48 <HAL_TIM_PWM_Init+0xf4>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c72:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004c74:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c76:	d048      	beq.n	8004d0a <HAL_TIM_PWM_Init+0xb6>
 8004c78:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004c7c:	d04f      	beq.n	8004d1e <HAL_TIM_PWM_Init+0xca>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c7e:	f501 51a0 	add.w	r1, r1, #5120	; 0x1400
 8004c82:	428a      	cmp	r2, r1
 8004c84:	d011      	beq.n	8004caa <HAL_TIM_PWM_Init+0x56>
 8004c86:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c8a:	428a      	cmp	r2, r1
 8004c8c:	d00d      	beq.n	8004caa <HAL_TIM_PWM_Init+0x56>
 8004c8e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004c92:	428a      	cmp	r2, r1
 8004c94:	d009      	beq.n	8004caa <HAL_TIM_PWM_Init+0x56>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c96:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004c98:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c9e:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004ca0:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004ca2:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ca4:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004ca6:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ca8:	e00e      	b.n	8004cc8 <HAL_TIM_PWM_Init+0x74>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004caa:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cac:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cb2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cb4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004cb8:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004cba:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cbc:	68e3      	ldr	r3, [r4, #12]
 8004cbe:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004cc0:	6863      	ldr	r3, [r4, #4]
 8004cc2:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004cc4:	6963      	ldr	r3, [r4, #20]
 8004cc6:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8004cc8:	2301      	movs	r3, #1
 8004cca:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ccc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cd0:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004cd4:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004cd8:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004cdc:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
 8004ce0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ce4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce8:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004cec:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cf0:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
 8004cf4:	f884 3047 	strb.w	r3, [r4, #71]	; 0x47
  htim->State = HAL_TIM_STATE_READY;
 8004cf8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004cfc:	2000      	movs	r0, #0
}
 8004cfe:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004d00:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004d04:	f7ff ffa4 	bl	8004c50 <HAL_TIM_PWM_MspInit>
 8004d08:	e7ae      	b.n	8004c68 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004d0a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d0c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d12:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d18:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d1a:	69a1      	ldr	r1, [r4, #24]
 8004d1c:	e7ca      	b.n	8004cb4 <HAL_TIM_PWM_Init+0x60>
    tmpcr1 |= Structure->CounterMode;
 8004d1e:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d20:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004d26:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d2c:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d2e:	69a1      	ldr	r1, [r4, #24]
 8004d30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004d34:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004d36:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d38:	68e3      	ldr	r3, [r4, #12]
 8004d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004d3c:	6863      	ldr	r3, [r4, #4]
 8004d3e:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d40:	e7c2      	b.n	8004cc8 <HAL_TIM_PWM_Init+0x74>
    return HAL_ERROR;
 8004d42:	2001      	movs	r0, #1
}
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40012c00 	.word	0x40012c00

08004d4c <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8004d4c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d052      	beq.n	8004dfa <HAL_TIM_SlaveConfigSynchro+0xae>
 8004d54:	4602      	mov	r2, r0
{
 8004d56:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8004d58:	2302      	movs	r3, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004d5a:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8004d5c:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 8004d60:	2001      	movs	r0, #1
 8004d62:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8004d66:	68a3      	ldr	r3, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004d68:	6848      	ldr	r0, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004d6a:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8004d70:	4303      	orrs	r3, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d76:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004d7a:	432b      	orrs	r3, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004d7c:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 8004d7e:	60a3      	str	r3, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 8004d80:	d060      	beq.n	8004e44 <HAL_TIM_SlaveConfigSynchro+0xf8>
 8004d82:	d90f      	bls.n	8004da4 <HAL_TIM_SlaveConfigSynchro+0x58>
 8004d84:	2860      	cmp	r0, #96	; 0x60
 8004d86:	d03a      	beq.n	8004dfe <HAL_TIM_SlaveConfigSynchro+0xb2>
 8004d88:	2870      	cmp	r0, #112	; 0x70
 8004d8a:	d10e      	bne.n	8004daa <HAL_TIM_SlaveConfigSynchro+0x5e>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d8c:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 8004d90:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d92:	432b      	orrs	r3, r5
 8004d94:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d96:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d9a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8004d9e:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004da0:	60a3      	str	r3, [r4, #8]
 8004da2:	e00f      	b.n	8004dc4 <HAL_TIM_SlaveConfigSynchro+0x78>
  switch (sSlaveConfig->InputTrigger)
 8004da4:	2840      	cmp	r0, #64	; 0x40
 8004da6:	d03d      	beq.n	8004e24 <HAL_TIM_SlaveConfigSynchro+0xd8>
 8004da8:	d907      	bls.n	8004dba <HAL_TIM_SlaveConfigSynchro+0x6e>
    htim->State = HAL_TIM_STATE_READY;
 8004daa:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8004dac:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8004dae:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004db2:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8004db6:	bc70      	pop	{r4, r5, r6}
 8004db8:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004dba:	2820      	cmp	r0, #32
 8004dbc:	d002      	beq.n	8004dc4 <HAL_TIM_SlaveConfigSynchro+0x78>
 8004dbe:	d912      	bls.n	8004de6 <HAL_TIM_SlaveConfigSynchro+0x9a>
 8004dc0:	2830      	cmp	r0, #48	; 0x30
 8004dc2:	d1f2      	bne.n	8004daa <HAL_TIM_SlaveConfigSynchro+0x5e>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8004dc4:	68e3      	ldr	r3, [r4, #12]
 8004dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dca:	60e3      	str	r3, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004dcc:	68e3      	ldr	r3, [r4, #12]
  __HAL_UNLOCK(htim);
 8004dce:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8004dd2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dd6:	60e3      	str	r3, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8004dd8:	f882 503d 	strb.w	r5, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8004ddc:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c
  return HAL_OK;
 8004de0:	4608      	mov	r0, r1
}
 8004de2:	bc70      	pop	{r4, r5, r6}
 8004de4:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8004de6:	f030 0310 	bics.w	r3, r0, #16
 8004dea:	d0eb      	beq.n	8004dc4 <HAL_TIM_SlaveConfigSynchro+0x78>
    htim->State = HAL_TIM_STATE_READY;
 8004dec:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8004dee:	2300      	movs	r3, #0
    htim->State = HAL_TIM_STATE_READY;
 8004df0:	f882 003d 	strb.w	r0, [r2, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8004df4:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
    return HAL_ERROR;
 8004df8:	e7dd      	b.n	8004db6 <HAL_TIM_SlaveConfigSynchro+0x6a>
  __HAL_LOCK(htim);
 8004dfa:	2002      	movs	r0, #2
}
 8004dfc:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004dfe:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e00:	690b      	ldr	r3, [r1, #16]
 8004e02:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e04:	f020 0010 	bic.w	r0, r0, #16
 8004e08:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e0a:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e0c:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e10:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 8004e14:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8004e16:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e18:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e1c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 8004e20:	6223      	str	r3, [r4, #32]
 8004e22:	e7cf      	b.n	8004dc4 <HAL_TIM_SlaveConfigSynchro+0x78>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004e24:	2d05      	cmp	r5, #5
 8004e26:	d0c0      	beq.n	8004daa <HAL_TIM_SlaveConfigSynchro+0x5e>
      tmpccer = htim->Instance->CCER;
 8004e28:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e2a:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e2c:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004e2e:	f020 0001 	bic.w	r0, r0, #1
 8004e32:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004e34:	69a3      	ldr	r3, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004e3a:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8004e3e:	61a3      	str	r3, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8004e40:	6225      	str	r5, [r4, #32]
      break;
 8004e42:	e7bf      	b.n	8004dc4 <HAL_TIM_SlaveConfigSynchro+0x78>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e44:	6888      	ldr	r0, [r1, #8]
 8004e46:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8004e48:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004e4a:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8004e4e:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e50:	6a20      	ldr	r0, [r4, #32]
 8004e52:	f020 0001 	bic.w	r0, r0, #1
 8004e56:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e58:	69a3      	ldr	r3, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e5e:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8004e62:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8004e64:	6221      	str	r1, [r4, #32]
 8004e66:	e7ad      	b.n	8004dc4 <HAL_TIM_SlaveConfigSynchro+0x78>

08004e68 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e68:	6a03      	ldr	r3, [r0, #32]
 8004e6a:	f023 0310 	bic.w	r3, r3, #16
 8004e6e:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 8004e70:	6a03      	ldr	r3, [r0, #32]
{
 8004e72:	b470      	push	{r4, r5, r6}
  tmpcr2 =  TIMx->CR2;
 8004e74:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 8004e76:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e78:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e7a:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004e7e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e82:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e86:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8004e88:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e8c:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e90:	4d11      	ldr	r5, [pc, #68]	; (8004ed8 <TIM_OC2_SetConfig+0x70>)
 8004e92:	42a8      	cmp	r0, r5
 8004e94:	d018      	beq.n	8004ec8 <TIM_OC2_SetConfig+0x60>
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e96:	4d11      	ldr	r5, [pc, #68]	; (8004edc <TIM_OC2_SetConfig+0x74>)
 8004e98:	42a8      	cmp	r0, r5
 8004e9a:	d006      	beq.n	8004eaa <TIM_OC2_SetConfig+0x42>
 8004e9c:	4d10      	ldr	r5, [pc, #64]	; (8004ee0 <TIM_OC2_SetConfig+0x78>)
 8004e9e:	42a8      	cmp	r0, r5
 8004ea0:	d003      	beq.n	8004eaa <TIM_OC2_SetConfig+0x42>
 8004ea2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004ea6:	42a8      	cmp	r0, r5
 8004ea8:	d107      	bne.n	8004eba <TIM_OC2_SetConfig+0x52>
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eaa:	e9d1 6505 	ldrd	r6, r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004eae:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004eb2:	ea46 0c05 	orr.w	ip, r6, r5
 8004eb6:	ea44 048c 	orr.w	r4, r4, ip, lsl #2
  TIMx->CCR2 = OC_Config->Pulse;
 8004eba:	6849      	ldr	r1, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8004ebc:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8004ebe:	6182      	str	r2, [r0, #24]
}
 8004ec0:	bc70      	pop	{r4, r5, r6}
  TIMx->CCR2 = OC_Config->Pulse;
 8004ec2:	6381      	str	r1, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8004ec4:	6203      	str	r3, [r0, #32]
}
 8004ec6:	4770      	bx	lr
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ec8:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8004eca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ece:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ed2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ed6:	e7e8      	b.n	8004eaa <TIM_OC2_SetConfig+0x42>
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40014400 	.word	0x40014400

08004ee4 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004ee4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	f000 811f 	beq.w	800512c <HAL_TIM_PWM_ConfigChannel+0x248>
 8004eee:	2301      	movs	r3, #1
{
 8004ef0:	b570      	push	{r4, r5, r6, lr}
 8004ef2:	4604      	mov	r4, r0
 8004ef4:	460d      	mov	r5, r1
  __HAL_LOCK(htim);
 8004ef6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004efa:	2a14      	cmp	r2, #20
 8004efc:	d816      	bhi.n	8004f2c <HAL_TIM_PWM_ConfigChannel+0x48>
 8004efe:	e8df f012 	tbh	[pc, r2, lsl #1]
 8004f02:	0059      	.short	0x0059
 8004f04:	00150015 	.word	0x00150015
 8004f08:	006e0015 	.word	0x006e0015
 8004f0c:	00150015 	.word	0x00150015
 8004f10:	00840015 	.word	0x00840015
 8004f14:	00150015 	.word	0x00150015
 8004f18:	00990015 	.word	0x00990015
 8004f1c:	00150015 	.word	0x00150015
 8004f20:	00d80015 	.word	0x00d80015
 8004f24:	00150015 	.word	0x00150015
 8004f28:	001a0015 	.word	0x001a0015
  __HAL_UNLOCK(htim);
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8004f32:	2001      	movs	r0, #1
}
 8004f34:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004f36:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f38:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004f3a:	6a1a      	ldr	r2, [r3, #32]
 8004f3c:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8004f40:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004f42:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004f44:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 8004f46:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004f48:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8004f4c:	f422 42e0 	bic.w	r2, r2, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f50:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f54:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004f56:	f421 1100 	bic.w	r1, r1, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004f5a:	ea41 5106 	orr.w	r1, r1, r6, lsl #20
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5e:	4e74      	ldr	r6, [pc, #464]	; (8005130 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 8004f60:	42b3      	cmp	r3, r6
 8004f62:	d00b      	beq.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x98>
 8004f64:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 8004f68:	42b3      	cmp	r3, r6
 8004f6a:	d007      	beq.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x98>
 8004f6c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004f70:	42b3      	cmp	r3, r6
 8004f72:	d003      	beq.n	8004f7c <HAL_TIM_PWM_ConfigChannel+0x98>
 8004f74:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8004f78:	42b3      	cmp	r3, r6
 8004f7a:	d104      	bne.n	8004f86 <HAL_TIM_PWM_ConfigChannel+0xa2>
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f7c:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f7e:	f420 2080 	bic.w	r0, r0, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f82:	ea40 2086 	orr.w	r0, r0, r6, lsl #10
  TIMx->CR2 = tmpcr2;
 8004f86:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8004f88:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR6 = OC_Config->Pulse;
 8004f8a:	686a      	ldr	r2, [r5, #4]
 8004f8c:	65da      	str	r2, [r3, #92]	; 0x5c
  TIMx->CCER = tmpccer;
 8004f8e:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f90:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004f92:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004f94:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004f98:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004f9a:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004f9c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004fa0:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004fa2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004fa4:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8004fa8:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8004faa:	2300      	movs	r3, #0
 8004fac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004fb0:	2000      	movs	r0, #0
}
 8004fb2:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fb4:	6800      	ldr	r0, [r0, #0]
 8004fb6:	f7ff fd57 	bl	8004a68 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fba:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fbc:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004fbe:	6999      	ldr	r1, [r3, #24]
 8004fc0:	f041 0108 	orr.w	r1, r1, #8
 8004fc4:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004fc6:	6999      	ldr	r1, [r3, #24]
 8004fc8:	f021 0104 	bic.w	r1, r1, #4
 8004fcc:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004fce:	699a      	ldr	r2, [r3, #24]
 8004fd0:	4302      	orrs	r2, r0
 8004fd2:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8004fda:	2000      	movs	r0, #0
}
 8004fdc:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004fde:	6800      	ldr	r0, [r0, #0]
 8004fe0:	f7ff ff42 	bl	8004e68 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fe4:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fe6:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004fe8:	6999      	ldr	r1, [r3, #24]
 8004fea:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004fee:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004ff0:	6999      	ldr	r1, [r3, #24]
 8004ff2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8004ff6:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8004ffe:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005000:	2300      	movs	r3, #0
 8005002:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2000      	movs	r0, #0
}
 8005008:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	f7ff fd66 	bl	8004adc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005010:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005012:	6928      	ldr	r0, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005014:	69d9      	ldr	r1, [r3, #28]
 8005016:	f041 0108 	orr.w	r1, r1, #8
 800501a:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800501c:	69d9      	ldr	r1, [r3, #28]
 800501e:	f021 0104 	bic.w	r1, r1, #4
 8005022:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005024:	69da      	ldr	r2, [r3, #28]
 8005026:	4302      	orrs	r2, r0
 8005028:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 800502a:	2300      	movs	r3, #0
 800502c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005030:	2000      	movs	r0, #0
}
 8005032:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005034:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005036:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005038:	6a1a      	ldr	r2, [r3, #32]
 800503a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800503e:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005040:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005042:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005044:	69da      	ldr	r2, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005046:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800504a:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800504e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005052:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8005054:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005058:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800505c:	4e34      	ldr	r6, [pc, #208]	; (8005130 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 800505e:	42b3      	cmp	r3, r6
 8005060:	d00b      	beq.n	800507a <HAL_TIM_PWM_ConfigChannel+0x196>
 8005062:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 8005066:	42b3      	cmp	r3, r6
 8005068:	d007      	beq.n	800507a <HAL_TIM_PWM_ConfigChannel+0x196>
 800506a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800506e:	42b3      	cmp	r3, r6
 8005070:	d003      	beq.n	800507a <HAL_TIM_PWM_ConfigChannel+0x196>
 8005072:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005076:	42b3      	cmp	r3, r6
 8005078:	d104      	bne.n	8005084 <HAL_TIM_PWM_ConfigChannel+0x1a0>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800507a:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800507c:	f420 4080 	bic.w	r0, r0, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005080:	ea40 1086 	orr.w	r0, r0, r6, lsl #6
  TIMx->CR2 = tmpcr2;
 8005084:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005086:	61da      	str	r2, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005088:	686a      	ldr	r2, [r5, #4]
 800508a:	641a      	str	r2, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 800508c:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800508e:	69d9      	ldr	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005090:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005092:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8005096:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005098:	69d9      	ldr	r1, [r3, #28]
 800509a:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800509e:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050a0:	69da      	ldr	r2, [r3, #28]
 80050a2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80050a6:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 80050a8:	2300      	movs	r3, #0
 80050aa:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80050ae:	2000      	movs	r0, #0
}
 80050b0:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050b2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80050b4:	682e      	ldr	r6, [r5, #0]
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80050b6:	6a1a      	ldr	r2, [r3, #32]
 80050b8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050bc:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80050be:	6a19      	ldr	r1, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80050c0:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR3;
 80050c2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80050c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80050c8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 80050cc:	4332      	orrs	r2, r6
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050ce:	68ae      	ldr	r6, [r5, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 80050d0:	f421 3100 	bic.w	r1, r1, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80050d4:	ea41 4106 	orr.w	r1, r1, r6, lsl #16
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050d8:	4e15      	ldr	r6, [pc, #84]	; (8005130 <HAL_TIM_PWM_ConfigChannel+0x24c>)
 80050da:	42b3      	cmp	r3, r6
 80050dc:	d00b      	beq.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80050de:	f506 56a0 	add.w	r6, r6, #5120	; 0x1400
 80050e2:	42b3      	cmp	r3, r6
 80050e4:	d007      	beq.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80050e6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050ea:	42b3      	cmp	r3, r6
 80050ec:	d003      	beq.n	80050f6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80050ee:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80050f2:	42b3      	cmp	r3, r6
 80050f4:	d104      	bne.n	8005100 <HAL_TIM_PWM_ConfigChannel+0x21c>
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050f6:	696e      	ldr	r6, [r5, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 80050f8:	f420 3080 	bic.w	r0, r0, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80050fc:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
  TIMx->CR2 = tmpcr2;
 8005100:	6058      	str	r0, [r3, #4]
  TIMx->CCMR3 = tmpccmrx;
 8005102:	655a      	str	r2, [r3, #84]	; 0x54
  TIMx->CCR5 = OC_Config->Pulse;
 8005104:	686a      	ldr	r2, [r5, #4]
 8005106:	659a      	str	r2, [r3, #88]	; 0x58
  TIMx->CCER = tmpccer;
 8005108:	6219      	str	r1, [r3, #32]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800510a:	6d59      	ldr	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800510c:	692d      	ldr	r5, [r5, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800510e:	f041 0108 	orr.w	r1, r1, #8
 8005112:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005114:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005116:	f021 0104 	bic.w	r1, r1, #4
 800511a:	6559      	str	r1, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800511c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800511e:	432a      	orrs	r2, r5
 8005120:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(htim);
 8005122:	2300      	movs	r3, #0
 8005124:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005128:	2000      	movs	r0, #0
}
 800512a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 800512c:	2002      	movs	r0, #2
}
 800512e:	4770      	bx	lr
 8005130:	40012c00 	.word	0x40012c00

08005134 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005134:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005138:	2b01      	cmp	r3, #1
 800513a:	d02c      	beq.n	8005196 <HAL_TIMEx_MasterConfigSynchronization+0x62>
{
 800513c:	b430      	push	{r4, r5}

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800513e:	6802      	ldr	r2, [r0, #0]
  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005140:	4d16      	ldr	r5, [pc, #88]	; (800519c <HAL_TIMEx_MasterConfigSynchronization+0x68>)
  htim->State = HAL_TIM_STATE_BUSY;
 8005142:	2302      	movs	r3, #2
 8005144:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005148:	42aa      	cmp	r2, r5
  tmpcr2 = htim->Instance->CR2;
 800514a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800514c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800514e:	d018      	beq.n	8005182 <HAL_TIMEx_MasterConfigSynchronization+0x4e>
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005150:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 8005152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005156:	432b      	orrs	r3, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005158:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
  htim->Instance->CR2 = tmpcr2;
 800515c:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800515e:	d002      	beq.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0x32>
 8005160:	4b0f      	ldr	r3, [pc, #60]	; (80051a0 <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 8005162:	429a      	cmp	r2, r3
 8005164:	d104      	bne.n	8005170 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005166:	688b      	ldr	r3, [r1, #8]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005168:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800516c:	431c      	orrs	r4, r3

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800516e:	6094      	str	r4, [r2, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005170:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005172:	2201      	movs	r2, #1
 8005174:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005178:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 800517c:	bc30      	pop	{r4, r5}
  return HAL_OK;
 800517e:	4618      	mov	r0, r3
}
 8005180:	4770      	bx	lr
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005182:	684d      	ldr	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005184:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005188:	432b      	orrs	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800518a:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800518c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005190:	432b      	orrs	r3, r5
  htim->Instance->CR2 = tmpcr2;
 8005192:	6053      	str	r3, [r2, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005194:	e7e7      	b.n	8005166 <HAL_TIMEx_MasterConfigSynchronization+0x32>
  __HAL_LOCK(htim);
 8005196:	2002      	movs	r0, #2
}
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40014000 	.word	0x40014000

080051a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80051a4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80051a8:	2b01      	cmp	r3, #1
 80051aa:	d039      	beq.n	8005220 <HAL_TIMEx_ConfigBreakDeadTime+0x7c>
{
 80051ac:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80051ae:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 80051b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051b6:	4602      	mov	r2, r0
 80051b8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051ba:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051bc:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80051be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80051c2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051c4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051c8:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80051ca:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051d0:	694c      	ldr	r4, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80051d2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051d8:	6a88      	ldr	r0, [r1, #40]	; 0x28
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80051da:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051dc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051e0:	698c      	ldr	r4, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80051e2:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051e4:	f423 2370 	bic.w	r3, r3, #983040	; 0xf0000
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051e8:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80051ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80051ee:	4c0d      	ldr	r4, [pc, #52]	; (8005224 <HAL_TIMEx_ConfigBreakDeadTime+0x80>)
 80051f0:	42a0      	cmp	r0, r4
 80051f2:	d007      	beq.n	8005204 <HAL_TIMEx_ConfigBreakDeadTime+0x60>
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;

  __HAL_UNLOCK(htim);
 80051f4:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80051f6:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 80051f8:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 80051fc:	4608      	mov	r0, r1
}
 80051fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005202:	4770      	bx	lr
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005204:	6a4c      	ldr	r4, [r1, #36]	; 0x24
 8005206:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800520a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800520e:	69cc      	ldr	r4, [r1, #28]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005210:	6a09      	ldr	r1, [r1, #32]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005212:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005216:	4323      	orrs	r3, r4
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005218:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800521c:	430b      	orrs	r3, r1
 800521e:	e7e9      	b.n	80051f4 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
  __HAL_LOCK(htim);
 8005220:	2002      	movs	r0, #2
}
 8005222:	4770      	bx	lr
 8005224:	40012c00 	.word	0x40012c00

08005228 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800522c:	4604      	mov	r4, r0
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800522e:	6fc0      	ldr	r0, [r0, #124]	; 0x7c
 8005230:	2820      	cmp	r0, #32
 8005232:	f040 8088 	bne.w	8005346 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005236:	4688      	mov	r8, r1
 8005238:	b109      	cbz	r1, 800523e <HAL_UART_Transmit+0x16>
 800523a:	4617      	mov	r7, r2
 800523c:	b912      	cbnz	r2, 8005244 <HAL_UART_Transmit+0x1c>
    {
      return  HAL_ERROR;
 800523e:	2001      	movs	r0, #1
  }
  else
  {
    return HAL_BUSY;
  }
}
 8005240:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005244:	461d      	mov	r5, r3
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005246:	f04f 0900 	mov.w	r9, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800524a:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800524c:	f8c4 9084 	str.w	r9, [r4, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005250:	67e3      	str	r3, [r4, #124]	; 0x7c
    tickstart = HAL_GetTick();
 8005252:	f7fd fbbf 	bl	80029d4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005256:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8005258:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800525c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferCount = Size;
 8005260:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    tickstart = HAL_GetTick();
 8005264:	4606      	mov	r6, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005266:	d071      	beq.n	800534c <HAL_UART_Transmit+0x124>
    while (huart->TxXferCount > 0U)
 8005268:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800526c:	6820      	ldr	r0, [r4, #0]
    while (huart->TxXferCount > 0U)
 800526e:	b29b      	uxth	r3, r3
 8005270:	b1ab      	cbz	r3, 800529e <HAL_UART_Transmit+0x76>
 8005272:	1c6a      	adds	r2, r5, #1
 8005274:	d11c      	bne.n	80052b0 <HAL_UART_Transmit+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005276:	69c2      	ldr	r2, [r0, #28]
 8005278:	0613      	lsls	r3, r2, #24
 800527a:	d5fc      	bpl.n	8005276 <HAL_UART_Transmit+0x4e>
      if (pdata8bits == NULL)
 800527c:	f1b8 0f00 	cmp.w	r8, #0
 8005280:	d05c      	beq.n	800533c <HAL_UART_Transmit+0x114>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005282:	f818 3b01 	ldrb.w	r3, [r8], #1
 8005286:	8503      	strh	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 8005288:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 800528c:	3b01      	subs	r3, #1
 800528e:	b29b      	uxth	r3, r3
 8005290:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005294:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d1e9      	bne.n	8005272 <HAL_UART_Transmit+0x4a>
 800529e:	1c69      	adds	r1, r5, #1
 80052a0:	d15a      	bne.n	8005358 <HAL_UART_Transmit+0x130>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052a2:	69c3      	ldr	r3, [r0, #28]
 80052a4:	065a      	lsls	r2, r3, #25
 80052a6:	d5fc      	bpl.n	80052a2 <HAL_UART_Transmit+0x7a>
    huart->gState = HAL_UART_STATE_READY;
 80052a8:	2320      	movs	r3, #32
 80052aa:	67e3      	str	r3, [r4, #124]	; 0x7c
    return HAL_OK;
 80052ac:	2000      	movs	r0, #0
 80052ae:	e7c7      	b.n	8005240 <HAL_UART_Transmit+0x18>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b0:	69c3      	ldr	r3, [r0, #28]
 80052b2:	061f      	lsls	r7, r3, #24
 80052b4:	d4e2      	bmi.n	800527c <HAL_UART_Transmit+0x54>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052b6:	f7fd fb8d 	bl	80029d4 <HAL_GetTick>
 80052ba:	1b80      	subs	r0, r0, r6
 80052bc:	4285      	cmp	r5, r0
 80052be:	d338      	bcc.n	8005332 <HAL_UART_Transmit+0x10a>
 80052c0:	2d00      	cmp	r5, #0
 80052c2:	d036      	beq.n	8005332 <HAL_UART_Transmit+0x10a>
      {

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80052c4:	6823      	ldr	r3, [r4, #0]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	0752      	lsls	r2, r2, #29
 80052ca:	4618      	mov	r0, r3
 80052cc:	d5d1      	bpl.n	8005272 <HAL_UART_Transmit+0x4a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052ce:	69da      	ldr	r2, [r3, #28]
 80052d0:	0717      	lsls	r7, r2, #28
 80052d2:	f100 8089 	bmi.w	80053e8 <HAL_UART_Transmit+0x1c0>
           /* Process Unlocked */
           __HAL_UNLOCK(huart);

           return HAL_ERROR;
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052d6:	69da      	ldr	r2, [r3, #28]
 80052d8:	0511      	lsls	r1, r2, #20
 80052da:	d5ca      	bpl.n	8005272 <HAL_UART_Transmit+0x4a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80052dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80052e0:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ea:	e843 2100 	strex	r1, r2, [r3]
 80052ee:	b139      	cbz	r1, 8005300 <HAL_UART_Transmit+0xd8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f0:	e853 2f00 	ldrex	r2, [r3]
 80052f4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f8:	e843 2100 	strex	r1, r2, [r3]
 80052fc:	2900      	cmp	r1, #0
 80052fe:	d1f7      	bne.n	80052f0 <HAL_UART_Transmit+0xc8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	f103 0208 	add.w	r2, r3, #8
 8005304:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005308:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530c:	f103 0008 	add.w	r0, r3, #8
 8005310:	e840 2100 	strex	r1, r2, [r0]
 8005314:	2900      	cmp	r1, #0
 8005316:	d1f3      	bne.n	8005300 <HAL_UART_Transmit+0xd8>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005318:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800531a:	2a01      	cmp	r2, #1
 800531c:	d05b      	beq.n	80053d6 <HAL_UART_Transmit+0x1ae>
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531e:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005320:	2220      	movs	r2, #32
 8005322:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005326:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005328:	6623      	str	r3, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 800532a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800532e:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
      huart->gState = HAL_UART_STATE_READY;
 8005332:	2320      	movs	r3, #32
 8005334:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 8005336:	2003      	movs	r0, #3
}
 8005338:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800533c:	f839 3b02 	ldrh.w	r3, [r9], #2
 8005340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005344:	e79f      	b.n	8005286 <HAL_UART_Transmit+0x5e>
    return HAL_BUSY;
 8005346:	2002      	movs	r0, #2
}
 8005348:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800534c:	6923      	ldr	r3, [r4, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d18a      	bne.n	8005268 <HAL_UART_Transmit+0x40>
 8005352:	46c1      	mov	r9, r8
      pdata8bits  = NULL;
 8005354:	4698      	mov	r8, r3
 8005356:	e787      	b.n	8005268 <HAL_UART_Transmit+0x40>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005358:	69c3      	ldr	r3, [r0, #28]
 800535a:	065b      	lsls	r3, r3, #25
 800535c:	d4a4      	bmi.n	80052a8 <HAL_UART_Transmit+0x80>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800535e:	f7fd fb39 	bl	80029d4 <HAL_GetTick>
 8005362:	1b80      	subs	r0, r0, r6
 8005364:	4285      	cmp	r5, r0
 8005366:	d3e4      	bcc.n	8005332 <HAL_UART_Transmit+0x10a>
 8005368:	2d00      	cmp	r5, #0
 800536a:	d0e2      	beq.n	8005332 <HAL_UART_Transmit+0x10a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800536c:	6823      	ldr	r3, [r4, #0]
 800536e:	681a      	ldr	r2, [r3, #0]
 8005370:	0751      	lsls	r1, r2, #29
 8005372:	4618      	mov	r0, r3
 8005374:	d593      	bpl.n	800529e <HAL_UART_Transmit+0x76>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005376:	69da      	ldr	r2, [r3, #28]
 8005378:	0712      	lsls	r2, r2, #28
 800537a:	d463      	bmi.n	8005444 <HAL_UART_Transmit+0x21c>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800537c:	69da      	ldr	r2, [r3, #28]
 800537e:	0517      	lsls	r7, r2, #20
 8005380:	d58d      	bpl.n	800529e <HAL_UART_Transmit+0x76>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005382:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005386:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005388:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800538c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005390:	e843 2100 	strex	r1, r2, [r3]
 8005394:	b139      	cbz	r1, 80053a6 <HAL_UART_Transmit+0x17e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	e853 2f00 	ldrex	r2, [r3]
 800539a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800539e:	e843 2100 	strex	r1, r2, [r3]
 80053a2:	2900      	cmp	r1, #0
 80053a4:	d1f7      	bne.n	8005396 <HAL_UART_Transmit+0x16e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	f103 0208 	add.w	r2, r3, #8
 80053aa:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053ae:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b2:	f103 0008 	add.w	r0, r3, #8
 80053b6:	e840 2100 	strex	r1, r2, [r0]
 80053ba:	2900      	cmp	r1, #0
 80053bc:	d1f3      	bne.n	80053a6 <HAL_UART_Transmit+0x17e>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053be:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80053c0:	2a01      	cmp	r2, #1
 80053c2:	d1ac      	bne.n	800531e <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053c4:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053c8:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053cc:	e843 2100 	strex	r1, r2, [r3]
 80053d0:	2900      	cmp	r1, #0
 80053d2:	d1f7      	bne.n	80053c4 <HAL_UART_Transmit+0x19c>
 80053d4:	e7a3      	b.n	800531e <HAL_UART_Transmit+0xf6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d6:	e853 2f00 	ldrex	r2, [r3]
 80053da:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053de:	e843 2100 	strex	r1, r2, [r3]
 80053e2:	2900      	cmp	r1, #0
 80053e4:	d1f7      	bne.n	80053d6 <HAL_UART_Transmit+0x1ae>
 80053e6:	e79a      	b.n	800531e <HAL_UART_Transmit+0xf6>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80053e8:	2208      	movs	r2, #8
 80053ea:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ec:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053f0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f4:	e843 2100 	strex	r1, r2, [r3]
 80053f8:	2900      	cmp	r1, #0
 80053fa:	d1f7      	bne.n	80053ec <HAL_UART_Transmit+0x1c4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	f103 0208 	add.w	r2, r3, #8
 8005400:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005404:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	f103 0008 	add.w	r0, r3, #8
 800540c:	e840 2100 	strex	r1, r2, [r0]
 8005410:	2900      	cmp	r1, #0
 8005412:	d1f3      	bne.n	80053fc <HAL_UART_Transmit+0x1d4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005414:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005416:	2a01      	cmp	r2, #1
 8005418:	d00b      	beq.n	8005432 <HAL_UART_Transmit+0x20a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800541a:	2300      	movs	r3, #0
  huart->RxState = HAL_UART_STATE_READY;
 800541c:	2120      	movs	r1, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800541e:	2208      	movs	r2, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005420:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8005424:	66a3      	str	r3, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005426:	6623      	str	r3, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8005428:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800542c:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
           return HAL_ERROR;
 8005430:	e77f      	b.n	8005332 <HAL_UART_Transmit+0x10a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005432:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005436:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	e843 2100 	strex	r1, r2, [r3]
 800543e:	2900      	cmp	r1, #0
 8005440:	d1f7      	bne.n	8005432 <HAL_UART_Transmit+0x20a>
 8005442:	e7ea      	b.n	800541a <HAL_UART_Transmit+0x1f2>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005444:	2208      	movs	r2, #8
 8005446:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005448:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800544c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005450:	e843 2100 	strex	r1, r2, [r3]
 8005454:	2900      	cmp	r1, #0
 8005456:	d1f7      	bne.n	8005448 <HAL_UART_Transmit+0x220>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005458:	f103 0208 	add.w	r2, r3, #8
 800545c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005460:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005464:	f103 0008 	add.w	r0, r3, #8
 8005468:	e840 2100 	strex	r1, r2, [r0]
 800546c:	2900      	cmp	r1, #0
 800546e:	d1f3      	bne.n	8005458 <HAL_UART_Transmit+0x230>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005470:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005472:	2a01      	cmp	r2, #1
 8005474:	d1d1      	bne.n	800541a <HAL_UART_Transmit+0x1f2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005476:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800547a:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547e:	e843 2100 	strex	r1, r2, [r3]
 8005482:	2900      	cmp	r1, #0
 8005484:	d1f7      	bne.n	8005476 <HAL_UART_Transmit+0x24e>
 8005486:	e7c8      	b.n	800541a <HAL_UART_Transmit+0x1f2>

08005488 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005488:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800548a:	07da      	lsls	r2, r3, #31
{
 800548c:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800548e:	d506      	bpl.n	800549e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005490:	6801      	ldr	r1, [r0, #0]
 8005492:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8005494:	684a      	ldr	r2, [r1, #4]
 8005496:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800549a:	4322      	orrs	r2, r4
 800549c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800549e:	079c      	lsls	r4, r3, #30
 80054a0:	d506      	bpl.n	80054b0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80054a2:	6801      	ldr	r1, [r0, #0]
 80054a4:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80054a6:	684a      	ldr	r2, [r1, #4]
 80054a8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80054ac:	4322      	orrs	r2, r4
 80054ae:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80054b0:	0759      	lsls	r1, r3, #29
 80054b2:	d506      	bpl.n	80054c2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80054b4:	6801      	ldr	r1, [r0, #0]
 80054b6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80054b8:	684a      	ldr	r2, [r1, #4]
 80054ba:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80054be:	4322      	orrs	r2, r4
 80054c0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80054c2:	071a      	lsls	r2, r3, #28
 80054c4:	d506      	bpl.n	80054d4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80054c6:	6801      	ldr	r1, [r0, #0]
 80054c8:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80054ca:	684a      	ldr	r2, [r1, #4]
 80054cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80054d0:	4322      	orrs	r2, r4
 80054d2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80054d4:	06dc      	lsls	r4, r3, #27
 80054d6:	d506      	bpl.n	80054e6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80054d8:	6801      	ldr	r1, [r0, #0]
 80054da:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80054dc:	688a      	ldr	r2, [r1, #8]
 80054de:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80054e2:	4322      	orrs	r2, r4
 80054e4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80054e6:	0699      	lsls	r1, r3, #26
 80054e8:	d506      	bpl.n	80054f8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80054ea:	6801      	ldr	r1, [r0, #0]
 80054ec:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80054ee:	688a      	ldr	r2, [r1, #8]
 80054f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054f4:	4322      	orrs	r2, r4
 80054f6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054f8:	065a      	lsls	r2, r3, #25
 80054fa:	d509      	bpl.n	8005510 <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054fc:	6801      	ldr	r1, [r0, #0]
 80054fe:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8005500:	684a      	ldr	r2, [r1, #4]
 8005502:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8005506:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005508:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800550c:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800550e:	d00b      	beq.n	8005528 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005510:	061b      	lsls	r3, r3, #24
 8005512:	d506      	bpl.n	8005522 <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005514:	6802      	ldr	r2, [r0, #0]
 8005516:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8005518:	6853      	ldr	r3, [r2, #4]
 800551a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800551e:	430b      	orrs	r3, r1
 8005520:	6053      	str	r3, [r2, #4]
}
 8005522:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005526:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005528:	684a      	ldr	r2, [r1, #4]
 800552a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800552c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8005530:	4322      	orrs	r2, r4
 8005532:	604a      	str	r2, [r1, #4]
 8005534:	e7ec      	b.n	8005510 <UART_AdvFeatureConfig+0x88>
 8005536:	bf00      	nop

08005538 <UART_CheckIdleState>:
{
 8005538:	b538      	push	{r3, r4, r5, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553a:	2300      	movs	r3, #0
{
 800553c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
  tickstart = HAL_GetTick();
 8005542:	f7fd fa47 	bl	80029d4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005546:	6822      	ldr	r2, [r4, #0]
 8005548:	6813      	ldr	r3, [r2, #0]
 800554a:	071b      	lsls	r3, r3, #28
  tickstart = HAL_GetTick();
 800554c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800554e:	d40d      	bmi.n	800556c <UART_CheckIdleState+0x34>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005550:	6813      	ldr	r3, [r2, #0]
 8005552:	0759      	lsls	r1, r3, #29
 8005554:	d430      	bmi.n	80055b8 <UART_CheckIdleState+0x80>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005556:	2300      	movs	r3, #0
  huart->gState = HAL_UART_STATE_READY;
 8005558:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800555a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
  huart->gState = HAL_UART_STATE_READY;
 800555e:	67e2      	str	r2, [r4, #124]	; 0x7c
  return HAL_OK;
 8005560:	4618      	mov	r0, r3
  huart->RxState = HAL_UART_STATE_READY;
 8005562:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005566:	6623      	str	r3, [r4, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005568:	6663      	str	r3, [r4, #100]	; 0x64
}
 800556a:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800556c:	69d3      	ldr	r3, [r2, #28]
 800556e:	0298      	lsls	r0, r3, #10
 8005570:	d4ee      	bmi.n	8005550 <UART_CheckIdleState+0x18>
 8005572:	e00c      	b.n	800558e <UART_CheckIdleState+0x56>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005574:	6819      	ldr	r1, [r3, #0]
 8005576:	0749      	lsls	r1, r1, #29
 8005578:	461a      	mov	r2, r3
 800557a:	d505      	bpl.n	8005588 <UART_CheckIdleState+0x50>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800557c:	69d9      	ldr	r1, [r3, #28]
 800557e:	0708      	lsls	r0, r1, #28
 8005580:	d44e      	bmi.n	8005620 <UART_CheckIdleState+0xe8>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005582:	69d9      	ldr	r1, [r3, #28]
 8005584:	0509      	lsls	r1, r1, #20
 8005586:	d479      	bmi.n	800567c <UART_CheckIdleState+0x144>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	0298      	lsls	r0, r3, #10
 800558c:	d4e0      	bmi.n	8005550 <UART_CheckIdleState+0x18>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800558e:	f7fd fa21 	bl	80029d4 <HAL_GetTick>
 8005592:	1b43      	subs	r3, r0, r5
 8005594:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005598:	6823      	ldr	r3, [r4, #0]
 800559a:	d3eb      	bcc.n	8005574 <UART_CheckIdleState+0x3c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559c:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80055a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a4:	e843 2100 	strex	r1, r2, [r3]
 80055a8:	2900      	cmp	r1, #0
 80055aa:	d1f7      	bne.n	800559c <UART_CheckIdleState+0x64>
      huart->gState = HAL_UART_STATE_READY;
 80055ac:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 80055ae:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
      huart->gState = HAL_UART_STATE_READY;
 80055b2:	67e3      	str	r3, [r4, #124]	; 0x7c
      return HAL_TIMEOUT;
 80055b4:	2003      	movs	r0, #3
}
 80055b6:	bd38      	pop	{r3, r4, r5, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055b8:	69d3      	ldr	r3, [r2, #28]
 80055ba:	025b      	lsls	r3, r3, #9
 80055bc:	d4cb      	bmi.n	8005556 <UART_CheckIdleState+0x1e>
 80055be:	e00d      	b.n	80055dc <UART_CheckIdleState+0xa4>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	0750      	lsls	r0, r2, #29
 80055c4:	d507      	bpl.n	80055d6 <UART_CheckIdleState+0x9e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80055c6:	69da      	ldr	r2, [r3, #28]
 80055c8:	0711      	lsls	r1, r2, #28
 80055ca:	f100 8085 	bmi.w	80056d8 <UART_CheckIdleState+0x1a0>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80055ce:	69da      	ldr	r2, [r3, #28]
 80055d0:	0512      	lsls	r2, r2, #20
 80055d2:	f100 80af 	bmi.w	8005734 <UART_CheckIdleState+0x1fc>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	025b      	lsls	r3, r3, #9
 80055da:	d4bc      	bmi.n	8005556 <UART_CheckIdleState+0x1e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055dc:	f7fd f9fa 	bl	80029d4 <HAL_GetTick>
 80055e0:	1b43      	subs	r3, r0, r5
 80055e2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80055e6:	6823      	ldr	r3, [r4, #0]
 80055e8:	d3ea      	bcc.n	80055c0 <UART_CheckIdleState+0x88>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	e853 2f00 	ldrex	r2, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80055ee:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f2:	e843 2100 	strex	r1, r2, [r3]
 80055f6:	2900      	cmp	r1, #0
 80055f8:	d1f7      	bne.n	80055ea <UART_CheckIdleState+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	f103 0208 	add.w	r2, r3, #8
 80055fe:	e852 2f00 	ldrex	r2, [r2]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005602:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	f103 0008 	add.w	r0, r3, #8
 800560a:	e840 2100 	strex	r1, r2, [r0]
 800560e:	2900      	cmp	r1, #0
 8005610:	d1f3      	bne.n	80055fa <UART_CheckIdleState+0xc2>
      huart->RxState = HAL_UART_STATE_READY;
 8005612:	2320      	movs	r3, #32
      __HAL_UNLOCK(huart);
 8005614:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
      huart->RxState = HAL_UART_STATE_READY;
 8005618:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
      return HAL_TIMEOUT;
 800561c:	2003      	movs	r0, #3
}
 800561e:	bd38      	pop	{r3, r4, r5, pc}
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005620:	2208      	movs	r2, #8
 8005622:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005624:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005628:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800562c:	e843 2100 	strex	r1, r2, [r3]
 8005630:	2900      	cmp	r1, #0
 8005632:	d1f7      	bne.n	8005624 <UART_CheckIdleState+0xec>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005634:	f103 0208 	add.w	r2, r3, #8
 8005638:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800563c:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005640:	f103 0008 	add.w	r0, r3, #8
 8005644:	e840 2100 	strex	r1, r2, [r0]
 8005648:	2900      	cmp	r1, #0
 800564a:	d1f3      	bne.n	8005634 <UART_CheckIdleState+0xfc>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800564c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800564e:	2a01      	cmp	r2, #1
 8005650:	d00b      	beq.n	800566a <UART_CheckIdleState+0x132>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005652:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8005654:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005656:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005658:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 800565c:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800565e:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8005660:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005664:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8005668:	e798      	b.n	800559c <UART_CheckIdleState+0x64>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800566e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	e843 2100 	strex	r1, r2, [r3]
 8005676:	2900      	cmp	r1, #0
 8005678:	d1f7      	bne.n	800566a <UART_CheckIdleState+0x132>
 800567a:	e7ea      	b.n	8005652 <UART_CheckIdleState+0x11a>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800567c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005680:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005686:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568a:	e843 2100 	strex	r1, r2, [r3]
 800568e:	2900      	cmp	r1, #0
 8005690:	d1f7      	bne.n	8005682 <UART_CheckIdleState+0x14a>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	f103 0208 	add.w	r2, r3, #8
 8005696:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569e:	f103 0008 	add.w	r0, r3, #8
 80056a2:	e840 2100 	strex	r1, r2, [r0]
 80056a6:	2900      	cmp	r1, #0
 80056a8:	d1f3      	bne.n	8005692 <UART_CheckIdleState+0x15a>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056aa:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80056ac:	2a01      	cmp	r2, #1
 80056ae:	d00a      	beq.n	80056c6 <UART_CheckIdleState+0x18e>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056b0:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 80056b2:	2120      	movs	r1, #32
 80056b4:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 80056b8:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056ba:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 80056bc:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80056c0:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 80056c4:	e76a      	b.n	800559c <UART_CheckIdleState+0x64>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c6:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056ca:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ce:	e843 2100 	strex	r1, r2, [r3]
 80056d2:	2900      	cmp	r1, #0
 80056d4:	d1f7      	bne.n	80056c6 <UART_CheckIdleState+0x18e>
 80056d6:	e7eb      	b.n	80056b0 <UART_CheckIdleState+0x178>
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056d8:	2208      	movs	r2, #8
 80056da:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056dc:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80056e0:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	e843 2100 	strex	r1, r2, [r3]
 80056e8:	2900      	cmp	r1, #0
 80056ea:	d1f7      	bne.n	80056dc <UART_CheckIdleState+0x1a4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ec:	f103 0208 	add.w	r2, r3, #8
 80056f0:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80056f4:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f8:	f103 0008 	add.w	r0, r3, #8
 80056fc:	e840 2100 	strex	r1, r2, [r0]
 8005700:	2900      	cmp	r1, #0
 8005702:	d1f3      	bne.n	80056ec <UART_CheckIdleState+0x1b4>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005704:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005706:	2a01      	cmp	r2, #1
 8005708:	d00b      	beq.n	8005722 <UART_CheckIdleState+0x1ea>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800570a:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800570c:	2020      	movs	r0, #32
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800570e:	2108      	movs	r1, #8
  huart->RxState = HAL_UART_STATE_READY;
 8005710:	f8c4 0080 	str.w	r0, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8005714:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005716:	6622      	str	r2, [r4, #96]	; 0x60
           __HAL_UNLOCK(huart);
 8005718:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800571c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
           return HAL_ERROR;
 8005720:	e763      	b.n	80055ea <UART_CheckIdleState+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005722:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005726:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	e843 2100 	strex	r1, r2, [r3]
 800572e:	2900      	cmp	r1, #0
 8005730:	d1f7      	bne.n	8005722 <UART_CheckIdleState+0x1ea>
 8005732:	e7ea      	b.n	800570a <UART_CheckIdleState+0x1d2>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005734:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005738:	621a      	str	r2, [r3, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573a:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800573e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005742:	e843 2100 	strex	r1, r2, [r3]
 8005746:	2900      	cmp	r1, #0
 8005748:	d1f7      	bne.n	800573a <UART_CheckIdleState+0x202>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574a:	f103 0208 	add.w	r2, r3, #8
 800574e:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005752:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005756:	f103 0008 	add.w	r0, r3, #8
 800575a:	e840 2100 	strex	r1, r2, [r0]
 800575e:	2900      	cmp	r1, #0
 8005760:	d1f3      	bne.n	800574a <UART_CheckIdleState+0x212>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005762:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8005764:	2a01      	cmp	r2, #1
 8005766:	d00a      	beq.n	800577e <UART_CheckIdleState+0x246>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005768:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 800576a:	2120      	movs	r1, #32
 800576c:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
  huart->RxISR = NULL;
 8005770:	66a2      	str	r2, [r4, #104]	; 0x68
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005772:	6622      	str	r2, [r4, #96]	; 0x60
          __HAL_UNLOCK(huart);
 8005774:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005778:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
          return HAL_TIMEOUT;
 800577c:	e735      	b.n	80055ea <UART_CheckIdleState+0xb2>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577e:	e853 2f00 	ldrex	r2, [r3]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005782:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005786:	e843 2100 	strex	r1, r2, [r3]
 800578a:	2900      	cmp	r1, #0
 800578c:	d1f7      	bne.n	800577e <UART_CheckIdleState+0x246>
 800578e:	e7eb      	b.n	8005768 <UART_CheckIdleState+0x230>

08005790 <HAL_UART_Init>:
  if (huart == NULL)
 8005790:	2800      	cmp	r0, #0
 8005792:	f000 809d 	beq.w	80058d0 <HAL_UART_Init+0x140>
{
 8005796:	b538      	push	{r3, r4, r5, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8005798:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
 800579a:	4604      	mov	r4, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d06b      	beq.n	8005878 <HAL_UART_Init+0xe8>
  __HAL_UART_DISABLE(huart);
 80057a0:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057a2:	6920      	ldr	r0, [r4, #16]
 80057a4:	6965      	ldr	r5, [r4, #20]
  huart->gState = HAL_UART_STATE_BUSY;
 80057a6:	2224      	movs	r2, #36	; 0x24
 80057a8:	67e2      	str	r2, [r4, #124]	; 0x7c
  __HAL_UART_DISABLE(huart);
 80057aa:	6819      	ldr	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057ac:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 80057ae:	f021 0101 	bic.w	r1, r1, #1
 80057b2:	6019      	str	r1, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057b4:	4302      	orrs	r2, r0
 80057b6:	432a      	orrs	r2, r5
 80057b8:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057ba:	681d      	ldr	r5, [r3, #0]
 80057bc:	4967      	ldr	r1, [pc, #412]	; (800595c <HAL_UART_Init+0x1cc>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80057be:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80057c0:	4029      	ands	r1, r5
 80057c2:	430a      	orrs	r2, r1
 80057c4:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	68e1      	ldr	r1, [r4, #12]
  tmpreg |= huart->Init.OneBitSampling;
 80057ca:	6a25      	ldr	r5, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80057cc:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80057d0:	430a      	orrs	r2, r1
 80057d2:	605a      	str	r2, [r3, #4]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057d4:	6899      	ldr	r1, [r3, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80057d6:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057d8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg |= huart->Init.OneBitSampling;
 80057dc:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057de:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057e0:	495f      	ldr	r1, [pc, #380]	; (8005960 <HAL_UART_Init+0x1d0>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80057e2:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 80057e4:	428b      	cmp	r3, r1
 80057e6:	d00b      	beq.n	8005800 <HAL_UART_Init+0x70>
 80057e8:	4a5e      	ldr	r2, [pc, #376]	; (8005964 <HAL_UART_Init+0x1d4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00f      	beq.n	800580e <HAL_UART_Init+0x7e>
 80057ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00b      	beq.n	800580e <HAL_UART_Init+0x7e>
  huart->RxISR = NULL;
 80057f6:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80057f8:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
}
 80057fc:	2001      	movs	r0, #1
 80057fe:	bd38      	pop	{r3, r4, r5, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005800:	4b59      	ldr	r3, [pc, #356]	; (8005968 <HAL_UART_Init+0x1d8>)
 8005802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005804:	f003 0303 	and.w	r3, r3, #3
 8005808:	3b01      	subs	r3, #1
 800580a:	2b02      	cmp	r3, #2
 800580c:	d939      	bls.n	8005882 <HAL_UART_Init+0xf2>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800580e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005812:	d062      	beq.n	80058da <HAL_UART_Init+0x14a>
        pclk = HAL_RCC_GetPCLK1Freq();
 8005814:	f7fe fff4 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8005818:	b9b8      	cbnz	r0, 800584a <HAL_UART_Init+0xba>
  huart->RxISR = NULL;
 800581a:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800581c:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005820:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005822:	bb2b      	cbnz	r3, 8005870 <HAL_UART_Init+0xe0>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	685a      	ldr	r2, [r3, #4]
 8005828:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800582c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800582e:	689a      	ldr	r2, [r3, #8]
 8005830:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005834:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800583c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800583e:	601a      	str	r2, [r3, #0]
}
 8005840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  return (UART_CheckIdleState(huart));
 8005844:	f7ff be78 	b.w	8005538 <UART_CheckIdleState>
        pclk = (uint32_t) HSI_VALUE;
 8005848:	4848      	ldr	r0, [pc, #288]	; (800596c <HAL_UART_Init+0x1dc>)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800584a:	6863      	ldr	r3, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584c:	f64f 72ef 	movw	r2, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005850:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8005854:	fbb0 f0f3 	udiv	r0, r0, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005858:	f1a0 0310 	sub.w	r3, r0, #16
 800585c:	4293      	cmp	r3, r2
 800585e:	d8ca      	bhi.n	80057f6 <HAL_UART_Init+0x66>
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005860:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 8005862:	2300      	movs	r3, #0
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005864:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8005866:	e9c4 331a 	strd	r3, r3, [r4, #104]	; 0x68
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800586a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800586c:	2b00      	cmp	r3, #0
 800586e:	d0d9      	beq.n	8005824 <HAL_UART_Init+0x94>
    UART_AdvFeatureConfig(huart);
 8005870:	4620      	mov	r0, r4
 8005872:	f7ff fe09 	bl	8005488 <UART_AdvFeatureConfig>
 8005876:	e7d5      	b.n	8005824 <HAL_UART_Init+0x94>
    huart->Lock = HAL_UNLOCKED;
 8005878:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
    HAL_UART_MspInit(huart);
 800587c:	f7fc ffc8 	bl	8002810 <HAL_UART_MspInit>
 8005880:	e78e      	b.n	80057a0 <HAL_UART_Init+0x10>
 8005882:	4a3b      	ldr	r2, [pc, #236]	; (8005970 <HAL_UART_Init+0x1e0>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005884:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8005888:	5cd3      	ldrb	r3, [r2, r3]
 800588a:	d043      	beq.n	8005914 <HAL_UART_Init+0x184>
    switch (clocksource)
 800588c:	2b08      	cmp	r3, #8
 800588e:	d8b2      	bhi.n	80057f6 <HAL_UART_Init+0x66>
 8005890:	a201      	add	r2, pc, #4	; (adr r2, 8005898 <HAL_UART_Init+0x108>)
 8005892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005896:	bf00      	nop
 8005898:	08005815 	.word	0x08005815
 800589c:	080058c7 	.word	0x080058c7
 80058a0:	08005849 	.word	0x08005849
 80058a4:	080057f7 	.word	0x080057f7
 80058a8:	080058bd 	.word	0x080058bd
 80058ac:	080057f7 	.word	0x080057f7
 80058b0:	080057f7 	.word	0x080057f7
 80058b4:	080057f7 	.word	0x080057f7
 80058b8:	080058d5 	.word	0x080058d5
        pclk = HAL_RCC_GetSysClockFreq();
 80058bc:	f7fe ff64 	bl	8004788 <HAL_RCC_GetSysClockFreq>
    if (pclk != 0U)
 80058c0:	2800      	cmp	r0, #0
 80058c2:	d0aa      	beq.n	800581a <HAL_UART_Init+0x8a>
 80058c4:	e7c1      	b.n	800584a <HAL_UART_Init+0xba>
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c6:	f7fe ffb3 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
    if (pclk != 0U)
 80058ca:	2800      	cmp	r0, #0
 80058cc:	d0a5      	beq.n	800581a <HAL_UART_Init+0x8a>
 80058ce:	e7bc      	b.n	800584a <HAL_UART_Init+0xba>
}
 80058d0:	2001      	movs	r0, #1
 80058d2:	4770      	bx	lr
    switch (clocksource)
 80058d4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80058d8:	e7b7      	b.n	800584a <HAL_UART_Init+0xba>
        pclk = HAL_RCC_GetPCLK1Freq();
 80058da:	f7fe ff91 	bl	8004800 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80058de:	2800      	cmp	r0, #0
 80058e0:	d09b      	beq.n	800581a <HAL_UART_Init+0x8a>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058e2:	0043      	lsls	r3, r0, #1
 80058e4:	6862      	ldr	r2, [r4, #4]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058e6:	f64f 71ef 	movw	r1, #65519	; 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80058ea:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 80058ee:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80058f2:	f1a3 0210 	sub.w	r2, r3, #16
 80058f6:	428a      	cmp	r2, r1
 80058f8:	f63f af7d 	bhi.w	80057f6 <HAL_UART_Init+0x66>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80058fc:	f023 020f 	bic.w	r2, r3, #15
 8005900:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 8005902:	6821      	ldr	r1, [r4, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005904:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 8005908:	4313      	orrs	r3, r2
  huart->RxISR = NULL;
 800590a:	2200      	movs	r2, #0
        huart->Instance->BRR = brrtemp;
 800590c:	60cb      	str	r3, [r1, #12]
  huart->TxISR = NULL;
 800590e:	e9c4 221a 	strd	r2, r2, [r4, #104]	; 0x68
  return ret;
 8005912:	e785      	b.n	8005820 <HAL_UART_Init+0x90>
    switch (clocksource)
 8005914:	2b08      	cmp	r3, #8
 8005916:	f63f af6e 	bhi.w	80057f6 <HAL_UART_Init+0x66>
 800591a:	a201      	add	r2, pc, #4	; (adr r2, 8005920 <HAL_UART_Init+0x190>)
 800591c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005920:	080058db 	.word	0x080058db
 8005924:	0800594b 	.word	0x0800594b
 8005928:	08005957 	.word	0x08005957
 800592c:	080057f7 	.word	0x080057f7
 8005930:	08005945 	.word	0x08005945
 8005934:	080057f7 	.word	0x080057f7
 8005938:	080057f7 	.word	0x080057f7
 800593c:	080057f7 	.word	0x080057f7
 8005940:	08005951 	.word	0x08005951
        pclk = HAL_RCC_GetSysClockFreq();
 8005944:	f7fe ff20 	bl	8004788 <HAL_RCC_GetSysClockFreq>
        break;
 8005948:	e7c9      	b.n	80058de <HAL_UART_Init+0x14e>
        pclk = HAL_RCC_GetPCLK2Freq();
 800594a:	f7fe ff71 	bl	8004830 <HAL_RCC_GetPCLK2Freq>
        break;
 800594e:	e7c6      	b.n	80058de <HAL_UART_Init+0x14e>
    switch (clocksource)
 8005950:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005954:	e7c6      	b.n	80058e4 <HAL_UART_Init+0x154>
 8005956:	4b07      	ldr	r3, [pc, #28]	; (8005974 <HAL_UART_Init+0x1e4>)
 8005958:	e7c4      	b.n	80058e4 <HAL_UART_Init+0x154>
 800595a:	bf00      	nop
 800595c:	efff69f3 	.word	0xefff69f3
 8005960:	40013800 	.word	0x40013800
 8005964:	40004400 	.word	0x40004400
 8005968:	40021000 	.word	0x40021000
 800596c:	007a1200 	.word	0x007a1200
 8005970:	08007cd0 	.word	0x08007cd0
 8005974:	00f42400 	.word	0x00f42400

08005978 <Torque_Controller_step>:
  return minfF.wordL.wordLreal;
}

/* Model step function */
void Torque_Controller_step(void)
{
 8005978:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}

  /* Sum: '<S1>/Sum2' incorporates:
   *  Inport: '<Root>/Measured Angle'
   *  Inport: '<Root>/Target Angle'
   */
  rtb_Angle_Error_CW = rtU.TargetAngle - rtU.MeasuredAngle;
 800597c:	4e5c      	ldr	r6, [pc, #368]	; (8005af0 <Torque_Controller_step+0x178>)
 800597e:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005982:	e9d6 0102 	ldrd	r0, r1, [r6, #8]
 8005986:	f7fa fd4d 	bl	8000424 <__aeabi_dsub>
   *  Constant: '<S1>/Constant3'
   *  Product: '<S1>/Product'
   *  Signum: '<S1>/Sign'
   *  Sum: '<S1>/Sum3'
   */
  if (fabs(rtb_Angle_Error_CW) > 3.1415926535897931) {
 800598a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
  rtb_Angle_Error_CW = rtU.TargetAngle - rtU.MeasuredAngle;
 800598e:	460d      	mov	r5, r1
  if (fabs(rtb_Angle_Error_CW) > 3.1415926535897931) {
 8005990:	4619      	mov	r1, r3
 8005992:	a34d      	add	r3, pc, #308	; (adr r3, 8005ac8 <Torque_Controller_step+0x150>)
 8005994:	e9d3 2300 	ldrd	r2, r3, [r3]
  rtb_Angle_Error_CW = rtU.TargetAngle - rtU.MeasuredAngle;
 8005998:	4604      	mov	r4, r0
  if (fabs(rtb_Angle_Error_CW) > 3.1415926535897931) {
 800599a:	f7fa ff79 	bl	8000890 <__aeabi_dcmpgt>
 800599e:	b1d0      	cbz	r0, 80059d6 <Torque_Controller_step+0x5e>
    result = (boolean_T)((tmpVal.bitVal.words.wordH & 0x7FF00000) == 0x7FF00000 &&
 80059a0:	4a54      	ldr	r2, [pc, #336]	; (8005af4 <Torque_Controller_step+0x17c>)
 80059a2:	43aa      	bics	r2, r5
 80059a4:	d06f      	beq.n	8005a86 <Torque_Controller_step+0x10e>
    /* Signum: '<S1>/Sign' */
    if (rtIsNaN(rtb_Angle_Error_CW)) {
      rtb_TSamp = (rtNaN);
    } else if (rtb_Angle_Error_CW < 0.0) {
 80059a6:	2200      	movs	r2, #0
 80059a8:	2300      	movs	r3, #0
 80059aa:	4620      	mov	r0, r4
 80059ac:	4629      	mov	r1, r5
 80059ae:	f7fa ff51 	bl	8000854 <__aeabi_dcmplt>
 80059b2:	2800      	cmp	r0, #0
 80059b4:	d17c      	bne.n	8005ab0 <Torque_Controller_step+0x138>
      rtb_TSamp = -1.0;
    } else {
      rtb_TSamp = (rtb_Angle_Error_CW > 0.0);
 80059b6:	2200      	movs	r2, #0
 80059b8:	2300      	movs	r3, #0
 80059ba:	4620      	mov	r0, r4
 80059bc:	4629      	mov	r1, r5
 80059be:	f7fa ff67 	bl	8000890 <__aeabi_dcmpgt>
 80059c2:	b140      	cbz	r0, 80059d6 <Torque_Controller_step+0x5e>
    }

    rtb_Angle_Error_CW -= 6.2831853071795862 * rtb_TSamp;
 80059c4:	4620      	mov	r0, r4
 80059c6:	4629      	mov	r1, r5
 80059c8:	a341      	add	r3, pc, #260	; (adr r3, 8005ad0 <Torque_Controller_step+0x158>)
 80059ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ce:	f7fa fd29 	bl	8000424 <__aeabi_dsub>
 80059d2:	4604      	mov	r4, r0
 80059d4:	460d      	mov	r5, r1
  /* SampleTimeMath: '<S3>/TSamp'
   *
   * About '<S3>/TSamp':
   *  y = u * K where K = 1 / ( w * Ts )
   */
  rtb_TSamp = rtb_Angle_Error_CW * 1000.0;
 80059d6:	4b48      	ldr	r3, [pc, #288]	; (8005af8 <Torque_Controller_step+0x180>)
   */
  u0 = ((0.159 * rtb_Angle_Error_CW + 0.0 * rtDW.DiscreteTimeIntegrator_DSTATE)
        + (rtb_TSamp - rtDW.UD_DSTATE) * 0.0) + (0.09 * rtU.LC2 + 0.09 * rtU.LC1);

  /* Saturate: '<S2>/Torque_Limit' */
  if (u0 > 0.5) {
 80059d8:	f8df 912c 	ldr.w	r9, [pc, #300]	; 8005b08 <Torque_Controller_step+0x190>
  rtb_TSamp = rtb_Angle_Error_CW * 1000.0;
 80059dc:	2200      	movs	r2, #0
 80059de:	4620      	mov	r0, r4
 80059e0:	4629      	mov	r1, r5
 80059e2:	f7fa fbf1 	bl	80001c8 <__aeabi_dmul>
        + (rtb_TSamp - rtDW.UD_DSTATE) * 0.0) + (0.09 * rtU.LC2 + 0.09 * rtU.LC1);
 80059e6:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
  rtb_TSamp = rtb_Angle_Error_CW * 1000.0;
 80059ea:	4682      	mov	sl, r0
 80059ec:	468b      	mov	fp, r1
        + (rtb_TSamp - rtDW.UD_DSTATE) * 0.0) + (0.09 * rtU.LC2 + 0.09 * rtU.LC1);
 80059ee:	e9d6 0106 	ldrd	r0, r1, [r6, #24]
 80059f2:	f7fa fd19 	bl	8000428 <__adddf3>
 80059f6:	a338      	add	r3, pc, #224	; (adr r3, 8005ad8 <Torque_Controller_step+0x160>)
 80059f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059fc:	f7fa fbe4 	bl	80001c8 <__aeabi_dmul>
 8005a00:	a337      	add	r3, pc, #220	; (adr r3, 8005ae0 <Torque_Controller_step+0x168>)
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	4606      	mov	r6, r0
 8005a08:	460f      	mov	r7, r1
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	4629      	mov	r1, r5
 8005a0e:	f7fa fbdb 	bl	80001c8 <__aeabi_dmul>
 8005a12:	4602      	mov	r2, r0
 8005a14:	460b      	mov	r3, r1
  u0 = ((0.159 * rtb_Angle_Error_CW + 0.0 * rtDW.DiscreteTimeIntegrator_DSTATE)
 8005a16:	4630      	mov	r0, r6
 8005a18:	4639      	mov	r1, r7
 8005a1a:	f7fa fd05 	bl	8000428 <__adddf3>
  if (u0 > 0.5) {
 8005a1e:	f04f 0800 	mov.w	r8, #0
 8005a22:	4642      	mov	r2, r8
 8005a24:	464b      	mov	r3, r9
  u0 = ((0.159 * rtb_Angle_Error_CW + 0.0 * rtDW.DiscreteTimeIntegrator_DSTATE)
 8005a26:	4606      	mov	r6, r0
 8005a28:	460f      	mov	r7, r1
  if (u0 > 0.5) {
 8005a2a:	f7fa ff31 	bl	8000890 <__aeabi_dcmpgt>
 8005a2e:	b1c0      	cbz	r0, 8005a62 <Torque_Controller_step+0xea>
    /* Outport: '<Root>/RW_Speed' */
    rtY.RW_Speed = 0.5;
 8005a30:	4b32      	ldr	r3, [pc, #200]	; (8005afc <Torque_Controller_step+0x184>)
 8005a32:	e9c3 8900 	strd	r8, r9, [r3]
  }

  /* End of Saturate: '<S2>/Torque_Limit' */

  /* Outport: '<Root>/Ang_error' */
  rtY.Ang_error = rtb_Angle_Error_CW;
 8005a36:	e9c3 4502 	strd	r4, r5, [r3, #8]

  /* Update for DiscreteIntegrator: '<S2>/Discrete-Time Integrator' */
  rtDW.DiscreteTimeIntegrator_DSTATE += 0.001 * rtb_Angle_Error_CW;
 8005a3a:	4620      	mov	r0, r4
 8005a3c:	a32a      	add	r3, pc, #168	; (adr r3, 8005ae8 <Torque_Controller_step+0x170>)
 8005a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a42:	4629      	mov	r1, r5
 8005a44:	f7fa fbc0 	bl	80001c8 <__aeabi_dmul>
 8005a48:	4e2d      	ldr	r6, [pc, #180]	; (8005b00 <Torque_Controller_step+0x188>)
 8005a4a:	4602      	mov	r2, r0
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8005a52:	f7fa fce9 	bl	8000428 <__adddf3>
   *
   * Block description for '<S3>/UD':
   *
   *  Store in Global RAM
   */
  rtDW.UD_DSTATE = rtb_TSamp;
 8005a56:	e9c6 ab02 	strd	sl, fp, [r6, #8]
  rtDW.DiscreteTimeIntegrator_DSTATE += 0.001 * rtb_Angle_Error_CW;
 8005a5a:	e9c6 0100 	strd	r0, r1, [r6]
}
 8005a5e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
  } else if (u0 < -0.5) {
 8005a62:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 8005b0c <Torque_Controller_step+0x194>
 8005a66:	f04f 0800 	mov.w	r8, #0
 8005a6a:	464b      	mov	r3, r9
 8005a6c:	4630      	mov	r0, r6
 8005a6e:	4639      	mov	r1, r7
 8005a70:	4642      	mov	r2, r8
 8005a72:	f7fa feef 	bl	8000854 <__aeabi_dcmplt>
    rtY.RW_Speed = -0.5;
 8005a76:	4b21      	ldr	r3, [pc, #132]	; (8005afc <Torque_Controller_step+0x184>)
  } else if (u0 < -0.5) {
 8005a78:	b110      	cbz	r0, 8005a80 <Torque_Controller_step+0x108>
    rtY.RW_Speed = -0.5;
 8005a7a:	e9c3 8900 	strd	r8, r9, [r3]
 8005a7e:	e7da      	b.n	8005a36 <Torque_Controller_step+0xbe>
    rtY.RW_Speed = u0;
 8005a80:	e9c3 6700 	strd	r6, r7, [r3]
 8005a84:	e7d7      	b.n	8005a36 <Torque_Controller_step+0xbe>
                         ( (tmpVal.bitVal.words.wordH & 0x000FFFFF) != 0 ||
 8005a86:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8005a8a:	4323      	orrs	r3, r4
 8005a8c:	d08b      	beq.n	80059a6 <Torque_Controller_step+0x2e>
      rtb_TSamp = (rtNaN);
 8005a8e:	491d      	ldr	r1, [pc, #116]	; (8005b04 <Torque_Controller_step+0x18c>)
    rtb_Angle_Error_CW -= 6.2831853071795862 * rtb_TSamp;
 8005a90:	a30f      	add	r3, pc, #60	; (adr r3, 8005ad0 <Torque_Controller_step+0x158>)
 8005a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a96:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a9a:	f7fa fb95 	bl	80001c8 <__aeabi_dmul>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	4629      	mov	r1, r5
 8005aa6:	f7fa fcbd 	bl	8000424 <__aeabi_dsub>
 8005aaa:	4604      	mov	r4, r0
 8005aac:	460d      	mov	r5, r1
 8005aae:	e792      	b.n	80059d6 <Torque_Controller_step+0x5e>
 8005ab0:	4620      	mov	r0, r4
 8005ab2:	4629      	mov	r1, r5
 8005ab4:	a306      	add	r3, pc, #24	; (adr r3, 8005ad0 <Torque_Controller_step+0x158>)
 8005ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aba:	f7fa fcb5 	bl	8000428 <__adddf3>
 8005abe:	4604      	mov	r4, r0
 8005ac0:	460d      	mov	r5, r1
 8005ac2:	e788      	b.n	80059d6 <Torque_Controller_step+0x5e>
 8005ac4:	f3af 8000 	nop.w
 8005ac8:	54442d18 	.word	0x54442d18
 8005acc:	400921fb 	.word	0x400921fb
 8005ad0:	54442d18 	.word	0x54442d18
 8005ad4:	401921fb 	.word	0x401921fb
 8005ad8:	70a3d70a 	.word	0x70a3d70a
 8005adc:	3fb70a3d 	.word	0x3fb70a3d
 8005ae0:	ac083127 	.word	0xac083127
 8005ae4:	3fc45a1c 	.word	0x3fc45a1c
 8005ae8:	d2f1a9fc 	.word	0xd2f1a9fc
 8005aec:	3f50624d 	.word	0x3f50624d
 8005af0:	20000810 	.word	0x20000810
 8005af4:	7ff00000 	.word	0x7ff00000
 8005af8:	408f4000 	.word	0x408f4000
 8005afc:	20000830 	.word	0x20000830
 8005b00:	200007d0 	.word	0x200007d0
 8005b04:	20000800 	.word	0x20000800
 8005b08:	3fe00000 	.word	0x3fe00000
 8005b0c:	bfe00000 	.word	0xbfe00000

08005b10 <Torque_Controller_initialize>:
  rtNaN = rtGetNaN();
 8005b10:	490f      	ldr	r1, [pc, #60]	; (8005b50 <Torque_Controller_initialize+0x40>)
 8005b12:	4b10      	ldr	r3, [pc, #64]	; (8005b54 <Torque_Controller_initialize+0x44>)
  rtMinusInf = rtGetMinusInf();
 8005b14:	4a10      	ldr	r2, [pc, #64]	; (8005b58 <Torque_Controller_initialize+0x48>)
  rtNaN = rtGetNaN();
 8005b16:	2000      	movs	r0, #0
  rtInf = rtGetInf();
 8005b18:	ed9f 7b0b 	vldr	d7, [pc, #44]	; 8005b48 <Torque_Controller_initialize+0x38>
  rtNaN = rtGetNaN();
 8005b1c:	e9c3 0100 	strd	r0, r1, [r3]
  rtInf = rtGetInf();
 8005b20:	4b0e      	ldr	r3, [pc, #56]	; (8005b5c <Torque_Controller_initialize+0x4c>)
  rtMinusInf = rtGetMinusInf();
 8005b22:	490f      	ldr	r1, [pc, #60]	; (8005b60 <Torque_Controller_initialize+0x50>)
  rtInf = rtGetInf();
 8005b24:	ed83 7b00 	vstr	d7, [r3]
  rtMinusInf = rtGetMinusInf();
 8005b28:	2000      	movs	r0, #0
  rtInfF = rtGetInfF();
 8005b2a:	4b0e      	ldr	r3, [pc, #56]	; (8005b64 <Torque_Controller_initialize+0x54>)
  rtMinusInf = rtGetMinusInf();
 8005b2c:	e9c2 0100 	strd	r0, r1, [r2]
  rtInfF = rtGetInfF();
 8005b30:	f04f 42ff 	mov.w	r2, #2139095040	; 0x7f800000
 8005b34:	601a      	str	r2, [r3, #0]
  rtNaNF = rtGetNaNF();
 8005b36:	490c      	ldr	r1, [pc, #48]	; (8005b68 <Torque_Controller_initialize+0x58>)
  rtMinusInfF = rtGetMinusInfF();
 8005b38:	4b0c      	ldr	r3, [pc, #48]	; (8005b6c <Torque_Controller_initialize+0x5c>)
  rtNaNF = rtGetNaNF();
 8005b3a:	480d      	ldr	r0, [pc, #52]	; (8005b70 <Torque_Controller_initialize+0x60>)
  rtMinusInfF = rtGetMinusInfF();
 8005b3c:	4a0d      	ldr	r2, [pc, #52]	; (8005b74 <Torque_Controller_initialize+0x64>)
  rtNaNF = rtGetNaNF();
 8005b3e:	6008      	str	r0, [r1, #0]
  rtMinusInfF = rtGetMinusInfF();
 8005b40:	601a      	str	r2, [r3, #0]
{
  /* Registration code */

  /* initialize non-finites */
  rt_InitInfAndNaN(sizeof(real_T));
}
 8005b42:	4770      	bx	lr
 8005b44:	f3af 8000 	nop.w
 8005b48:	00000000 	.word	0x00000000
 8005b4c:	7ff00000 	.word	0x7ff00000
 8005b50:	fff80000 	.word	0xfff80000
 8005b54:	20000800 	.word	0x20000800
 8005b58:	200007f0 	.word	0x200007f0
 8005b5c:	200007e0 	.word	0x200007e0
 8005b60:	fff00000 	.word	0xfff00000
 8005b64:	200007e8 	.word	0x200007e8
 8005b68:	20000808 	.word	0x20000808
 8005b6c:	200007f8 	.word	0x200007f8
 8005b70:	ffc00000 	.word	0xffc00000
 8005b74:	ff800000 	.word	0xff800000

08005b78 <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 8005b78:	88c0      	ldrh	r0, [r0, #6]
 8005b7a:	4770      	bx	lr

08005b7c <Circle_Limitation>:
  *  @f$v_q = \sqrt(MaxModule^2-v_d^2\ ) @f$

  *
  */
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8005b7c:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8005b7e:	8803      	ldrh	r3, [r0, #0]
 8005b80:	140d      	asrs	r5, r1, #16
{
 8005b82:	b084      	sub	sp, #16
 8005b84:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005b86:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8005b8a:	fb03 f303 	mul.w	r3, r3, r3
{
 8005b8e:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8005b90:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8005b94:	428b      	cmp	r3, r1
 8005b96:	da10      	bge.n	8005bba <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005b98:	8846      	ldrh	r6, [r0, #2]
 8005b9a:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8005b9e:	4282      	cmp	r2, r0
 8005ba0:	dd14      	ble.n	8005bcc <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8005ba2:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8005ba4:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8005ba8:	bfb8      	it	lt
 8005baa:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8005bac:	f7fb fd5e 	bl	800166c <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8005bb0:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 8005bb2:	bfb8      	it	lt
 8005bb4:	4240      	neglt	r0, r0
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 8005bb6:	b235      	sxth	r5, r6
      Local_Vqd.q = (int16_t)new_q;
 8005bb8:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8005bba:	b2a4      	uxth	r4, r4
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	f364 000f 	bfi	r0, r4, #0, #16
 8005bc2:	b2ad      	uxth	r5, r5
 8005bc4:	f365 401f 	bfi	r0, r5, #16, #16
}
 8005bc8:	b004      	add	sp, #16
 8005bca:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8005bcc:	1a98      	subs	r0, r3, r2
 8005bce:	f7fb fd4d 	bl	800166c <MCM_Sqrt>
        if (Vqd.q < 0)
 8005bd2:	2c00      	cmp	r4, #0
 8005bd4:	daf0      	bge.n	8005bb8 <Circle_Limitation+0x3c>
          new_q = -new_q;
 8005bd6:	4240      	negs	r0, r0
 8005bd8:	e7ee      	b.n	8005bb8 <Circle_Limitation+0x3c>
 8005bda:	bf00      	nop

08005bdc <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8005bdc:	8a03      	ldrh	r3, [r0, #16]
 8005bde:	8b42      	ldrh	r2, [r0, #26]
 8005be0:	429a      	cmp	r2, r3
 8005be2:	d306      	bcc.n	8005bf2 <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8005be4:	8b82      	ldrh	r2, [r0, #28]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d901      	bls.n	8005bee <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 8005bea:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8005bec:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8005bee:	8ac0      	ldrh	r0, [r0, #22]
 8005bf0:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8005bf2:	2008      	movs	r0, #8
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop

08005bf8 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop

08005c00 <NTC_Init>:
{
 8005c00:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8005c02:	7803      	ldrb	r3, [r0, #0]
{
 8005c04:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8005c06:	b123      	cbz	r3, 8005c12 <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005c08:	8a43      	ldrh	r3, [r0, #18]
 8005c0a:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	82c2      	strh	r2, [r0, #22]
}
 8005c10:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8005c12:	3004      	adds	r0, #4
 8005c14:	f7fc fb44 	bl	80022a0 <RCM_RegisterRegConv>
 8005c18:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
      NTC_Clear(pHandle);
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f7ff ffeb 	bl	8005bf8 <NTC_Clear>
}
 8005c22:	bd10      	pop	{r4, pc}

08005c24 <NTC_CalcAvTemp>:
  * @param pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  * @retval Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 8005c24:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8005c26:	7803      	ldrb	r3, [r0, #0]
{
 8005c28:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8005c2a:	b113      	cbz	r3, 8005c32 <NTC_CalcAvTemp+0xe>

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 8005c2c:	2000      	movs	r0, #0
 8005c2e:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8005c30:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005c32:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005c36:	f7fc fc25 	bl	8002484 <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 8005c3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005c3e:	4298      	cmp	r0, r3
 8005c40:	d007      	beq.n	8005c52 <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8005c42:	8b23      	ldrh	r3, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8005c44:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8005c46:	1e59      	subs	r1, r3, #1
        wtemp += hAux;
 8005c48:	fb01 0002 	mla	r0, r1, r2, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8005c4c:	fbb0 f0f3 	udiv	r0, r0, r3
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8005c50:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8005c52:	4620      	mov	r0, r4
 8005c54:	f7ff ffc2 	bl	8005bdc <NTC_SetFaultState>
 8005c58:	82e0      	strh	r0, [r4, #22]
}
 8005c5a:	bd10      	pop	{r4, pc}

08005c5c <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8005c5c:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8005c5e:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8005c60:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8005c62:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8005c64:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8005c66:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8005c68:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005c6a:	4770      	bx	lr

08005c6c <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8005c6c:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8005c6e:	4770      	bx	lr

08005c70 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8005c70:	8b40      	ldrh	r0, [r0, #26]
 8005c72:	4770      	bx	lr

08005c74 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005c74:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8005c78:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005c7c:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8005c80:	b510      	push	{r4, lr}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005c82:	fb01 f303 	mul.w	r3, r1, r3
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005c86:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
    if (0 == pHandle->hKiGain)
 8005c8a:	b162      	cbz	r2, 8005ca6 <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005c8c:	fb01 f202 	mul.w	r2, r1, r2
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005c90:	6881      	ldr	r1, [r0, #8]

      if (wIntegral_sum_temp < 0)
 8005c92:	188c      	adds	r4, r1, r2
 8005c94:	d420      	bmi.n	8005cd8 <PI_Controller+0x64>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8005c96:	2900      	cmp	r1, #0
 8005c98:	db2a      	blt.n	8005cf0 <PI_Controller+0x7c>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005c9a:	68c2      	ldr	r2, [r0, #12]
 8005c9c:	42a2      	cmp	r2, r4
 8005c9e:	db02      	blt.n	8005ca6 <PI_Controller+0x32>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8005ca0:	6902      	ldr	r2, [r0, #16]
 8005ca2:	42a2      	cmp	r2, r4
 8005ca4:	dd22      	ble.n	8005cec <PI_Controller+0x78>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8005ca6:	8b81      	ldrh	r1, [r0, #28]
 8005ca8:	410b      	asrs	r3, r1
 8005caa:	8bc1      	ldrh	r1, [r0, #30]
 8005cac:	fa42 f101 	asr.w	r1, r2, r1
 8005cb0:	440b      	add	r3, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8005cb2:	459c      	cmp	ip, r3
 8005cb4:	da05      	bge.n	8005cc2 <PI_Controller+0x4e>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8005cb6:	ebac 0303 	sub.w	r3, ip, r3
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8005cba:	441a      	add	r2, r3
 8005cbc:	6082      	str	r2, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8005cbe:	4660      	mov	r0, ip
 8005cc0:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8005cc2:	459e      	cmp	lr, r3
      wDischarge = hLowerOutputLimit - wOutput_32;
 8005cc4:	bfc9      	itett	gt
 8005cc6:	ebae 0303 	subgt.w	r3, lr, r3
    returnValue = (int16_t)wOutput_32;
 8005cca:	fa0f fc83 	sxthle.w	ip, r3
    pHandle->wIntegralTerm += wDischarge;
 8005cce:	18d2      	addgt	r2, r2, r3
 8005cd0:	46f4      	movgt	ip, lr
 8005cd2:	6082      	str	r2, [r0, #8]
}
 8005cd4:	4660      	mov	r0, ip
 8005cd6:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	ddde      	ble.n	8005c9a <PI_Controller+0x26>
          if (wIntegral_Term > 0)
 8005cdc:	2a00      	cmp	r2, #0
 8005cde:	dddc      	ble.n	8005c9a <PI_Controller+0x26>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005ce0:	68c2      	ldr	r2, [r0, #12]
 8005ce2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005ce6:	428a      	cmp	r2, r1
 8005ce8:	d1dd      	bne.n	8005ca6 <PI_Controller+0x32>
            wIntegral_sum_temp = INT32_MAX;
 8005cea:	4614      	mov	r4, r2
 8005cec:	4622      	mov	r2, r4
 8005cee:	e7da      	b.n	8005ca6 <PI_Controller+0x32>
            wIntegral_sum_temp = -INT32_MAX;
 8005cf0:	4902      	ldr	r1, [pc, #8]	; (8005cfc <PI_Controller+0x88>)
 8005cf2:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8005cf6:	bf28      	it	cs
 8005cf8:	460c      	movcs	r4, r1
 8005cfa:	e7ce      	b.n	8005c9a <PI_Controller+0x26>
 8005cfc:	80000001 	.word	0x80000001

08005d00 <PQD_CalcElMotorPower>:
  }
  else
  {
#endif
    int32_t wAux;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8005d00:	6882      	ldr	r2, [r0, #8]
{
 8005d02:	b500      	push	{lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8005d04:	89d1      	ldrh	r1, [r2, #14]
 8005d06:	f8b2 e018 	ldrh.w	lr, [r2, #24]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8005d0a:	8993      	ldrh	r3, [r2, #12]
 8005d0c:	f8b2 c016 	ldrh.w	ip, [r2, #22]
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8005d10:	fb11 f20e 	smulbb	r2, r1, lr
    wAux /= 65536;
 8005d14:	fb13 230c 	smlabb	r3, r3, ip, r2
 8005d18:	2b00      	cmp	r3, #0

    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8005d1a:	f9b0 2000 	ldrsh.w	r2, [r0]
    wAux /= 65536;
 8005d1e:	bfbc      	itt	lt
 8005d20:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
 8005d24:	33ff      	addlt	r3, #255	; 0xff
    pHandle->hAvrgElMotorPower += (wAux - pHandle->hAvrgElMotorPower) >> 4;
 8005d26:	ebc2 4323 	rsb	r3, r2, r3, asr #16
 8005d2a:	eb02 1323 	add.w	r3, r2, r3, asr #4
 8005d2e:	8003      	strh	r3, [r0, #0]

#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 8005d30:	f85d fb04 	ldr.w	pc, [sp], #4

08005d34 <PQD_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvrgElMotorPower = 0;
 8005d34:	2300      	movs	r3, #0
 8005d36:	8003      	strh	r3, [r0, #0]
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop

08005d3c <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8005d3c:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <startTimers+0x60>)
 8005d3e:	69da      	ldr	r2, [r3, #28]
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 8005d40:	07d2      	lsls	r2, r2, #31
 8005d42:	d415      	bmi.n	8005d70 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8005d44:	69da      	ldr	r2, [r3, #28]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	61da      	str	r2, [r3, #28]
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005d4c:	69da      	ldr	r2, [r3, #28]
{
 8005d4e:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005d50:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005d54:	f002 0201 	and.w	r2, r2, #1
 8005d58:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005d5a:	9a01      	ldr	r2, [sp, #4]
 8005d5c:	694a      	ldr	r2, [r1, #20]
 8005d5e:	f042 0201 	orr.w	r2, r2, #1
 8005d62:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005d64:	69da      	ldr	r2, [r3, #28]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	61da      	str	r2, [r3, #28]
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8005d6c:	b002      	add	sp, #8
 8005d6e:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8005d70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005d74:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005d76:	6859      	ldr	r1, [r3, #4]
 8005d78:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005d7c:	f041 0120 	orr.w	r1, r1, #32
 8005d80:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005d82:	6959      	ldr	r1, [r3, #20]
 8005d84:	f041 0101 	orr.w	r1, r1, #1
 8005d88:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005d8a:	6859      	ldr	r1, [r3, #4]
 8005d8c:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005d90:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005d94:	430a      	orrs	r2, r1
 8005d96:	605a      	str	r2, [r3, #4]
 8005d98:	4770      	bx	lr
 8005d9a:	bf00      	nop
 8005d9c:	40021000 	.word	0x40021000

08005da0 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8005da0:	3201      	adds	r2, #1
{
 8005da2:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8005da4:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005da6:	f06f 0602 	mvn.w	r6, #2
 8005daa:	0155      	lsls	r5, r2, #5
 8005dac:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8005dae:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8005db0:	f893 c000 	ldrb.w	ip, [r3]
 8005db4:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8005db8:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8005dbc:	d80c      	bhi.n	8005dd8 <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005dbe:	6904      	ldr	r4, [r0, #16]
 8005dc0:	07a4      	lsls	r4, r4, #30
 8005dc2:	d5f5      	bpl.n	8005db0 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8005dc4:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005dc8:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005dca:	6106      	str	r6, [r0, #16]
 8005dcc:	d8f0      	bhi.n	8005db0 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8005dce:	781c      	ldrb	r4, [r3, #0]
 8005dd0:	2c0f      	cmp	r4, #15
 8005dd2:	d8ed      	bhi.n	8005db0 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
  }
 8005dd8:	bd70      	pop	{r4, r5, r6, pc}
 8005dda:	bf00      	nop

08005ddc <R3_1_GetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;  
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005ddc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
{
 8005de0:	b470      	push	{r4, r5, r6}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005de2:	e9d2 3400 	ldrd	r3, r4, [r2]
  int32_t Aux;
  uint32_t ADCDataReg1;
  uint32_t ADCDataReg2;
  
  Sector = ( uint8_t )pHandle->_Super.Sector;
  ADCDataReg1 =  ADCx->JDR1;
 8005de6:	f8d3 5080 	ldr.w	r5, [r3, #128]	; 0x80
  ADCDataReg2 =  ADCx->JDR2;
 8005dea:	f8d3 6084 	ldr.w	r6, [r3, #132]	; 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005dee:	6863      	ldr	r3, [r4, #4]
  Sector = ( uint8_t )pHandle->_Super.Sector;
 8005df0:	f890 206a 	ldrb.w	r2, [r0, #106]	; 0x6a
 8005df4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005df8:	6063      	str	r3, [r4, #4]
  
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);  
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);
  
  switch ( Sector )
 8005dfa:	2a05      	cmp	r2, #5
 8005dfc:	f200 809f 	bhi.w	8005f3e <R3_1_GetPhaseCurrents+0x162>
 8005e00:	e8df f002 	tbb	[pc, r2]
 8005e04:	031f1f38 	.word	0x031f1f38
 8005e08:	3803      	.short	0x3803
  {
    case SECTOR_4:
    case SECTOR_5:
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8005e0a:	6f04      	ldr	r4, [r0, #112]	; 0x70

      /* Saturation of Ia */
      if ( Aux < -INT16_MAX )
 8005e0c:	4b4f      	ldr	r3, [pc, #316]	; (8005f4c <R3_1_GetPhaseCurrents+0x170>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8005e0e:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8005e10:	429c      	cmp	r4, r3
 8005e12:	da54      	bge.n	8005ebe <R3_1_GetPhaseCurrents+0xe2>
      {
        Iab->a = -INT16_MAX;
      }
      else  if ( Aux > INT16_MAX )
      {
        Iab->a = INT16_MAX;
 8005e14:	800b      	strh	r3, [r1, #0]
      {
        Iab->a = ( int16_t )Aux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8005e16:	6f42      	ldr	r2, [r0, #116]	; 0x74

      /* Saturation of Ib */
      if ( Aux < -INT16_MAX )
 8005e18:	4d4c      	ldr	r5, [pc, #304]	; (8005f4c <R3_1_GetPhaseCurrents+0x170>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg2 );
 8005e1a:	1b92      	subs	r2, r2, r6
      if ( Aux < -INT16_MAX )
 8005e1c:	42aa      	cmp	r2, r5
 8005e1e:	da54      	bge.n	8005eca <R3_1_GetPhaseCurrents+0xee>

    default:
      break;
  }

  pHandle->_Super.Ia = Iab->a;
 8005e20:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = -INT16_MAX;
 8005e24:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = Iab->b;
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005e26:	fa1f f38c 	uxth.w	r3, ip
 8005e2a:	f248 0201 	movw	r2, #32769	; 0x8001
 8005e2e:	4413      	add	r3, r2
 8005e30:	425b      	negs	r3, r3
  pHandle->_Super.Ib = Iab->b;
 8005e32:	f8a0 5052 	strh.w	r5, [r0, #82]	; 0x52
  pHandle->_Super.Ia = Iab->a;
 8005e36:	f8a0 c050 	strh.w	ip, [r0, #80]	; 0x50
}
 8005e3a:	bc70      	pop	{r4, r5, r6}
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005e3c:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
}
 8005e40:	4770      	bx	lr
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8005e42:	6f04      	ldr	r4, [r0, #112]	; 0x70
      if ( Aux < -INT16_MAX )
 8005e44:	4b41      	ldr	r3, [pc, #260]	; (8005f4c <R3_1_GetPhaseCurrents+0x170>)
      Aux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( ADCDataReg1 );
 8005e46:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8005e48:	429c      	cmp	r4, r3
 8005e4a:	db32      	blt.n	8005eb2 <R3_1_GetPhaseCurrents+0xd6>
      else  if ( Aux > INT16_MAX )
 8005e4c:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005e50:	db69      	blt.n	8005f26 <R3_1_GetPhaseCurrents+0x14a>
        Iab->a = INT16_MAX;
 8005e52:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005e56:	4613      	mov	r3, r2
 8005e58:	800a      	strh	r2, [r1, #0]
 8005e5a:	4614      	mov	r4, r2
 8005e5c:	4694      	mov	ip, r2
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8005e5e:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005e60:	1ab2      	subs	r2, r6, r2
      Aux -= ( int32_t )Iab->a;             /* Ib */
 8005e62:	1b12      	subs	r2, r2, r4
      if ( Aux > INT16_MAX )
 8005e64:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005e68:	db44      	blt.n	8005ef4 <R3_1_GetPhaseCurrents+0x118>
        Iab->b = INT16_MAX;
 8005e6a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005e6e:	804a      	strh	r2, [r1, #2]
 8005e70:	4615      	mov	r5, r2
 8005e72:	e7dc      	b.n	8005e2e <R3_1_GetPhaseCurrents+0x52>
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8005e74:	6f44      	ldr	r4, [r0, #116]	; 0x74
      if ( Aux < -INT16_MAX )
 8005e76:	4b35      	ldr	r3, [pc, #212]	; (8005f4c <R3_1_GetPhaseCurrents+0x170>)
      Aux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( ADCDataReg1 );
 8005e78:	1b64      	subs	r4, r4, r5
      if ( Aux < -INT16_MAX )
 8005e7a:	429c      	cmp	r4, r3
 8005e7c:	db13      	blt.n	8005ea6 <R3_1_GetPhaseCurrents+0xca>
      else  if ( Aux > INT16_MAX )
 8005e7e:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005e82:	db44      	blt.n	8005f0e <R3_1_GetPhaseCurrents+0x132>
        Iab->b = INT16_MAX;
 8005e84:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005e88:	461a      	mov	r2, r3
 8005e8a:	804b      	strh	r3, [r1, #2]
 8005e8c:	461c      	mov	r4, r3
 8005e8e:	461d      	mov	r5, r3
      Aux = ( int32_t )( ADCDataReg2 ) - ( int32_t )( pHandle->PhaseCOffset ); /* -Ic */
 8005e90:	6f83      	ldr	r3, [r0, #120]	; 0x78
 8005e92:	1af3      	subs	r3, r6, r3
      Aux -= ( int32_t )Iab->b;             /* Ia  */
 8005e94:	1b1c      	subs	r4, r3, r4
      if ( Aux > INT16_MAX )
 8005e96:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005e9a:	db23      	blt.n	8005ee4 <R3_1_GetPhaseCurrents+0x108>
        Iab->a = INT16_MAX;
 8005e9c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005ea0:	800b      	strh	r3, [r1, #0]
 8005ea2:	469c      	mov	ip, r3
 8005ea4:	e7c3      	b.n	8005e2e <R3_1_GetPhaseCurrents+0x52>
        Iab->b = -INT16_MAX;
 8005ea6:	804b      	strh	r3, [r1, #2]
 8005ea8:	461c      	mov	r4, r3
 8005eaa:	f248 0201 	movw	r2, #32769	; 0x8001
 8005eae:	461d      	mov	r5, r3
 8005eb0:	e7ee      	b.n	8005e90 <R3_1_GetPhaseCurrents+0xb4>
        Iab->a = -INT16_MAX;
 8005eb2:	461c      	mov	r4, r3
 8005eb4:	800b      	strh	r3, [r1, #0]
 8005eb6:	46a4      	mov	ip, r4
 8005eb8:	f248 0301 	movw	r3, #32769	; 0x8001
 8005ebc:	e7cf      	b.n	8005e5e <R3_1_GetPhaseCurrents+0x82>
      else  if ( Aux > INT16_MAX )
 8005ebe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005ec2:	db1e      	blt.n	8005f02 <R3_1_GetPhaseCurrents+0x126>
        Iab->a = INT16_MAX;
 8005ec4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005ec8:	e7a4      	b.n	8005e14 <R3_1_GetPhaseCurrents+0x38>
      else  if ( Aux > INT16_MAX )
 8005eca:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005ece:	db22      	blt.n	8005f16 <R3_1_GetPhaseCurrents+0x13a>
        Iab->b = INT16_MAX;
 8005ed0:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = Iab->a;
 8005ed4:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = INT16_MAX;
 8005ed8:	804b      	strh	r3, [r1, #2]
 8005eda:	461a      	mov	r2, r3
 8005edc:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005ede:	fa1f f38c 	uxth.w	r3, ip
 8005ee2:	e7a4      	b.n	8005e2e <R3_1_GetPhaseCurrents+0x52>
      else  if ( Aux < -INT16_MAX )
 8005ee4:	4e19      	ldr	r6, [pc, #100]	; (8005f4c <R3_1_GetPhaseCurrents+0x170>)
 8005ee6:	42b4      	cmp	r4, r6
 8005ee8:	da23      	bge.n	8005f32 <R3_1_GetPhaseCurrents+0x156>
        Iab->a = -INT16_MAX;
 8005eea:	800e      	strh	r6, [r1, #0]
 8005eec:	f248 0301 	movw	r3, #32769	; 0x8001
 8005ef0:	46b4      	mov	ip, r6
 8005ef2:	e79c      	b.n	8005e2e <R3_1_GetPhaseCurrents+0x52>
      else  if ( Aux < -INT16_MAX )
 8005ef4:	4d15      	ldr	r5, [pc, #84]	; (8005f4c <R3_1_GetPhaseCurrents+0x170>)
 8005ef6:	42aa      	cmp	r2, r5
 8005ef8:	da05      	bge.n	8005f06 <R3_1_GetPhaseCurrents+0x12a>
        Iab->b = -INT16_MAX;
 8005efa:	804d      	strh	r5, [r1, #2]
 8005efc:	f248 0201 	movw	r2, #32769	; 0x8001
 8005f00:	e795      	b.n	8005e2e <R3_1_GetPhaseCurrents+0x52>
        Iab->a = ( int16_t )Aux;
 8005f02:	800c      	strh	r4, [r1, #0]
 8005f04:	e787      	b.n	8005e16 <R3_1_GetPhaseCurrents+0x3a>
        Iab->b = ( int16_t )Aux;
 8005f06:	b215      	sxth	r5, r2
 8005f08:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005f0a:	b292      	uxth	r2, r2
 8005f0c:	e78f      	b.n	8005e2e <R3_1_GetPhaseCurrents+0x52>
        Iab->b = ( int16_t )Aux;
 8005f0e:	b225      	sxth	r5, r4
 8005f10:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005f12:	b2a2      	uxth	r2, r4
 8005f14:	e7bc      	b.n	8005e90 <R3_1_GetPhaseCurrents+0xb4>
  pHandle->_Super.Ia = Iab->a;
 8005f16:	f9b1 c000 	ldrsh.w	ip, [r1]
        Iab->b = ( int16_t )Aux;
 8005f1a:	b215      	sxth	r5, r2
 8005f1c:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005f1e:	fa1f f38c 	uxth.w	r3, ip
 8005f22:	b292      	uxth	r2, r2
 8005f24:	e783      	b.n	8005e2e <R3_1_GetPhaseCurrents+0x52>
        Iab->a = ( int16_t )Aux;
 8005f26:	fa0f fc84 	sxth.w	ip, r4
 8005f2a:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005f2e:	b2a3      	uxth	r3, r4
 8005f30:	e795      	b.n	8005e5e <R3_1_GetPhaseCurrents+0x82>
        Iab->a = ( int16_t )Aux;
 8005f32:	fa0f fc84 	sxth.w	ip, r4
 8005f36:	f8a1 c000 	strh.w	ip, [r1]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005f3a:	b2a3      	uxth	r3, r4
 8005f3c:	e777      	b.n	8005e2e <R3_1_GetPhaseCurrents+0x52>
  pHandle->_Super.Ia = Iab->a;
 8005f3e:	f9b1 c000 	ldrsh.w	ip, [r1]
  pHandle->_Super.Ib = Iab->b;
 8005f42:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -Iab->a - Iab->b;
 8005f46:	880b      	ldrh	r3, [r1, #0]
 8005f48:	884a      	ldrh	r2, [r1, #2]
 8005f4a:	e770      	b.n	8005e2e <R3_1_GetPhaseCurrents+0x52>
 8005f4c:	ffff8001 	.word	0xffff8001

08005f50 <R3_1_SetADCSampPointPolarization>:
  *
  * @param  pHdl: Handler of the current instance of the PWM component.
  * @retval uint16_t Returns the return value of R3_1_WriteTIMRegisters.
  */
uint16_t R3_1_SetADCSampPointPolarization( PWMC_Handle_t * pHdl )
{
 8005f50:	b430      	push	{r4, r5}
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  pHandle->_Super.Sector = pHandle->PolarizationSector;

  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8005f52:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8005f56:	f890 1083 	ldrb.w	r1, [r0, #131]	; 0x83
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005f5a:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  pHandle->_Super.Sector = pHandle->PolarizationSector;
 8005f5e:	f880 106a 	strb.w	r1, [r0, #106]	; 0x6a
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005f62:	685b      	ldr	r3, [r3, #4]
  uint16_t Aux;


  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8005f64:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8005f66:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 8005f6a:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005f6e:	635d      	str	r5, [r3, #52]	; 0x34
  return R3_1_WriteTIMRegisters( &pHandle->_Super, ( pHandle->Half_PWMPeriod - (uint16_t) 1 ) );
 8005f70:	3a01      	subs	r2, #1
 8005f72:	b292      	uxth	r2, r2
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005f74:	639c      	str	r4, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005f76:	63d9      	str	r1, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005f78:	641a      	str	r2, [r3, #64]	; 0x40
  LL_TIM_OC_SetCompareCH4( TIMx, (uint32_t) SamplingPoint );

  /* Limit for update event */

//  if ( LL_TIM_CC_IsEnabledChannel(TIMx, LL_TIM_CHANNEL_CH4) == 1u )
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	f013 0f70 	tst.w	r3, #112	; 0x70
}
 8005f80:	bf14      	ite	ne
 8005f82:	2001      	movne	r0, #1
 8005f84:	2000      	moveq	r0, #0
 8005f86:	bc30      	pop	{r4, r5}
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop

08005f8c <R3_1_HFCurrentsPolarizationAB>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005f8c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 8005f90:	e9d2 3200 	ldrd	r3, r2, [r2]
{
 8005f94:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;

  uint32_t ADCDataReg1 = ADCx->JDR1;
 8005f96:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
  uint32_t ADCDataReg2 = ADCx->JDR2;
 8005f9a:	f8d3 5084 	ldr.w	r5, [r3, #132]	; 0x84
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005f9e:	6853      	ldr	r3, [r2, #4]
 8005fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fa4:	6053      	str	r3, [r2, #4]
   
  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005fa6:	f890 c082 	ldrb.w	ip, [r0, #130]	; 0x82
 8005faa:	f1bc 0f0f 	cmp.w	ip, #15
 8005fae:	d80b      	bhi.n	8005fc8 <R3_1_HFCurrentsPolarizationAB+0x3c>
  {
    pHandle-> PhaseAOffset += ADCDataReg1;
 8005fb0:	6f03      	ldr	r3, [r0, #112]	; 0x70
    pHandle-> PhaseBOffset += ADCDataReg2;
 8005fb2:	6f42      	ldr	r2, [r0, #116]	; 0x74
    pHandle-> PhaseAOffset += ADCDataReg1;
 8005fb4:	441c      	add	r4, r3
    pHandle->PolarizationCounter++;
 8005fb6:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
    pHandle-> PhaseBOffset += ADCDataReg2;
 8005fba:	442a      	add	r2, r5
    pHandle->PolarizationCounter++;
 8005fbc:	3301      	adds	r3, #1
    pHandle-> PhaseBOffset += ADCDataReg2;
 8005fbe:	e9c0 421c 	strd	r4, r2, [r0, #112]	; 0x70
    pHandle->PolarizationCounter++;
 8005fc2:	b2db      	uxtb	r3, r3
 8005fc4:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8005fc8:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8005fca:	bc30      	pop	{r4, r5}
  Iab->a = 0;
 8005fcc:	600b      	str	r3, [r1, #0]
}
 8005fce:	4770      	bx	lr

08005fd0 <R3_1_HFCurrentsPolarizationC>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005fd0:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8005fd4:	e9d3 3200 	ldrd	r3, r2, [r3]
{
 8005fd8:	b410      	push	{r4}

  uint32_t ADCDataReg2 = ADCx->JDR2;
 8005fda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8005fde:	6853      	ldr	r3, [r2, #4]
 8005fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fe4:	6053      	str	r3, [r2, #4]

  /* disable ADC trigger source */
  //LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
    LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005fe6:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
 8005fea:	2b0f      	cmp	r3, #15
 8005fec:	d808      	bhi.n	8006000 <R3_1_HFCurrentsPolarizationC+0x30>
  {
    /* Phase C is read from SECTOR_1, second value */
    pHandle-> PhaseCOffset += ADCDataReg2;    
    pHandle->PolarizationCounter++;
 8005fee:	f890 3082 	ldrb.w	r3, [r0, #130]	; 0x82
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8005ff2:	6f82      	ldr	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 8005ff4:	3301      	adds	r3, #1
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8005ff6:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8005ff8:	b2db      	uxtb	r3, r3
    pHandle-> PhaseCOffset += ADCDataReg2;    
 8005ffa:	6782      	str	r2, [r0, #120]	; 0x78
    pHandle->PolarizationCounter++;
 8005ffc:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
  }

  /* during offset calibration no current is flowing in the phases */
  Iab->a = 0;
 8006000:	2300      	movs	r3, #0
  Iab->b = 0;
}
 8006002:	f85d 4b04 	ldr.w	r4, [sp], #4
  Iab->a = 0;
 8006006:	600b      	str	r3, [r1, #0]
}
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop

0800600c <R3_1_TurnOnLowSides>:
  * @param  ticks: Timer ticks value to be applied
  *                Min value: 0 (low sides ON)
  *                Max value: PWM_PERIOD_CYCLES/2 (low sides OFF)
  */
__weak void R3_1_TurnOnLowSides( PWMC_Handle_t * pHdl, uint32_t ticks )
{
 800600c:	b410      	push	{r4}
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800600e:	f8d0 4088 	ldr.w	r4, [r0, #136]	; 0x88

  pHandle->_Super.TurnOnLowSidesAction = true;
 8006012:	2301      	movs	r3, #1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006014:	6862      	ldr	r2, [r4, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8006016:	f880 306b 	strb.w	r3, [r0, #107]	; 0x6b
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800601a:	f06f 0301 	mvn.w	r3, #1
 800601e:	6113      	str	r3, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006020:	6351      	str	r1, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006022:	6391      	str	r1, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006024:	63d1      	str	r1, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006026:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, ticks );
  LL_TIM_OC_SetCompareCH2( TIMx, ticks );
  LL_TIM_OC_SetCompareCH3( TIMx, ticks );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8006028:	07db      	lsls	r3, r3, #31
 800602a:	d5fc      	bpl.n	8006026 <R3_1_TurnOnLowSides+0x1a>
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800602c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800602e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006032:	6453      	str	r3, [r2, #68]	; 0x44
  {}

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006034:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006038:	2b02      	cmp	r3, #2
 800603a:	d109      	bne.n	8006050 <R3_1_TurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800603c:	e9d4 2106 	ldrd	r2, r1, [r4, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006040:	8fa0      	ldrh	r0, [r4, #60]	; 0x3c
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006042:	6a23      	ldr	r3, [r4, #32]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006044:	6190      	str	r0, [r2, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006046:	8fe0      	ldrh	r0, [r4, #62]	; 0x3e
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006048:	f8b4 2040 	ldrh.w	r2, [r4, #64]	; 0x40
 800604c:	6188      	str	r0, [r1, #24]
 800604e:	619a      	str	r2, [r3, #24]
  }
  return;
}
 8006050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop

08006058 <R3_1_SwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006058:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88

  pHandle->_Super.TurnOnLowSidesAction = false;

  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800605c:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006060:	684b      	ldr	r3, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006062:	f04f 0c00 	mov.w	ip, #0
{
 8006066:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006068:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
  LL_TIM_OC_SetCompareCH1(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
 800606c:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800606e:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH3(TIMx, ((uint32_t) pHandle->Half_PWMPeriod / (uint32_t) 2));
  LL_TIM_OC_SetCompareCH4(TIMx, ((uint32_t) pHandle->Half_PWMPeriod - (uint32_t) 5));
 8006070:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006072:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006074:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006076:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 800607a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800607c:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800607e:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8006080:	07d2      	lsls	r2, r2, #31
 8006082:	d5fc      	bpl.n	800607e <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006084:	f06f 0201 	mvn.w	r2, #1
 8006088:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800608a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800608c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006090:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006094:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006098:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs ( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800609a:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
 800609e:	2a02      	cmp	r2, #2
 80060a0:	d008      	beq.n	80060b4 <R3_1_SwitchOnPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80060a2:	f06f 0201 	mvn.w	r2, #1
 80060a6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80060a8:	68da      	ldr	r2, [r3, #12]
 80060aa:	f042 0201 	orr.w	r2, r2, #1
  }
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );
}
 80060ae:	bc30      	pop	{r4, r5}
 80060b0:	60da      	str	r2, [r3, #12]
 80060b2:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80060b4:	6a18      	ldr	r0, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80060b6:	698c      	ldr	r4, [r1, #24]
 80060b8:	8f8d      	ldrh	r5, [r1, #60]	; 0x3c
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80060ba:	f240 5255 	movw	r2, #1365	; 0x555
 80060be:	4210      	tst	r0, r2
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80060c0:	e9d1 0207 	ldrd	r0, r2, [r1, #28]
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 80060c4:	d006      	beq.n	80060d4 <R3_1_SwitchOnPWM+0x7c>
 80060c6:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80060c8:	8fcc      	ldrh	r4, [r1, #62]	; 0x3e
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80060ca:	f8b1 1040 	ldrh.w	r1, [r1, #64]	; 0x40
 80060ce:	6184      	str	r4, [r0, #24]
 80060d0:	6191      	str	r1, [r2, #24]
}
 80060d2:	e7e6      	b.n	80060a2 <R3_1_SwitchOnPWM+0x4a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BRR, PinMask);
 80060d4:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80060d6:	8fcc      	ldrh	r4, [r1, #62]	; 0x3e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80060d8:	f8b1 1040 	ldrh.w	r1, [r1, #64]	; 0x40
 80060dc:	6284      	str	r4, [r0, #40]	; 0x28
 80060de:	6291      	str	r1, [r2, #40]	; 0x28
}
 80060e0:	e7df      	b.n	80060a2 <R3_1_SwitchOnPWM+0x4a>
 80060e2:	bf00      	nop

080060e4 <R3_1_SwitchOffPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80060e4:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80060e8:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80060ea:	68d3      	ldr	r3, [r2, #12]
 80060ec:	f023 0301 	bic.w	r3, r3, #1
 80060f0:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80060f2:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 80060f4:	f04f 0c00 	mov.w	ip, #0
 80060f8:	f880 c06b 	strb.w	ip, [r0, #107]	; 0x6b
  
  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs( TIMx );
  if ( pHandle->BrakeActionLock == true )
 80060fc:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
 8006100:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006104:	6453      	str	r3, [r2, #68]	; 0x44
 8006106:	b918      	cbnz	r0, 8006110 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006108:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
 800610c:	2b02      	cmp	r3, #2
 800610e:	d009      	beq.n	8006124 <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006110:	f06f 0301 	mvn.w	r3, #1
 8006114:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006116:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8006118:	07db      	lsls	r3, r3, #31
 800611a:	d5fc      	bpl.n	8006116 <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800611c:	f06f 0301 	mvn.w	r3, #1
 8006120:	6113      	str	r3, [r2, #16]
 8006122:	4770      	bx	lr
{
 8006124:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006126:	e9d1 4006 	ldrd	r4, r0, [r1, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 800612a:	6a0b      	ldr	r3, [r1, #32]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800612c:	8f8d      	ldrh	r5, [r1, #60]	; 0x3c
  WRITE_REG(GPIOx->BRR, PinMask);
 800612e:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006130:	8fcc      	ldrh	r4, [r1, #62]	; 0x3e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006132:	f8b1 1040 	ldrh.w	r1, [r1, #64]	; 0x40
 8006136:	6284      	str	r4, [r0, #40]	; 0x28
 8006138:	6299      	str	r1, [r3, #40]	; 0x28
 800613a:	f06f 0301 	mvn.w	r3, #1
 800613e:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006140:	6913      	ldr	r3, [r2, #16]
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0u )
 8006142:	07d9      	lsls	r1, r3, #31
 8006144:	d5fc      	bpl.n	8006140 <R3_1_SwitchOffPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006146:	f06f 0301 	mvn.w	r3, #1
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

}
 800614a:	bc30      	pop	{r4, r5}
 800614c:	6113      	str	r3, [r2, #16]
 800614e:	4770      	bx	lr

08006150 <R3_1_RLGetPhaseCurrents>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006150:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_SetTriggerOutput(TIMx, LL_TIM_TRGO_RESET);

  wAux = (int32_t)( pHandle->PhaseBOffset ) - ADCx->JDR2;
 8006154:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8006156:	b410      	push	{r4}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006158:	e9d2 4000 	ldrd	r4, r0, [r2]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800615c:	6842      	ldr	r2, [r0, #4]
 800615e:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006162:	6042      	str	r2, [r0, #4]
  wAux = (int32_t)( pHandle->PhaseBOffset ) - ADCx->JDR2;
 8006164:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84

  /* Check saturation */
  if ( wAux > -INT16_MAX )
 8006168:	4a0b      	ldr	r2, [pc, #44]	; (8006198 <R3_1_RLGetPhaseCurrents+0x48>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - ADCx->JDR2;
 800616a:	1a1b      	subs	r3, r3, r0
  if ( wAux > -INT16_MAX )
 800616c:	4293      	cmp	r3, r2
 800616e:	db05      	blt.n	800617c <R3_1_RLGetPhaseCurrents+0x2c>
  {
    if ( wAux < INT16_MAX )
 8006170:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006174:	4293      	cmp	r3, r2
 8006176:	dc0b      	bgt.n	8006190 <R3_1_RLGetPhaseCurrents+0x40>
  else
  {
    wAux = -INT16_MAX;
  }

  pStator_Currents->a = (int16_t)wAux;
 8006178:	b21b      	sxth	r3, r3
 800617a:	e000      	b.n	800617e <R3_1_RLGetPhaseCurrents+0x2e>
 800617c:	4b07      	ldr	r3, [pc, #28]	; (800619c <R3_1_RLGetPhaseCurrents+0x4c>)
  pStator_Currents->b = (int16_t)wAux;
}
 800617e:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = (int16_t)wAux;
 8006182:	2200      	movs	r2, #0
 8006184:	f363 020f 	bfi	r2, r3, #0, #16
 8006188:	f363 421f 	bfi	r2, r3, #16, #16
 800618c:	600a      	str	r2, [r1, #0]
}
 800618e:	4770      	bx	lr
 8006190:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8006194:	e7f3      	b.n	800617e <R3_1_RLGetPhaseCurrents+0x2e>
 8006196:	bf00      	nop
 8006198:	ffff8002 	.word	0xffff8002
 800619c:	ffff8001 	.word	0xffff8001

080061a0 <R3_1_RLTurnOnLowSides>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80061a0:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 80061a4:	684a      	ldr	r2, [r1, #4]
{
 80061a6:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80061a8:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80061ac:	2400      	movs	r4, #0
 80061ae:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80061b0:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80061b2:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80061b4:	07db      	lsls	r3, r3, #31
 80061b6:	d5fc      	bpl.n	80061b2 <R3_1_RLTurnOnLowSides+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80061b8:	f06f 0301 	mvn.w	r3, #1
 80061bc:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80061be:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80061c0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061c4:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80061c6:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
 80061ca:	2b02      	cmp	r3, #2
 80061cc:	d109      	bne.n	80061e2 <R3_1_RLTurnOnLowSides+0x42>
  {
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80061ce:	e9d1 2006 	ldrd	r2, r0, [r1, #24]
    LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80061d2:	8f8c      	ldrh	r4, [r1, #60]	; 0x3c
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80061d4:	6a0b      	ldr	r3, [r1, #32]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80061d6:	6194      	str	r4, [r2, #24]
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80061d8:	8fcc      	ldrh	r4, [r1, #62]	; 0x3e
    LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80061da:	f8b1 2040 	ldrh.w	r2, [r1, #64]	; 0x40
  WRITE_REG(GPIOx->BRR, PinMask);
 80061de:	6284      	str	r4, [r0, #40]	; 0x28
 80061e0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  return;
}
 80061e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061e6:	4770      	bx	lr

080061e8 <R3_1_RLSwitchOnPWM>:
#endif /* __ICCARM__ */
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
#if defined (__ICCARM__)
  #pragma cstat_restore = "MISRAC2012-Rule-11.3"
#endif /* __ICCARM__ */
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80061e8:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 80061ec:	2200      	movs	r2, #0
{
 80061ee:	b4f0      	push	{r4, r5, r6, r7}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 80061f0:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80061f4:	f880 206b 	strb.w	r2, [r0, #107]	; 0x6b
  /* The folowing while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

   /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 80061f8:	681a      	ldr	r2, [r3, #0]
 80061fa:	06d6      	lsls	r6, r2, #27
 80061fc:	d4fc      	bmi.n	80061f8 <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	06d5      	lsls	r5, r2, #27
 8006202:	d5fc      	bpl.n	80061fe <R3_1_RLSwitchOnPWM+0x16>
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006204:	2201      	movs	r2, #1
 8006206:	635a      	str	r2, [r3, #52]	; 0x34
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 8006208:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 800620c:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR4, CompareValue);
 800620e:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006210:	f06f 0201 	mvn.w	r2, #1
 8006214:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006216:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006218:	07d2      	lsls	r2, r2, #31
 800621a:	d5fc      	bpl.n	8006216 <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800621c:	f06f 0201 	mvn.w	r2, #1
 8006220:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006222:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006224:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006228:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800622a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800622c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006230:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006232:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
 8006236:	2a02      	cmp	r2, #2
 8006238:	d010      	beq.n	800625c <R3_1_RLSwitchOnPWM+0x74>
    }
  }

  /* set the sector that correspond to Phase A and B sampling
   * B will be sampled by ADCx_1 */
  pHdl->Sector = SECTOR_4;
 800623a:	2203      	movs	r2, #3
 800623c:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
  MODIFY_REG(ADCx->CR,
 8006240:	68a2      	ldr	r2, [r4, #8]
 8006242:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8006246:	f022 023f 	bic.w	r2, r2, #63	; 0x3f
 800624a:	f042 0208 	orr.w	r2, r2, #8
 800624e:	60a2      	str	r2, [r4, #8]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006250:	68da      	ldr	r2, [r3, #12]
 8006252:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_EnableIT_UPDATE( TIMx );



  return;
}
 8006256:	bcf0      	pop	{r4, r5, r6, r7}
 8006258:	60da      	str	r2, [r3, #12]
 800625a:	4770      	bx	lr
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800625c:	6a1d      	ldr	r5, [r3, #32]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 800625e:	698e      	ldr	r6, [r1, #24]
 8006260:	8f8f      	ldrh	r7, [r1, #60]	; 0x3c
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 8006262:	f240 5255 	movw	r2, #1365	; 0x555
 8006266:	4215      	tst	r5, r2
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006268:	e9d1 5207 	ldrd	r5, r2, [r1, #28]
    if ( ( TIMx->CCER & TIMxCCER_MASK_CH123 ) != 0u )
 800626c:	d006      	beq.n	800627c <R3_1_RLSwitchOnPWM+0x94>
  WRITE_REG(GPIOx->BSRR, PinMask);
 800626e:	61b7      	str	r7, [r6, #24]
      LL_GPIO_SetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 8006270:	8fce      	ldrh	r6, [r1, #62]	; 0x3e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006272:	f8b1 1040 	ldrh.w	r1, [r1, #64]	; 0x40
 8006276:	61ae      	str	r6, [r5, #24]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006278:	6291      	str	r1, [r2, #40]	; 0x28
}
 800627a:	e7de      	b.n	800623a <R3_1_RLSwitchOnPWM+0x52>
  WRITE_REG(GPIOx->BRR, PinMask);
 800627c:	62b7      	str	r7, [r6, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 800627e:	8fce      	ldrh	r6, [r1, #62]	; 0x3e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006280:	f8b1 1040 	ldrh.w	r1, [r1, #64]	; 0x40
 8006284:	62ae      	str	r6, [r5, #40]	; 0x28
 8006286:	6291      	str	r1, [r2, #40]	; 0x28
}
 8006288:	e7d7      	b.n	800623a <R3_1_RLSwitchOnPWM+0x52>
 800628a:	bf00      	nop

0800628c <R3_1_Init>:
  COMP_TypeDef * COMP_OCPAx = pHandle->pParams_str->CompOCPASelection;
 800628c:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006290:	680b      	ldr	r3, [r1, #0]
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006292:	684a      	ldr	r2, [r1, #4]
{
 8006294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 8006298:	685c      	ldr	r4, [r3, #4]
  COMP_TypeDef * COMP_OCPCx = pHandle->pParams_str->CompOCPCSelection;
 800629a:	690f      	ldr	r7, [r1, #16]
  COMP_TypeDef * COMP_OVPx = pHandle->pParams_str->CompOVPSelection;
 800629c:	694d      	ldr	r5, [r1, #20]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 800629e:	f04f 0e04 	mov.w	lr, #4
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_EOC);
 80062a2:	f024 0404 	bic.w	r4, r4, #4
  COMP_TypeDef * COMP_OCPBx = pHandle->pParams_str->CompOCPBSelection;
 80062a6:	e9d1 6c02 	ldrd	r6, ip, [r1, #8]
 80062aa:	605c      	str	r4, [r3, #4]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_EOC);
 80062ac:	f8c3 e000 	str.w	lr, [r3]
  CLEAR_BIT(ADCx->IER, LL_ADC_IT_JEOC);
 80062b0:	685c      	ldr	r4, [r3, #4]
 80062b2:	f024 0420 	bic.w	r4, r4, #32
 80062b6:	605c      	str	r4, [r3, #4]
    if ( TIMx == TIM1 )
 80062b8:	4cab      	ldr	r4, [pc, #684]	; (8006568 <R3_1_Init+0x2dc>)
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOC);
 80062ba:	f04f 0e20 	mov.w	lr, #32
 80062be:	42a2      	cmp	r2, r4
{
 80062c0:	b083      	sub	sp, #12
 80062c2:	f8c3 e000 	str.w	lr, [r3]
    if ( TIMx == TIM1 )
 80062c6:	f000 808b 	beq.w	80063e0 <R3_1_Init+0x154>
    if ( COMP_OCPAx != NULL )
 80062ca:	b18e      	cbz	r6, 80062f0 <R3_1_Init+0x64>
      if ( pHandle->pParams_str->CompOCPAInvInput_MODE != EXT_MODE )
 80062cc:	f891 4053 	ldrb.w	r4, [r1, #83]	; 0x53
 80062d0:	2c01      	cmp	r4, #1
 80062d2:	d005      	beq.n	80062e0 <R3_1_Init+0x54>
  *         (2) Parameter available only on devices STM32F303x6/8, STM32F328x8, STM32F334xx.\n
  *         (3) Parameter available on all devices except STM32F301x6/8, STM32F318x8, STM32F302xx.\n
  */
__STATIC_INLINE uint32_t LL_COMP_GetInputMinus(COMP_TypeDef *COMPx)
{
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 80062d4:	6834      	ldr	r4, [r6, #0]
 80062d6:	f004 0470 	and.w	r4, r4, #112	; 0x70
        if ( LL_COMP_GetInputMinus( COMP_OCPAx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 80062da:	2c40      	cmp	r4, #64	; 0x40
 80062dc:	f000 8117 	beq.w	800650e <R3_1_Init+0x282>
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Enable(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 80062e0:	6834      	ldr	r4, [r6, #0]
 80062e2:	f044 0401 	orr.w	r4, r4, #1
 80062e6:	6034      	str	r4, [r6, #0]
  * @param  COMPx Comparator instance
  * @retval None
  */
__STATIC_INLINE void LL_COMP_Lock(COMP_TypeDef *COMPx)
{
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 80062e8:	6834      	ldr	r4, [r6, #0]
 80062ea:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 80062ee:	6034      	str	r4, [r6, #0]
    if ( COMP_OCPBx != NULL )
 80062f0:	f1bc 0f00 	cmp.w	ip, #0
 80062f4:	d00b      	beq.n	800630e <R3_1_Init+0x82>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 80062f6:	f8dc 4000 	ldr.w	r4, [ip]
 80062fa:	f044 0401 	orr.w	r4, r4, #1
 80062fe:	f8cc 4000 	str.w	r4, [ip]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006302:	f8dc 4000 	ldr.w	r4, [ip]
 8006306:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800630a:	f8cc 4000 	str.w	r4, [ip]
    if ( COMP_OCPCx != NULL )
 800630e:	b13f      	cbz	r7, 8006320 <R3_1_Init+0x94>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006310:	683c      	ldr	r4, [r7, #0]
 8006312:	f044 0401 	orr.w	r4, r4, #1
 8006316:	603c      	str	r4, [r7, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 8006318:	683c      	ldr	r4, [r7, #0]
 800631a:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 800631e:	603c      	str	r4, [r7, #0]
    if ( COMP_OVPx != NULL )
 8006320:	b18d      	cbz	r5, 8006346 <R3_1_Init+0xba>
      if ( pHandle->pParams_str->CompOVPInvInput_MODE != EXT_MODE )
 8006322:	f891 4056 	ldrb.w	r4, [r1, #86]	; 0x56
 8006326:	2c01      	cmp	r4, #1
 8006328:	d005      	beq.n	8006336 <R3_1_Init+0xaa>
  return (uint32_t)(READ_BIT(COMPx->CSR, COMP_CSR_COMPxINSEL));
 800632a:	682c      	ldr	r4, [r5, #0]
 800632c:	f004 0470 	and.w	r4, r4, #112	; 0x70
        if ( LL_COMP_GetInputMinus( COMP_OVPx ) == LL_COMP_INPUT_MINUS_DAC1_CH1 )
 8006330:	2c40      	cmp	r4, #64	; 0x40
 8006332:	f000 80c8 	beq.w	80064c6 <R3_1_Init+0x23a>
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxEN);
 8006336:	682c      	ldr	r4, [r5, #0]
 8006338:	f044 0401 	orr.w	r4, r4, #1
 800633c:	602c      	str	r4, [r5, #0]
  SET_BIT(COMPx->CSR, COMP_CSR_COMPxLOCK);
 800633e:	682c      	ldr	r4, [r5, #0]
 8006340:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8006344:	602c      	str	r4, [r5, #0]
  return (READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN));
 8006346:	689c      	ldr	r4, [r3, #8]
    if (LL_ADC_IsEnabled (ADCx) == 0)
 8006348:	07e6      	lsls	r6, r4, #31
 800634a:	d562      	bpl.n	8006412 <R3_1_Init+0x186>
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800634c:	6813      	ldr	r3, [r2, #0]
 800634e:	f023 0301 	bic.w	r3, r3, #1
 8006352:	6013      	str	r3, [r2, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8006354:	6853      	ldr	r3, [r2, #4]
 8006356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800635a:	6053      	str	r3, [r2, #4]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800635c:	6993      	ldr	r3, [r2, #24]
 800635e:	f043 0308 	orr.w	r3, r3, #8
 8006362:	6193      	str	r3, [r2, #24]
 8006364:	6993      	ldr	r3, [r2, #24]
 8006366:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800636a:	6193      	str	r3, [r2, #24]
 800636c:	69d3      	ldr	r3, [r2, #28]
 800636e:	f043 0308 	orr.w	r3, r3, #8
 8006372:	61d3      	str	r3, [r2, #28]
 8006374:	69d3      	ldr	r3, [r2, #28]
 8006376:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800637a:	61d3      	str	r3, [r2, #28]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800637c:	6953      	ldr	r3, [r2, #20]
 800637e:	f043 0301 	orr.w	r3, r3, #1
 8006382:	6153      	str	r3, [r2, #20]
  if ( pHandle->pParams_str->FreqRatio == 2u )
 8006384:	f891 3057 	ldrb.w	r3, [r1, #87]	; 0x57
 8006388:	2b02      	cmp	r3, #2
 800638a:	d032      	beq.n	80063f2 <R3_1_Init+0x166>
    if ( pHandle->_Super.Motor == M1 )
 800638c:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8006390:	b933      	cbnz	r3, 80063a0 <R3_1_Init+0x114>
      if ( pHandle->pParams_str->RepetitionCounter == 1u )
 8006392:	f891 3051 	ldrb.w	r3, [r1, #81]	; 0x51
 8006396:	2b01      	cmp	r3, #1
 8006398:	d02f      	beq.n	80063fa <R3_1_Init+0x16e>
      else if ( pHandle->pParams_str->RepetitionCounter == 3u )
 800639a:	2b03      	cmp	r3, #3
 800639c:	f000 80f2 	beq.w	8006584 <R3_1_Init+0x2f8>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80063a0:	f06f 0380 	mvn.w	r3, #128	; 0x80
 80063a4:	6113      	str	r3, [r2, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 80063a6:	f891 3052 	ldrb.w	r3, [r1, #82]	; 0x52
 80063aa:	b163      	cbz	r3, 80063c6 <R3_1_Init+0x13a>
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80063ac:	6913      	ldr	r3, [r2, #16]
 80063ae:	05d8      	lsls	r0, r3, #23
 80063b0:	d509      	bpl.n	80063c6 <R3_1_Init+0x13a>
 80063b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  WRITE_REG(TIMx->SR, ~(TIM_SR_B2IF));
 80063b6:	f46f 7080 	mvn.w	r0, #256	; 0x100
 80063ba:	6110      	str	r0, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_B2IF) == (TIM_SR_B2IF)) ? 1UL : 0UL);
 80063bc:	6911      	ldr	r1, [r2, #16]
 80063be:	05c9      	lsls	r1, r1, #23
 80063c0:	d501      	bpl.n	80063c6 <R3_1_Init+0x13a>
    while ((LL_TIM_IsActiveFlag_BRK2 (TIMx) == 1u) && (Brk2Timeout != 0u) )
 80063c2:	3b01      	subs	r3, #1
 80063c4:	d1f9      	bne.n	80063ba <R3_1_Init+0x12e>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80063c6:	68d3      	ldr	r3, [r2, #12]
 80063c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063cc:	60d3      	str	r3, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 80063ce:	6a13      	ldr	r3, [r2, #32]
 80063d0:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
 80063d4:	f043 0305 	orr.w	r3, r3, #5
 80063d8:	6213      	str	r3, [r2, #32]
}
 80063da:	b003      	add	sp, #12
 80063dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 80063e0:	f8df e198 	ldr.w	lr, [pc, #408]	; 800657c <R3_1_Init+0x2f0>
 80063e4:	f8de 400c 	ldr.w	r4, [lr, #12]
 80063e8:	f044 0401 	orr.w	r4, r4, #1
 80063ec:	f8ce 400c 	str.w	r4, [lr, #12]
}
 80063f0:	e76b      	b.n	80062ca <R3_1_Init+0x3e>
    if ( pHandle->pParams_str->IsHigherFreqTim == HIGHER_FREQ )
 80063f2:	f891 3058 	ldrb.w	r3, [r1, #88]	; 0x58
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	d05a      	beq.n	80064b0 <R3_1_Init+0x224>
        LL_TIM_SetCounter( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u );
 80063fa:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
 80063fe:	3b01      	subs	r3, #1
  WRITE_REG(TIMx->CNT, Counter);
 8006400:	6253      	str	r3, [r2, #36]	; 0x24
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8006402:	f06f 0380 	mvn.w	r3, #128	; 0x80
 8006406:	6113      	str	r3, [r2, #16]
  if ( ( pHandle->pParams_str->BKIN2Mode ) != NONE )
 8006408:	f891 3052 	ldrb.w	r3, [r1, #82]	; 0x52
 800640c:	2b00      	cmp	r3, #0
 800640e:	d0da      	beq.n	80063c6 <R3_1_Init+0x13a>
 8006410:	e7cc      	b.n	80063ac <R3_1_Init+0x120>
  return (READ_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0)) == (ADC_CR_ADVREGEN_0));
 8006412:	689c      	ldr	r4, [r3, #8]
 8006414:	f004 5440 	and.w	r4, r4, #805306368	; 0x30000000
  if ( LL_ADC_IsInternalRegulatorEnabled(ADCx) == 0u)
 8006418:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
 800641c:	d01b      	beq.n	8006456 <R3_1_Init+0x1ca>
  CLEAR_BIT(ADCx->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800641e:	689c      	ldr	r4, [r3, #8]
    volatile uint32_t wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));      
 8006420:	4d52      	ldr	r5, [pc, #328]	; (800656c <R3_1_Init+0x2e0>)
 8006422:	f024 5440 	bic.w	r4, r4, #805306368	; 0x30000000
 8006426:	609c      	str	r4, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8006428:	689c      	ldr	r4, [r3, #8]
 800642a:	f024 4410 	bic.w	r4, r4, #2415919104	; 0x90000000
 800642e:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8006432:	f044 5480 	orr.w	r4, r4, #268435456	; 0x10000000
 8006436:	609c      	str	r4, [r3, #8]
 8006438:	4c4d      	ldr	r4, [pc, #308]	; (8006570 <R3_1_Init+0x2e4>)
 800643a:	6824      	ldr	r4, [r4, #0]
 800643c:	09a4      	lsrs	r4, r4, #6
 800643e:	fba5 5404 	umull	r5, r4, r5, r4
 8006442:	09a4      	lsrs	r4, r4, #6
 8006444:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 8006446:	9c01      	ldr	r4, [sp, #4]
 8006448:	b12c      	cbz	r4, 8006456 <R3_1_Init+0x1ca>
      wait_loop_index--;
 800644a:	9c01      	ldr	r4, [sp, #4]
 800644c:	3c01      	subs	r4, #1
 800644e:	9401      	str	r4, [sp, #4]
    while(wait_loop_index != 0UL)
 8006450:	9c01      	ldr	r4, [sp, #4]
 8006452:	2c00      	cmp	r4, #0
 8006454:	d1f9      	bne.n	800644a <R3_1_Init+0x1be>
  MODIFY_REG(ADCx->CR,
 8006456:	689c      	ldr	r4, [r3, #8]
 8006458:	f024 4440 	bic.w	r4, r4, #3221225472	; 0xc0000000
 800645c:	f024 043f 	bic.w	r4, r4, #63	; 0x3f
 8006460:	f044 4400 	orr.w	r4, r4, #2147483648	; 0x80000000
 8006464:	609c      	str	r4, [r3, #8]
  return (READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL));
 8006466:	689c      	ldr	r4, [r3, #8]
  while ( LL_ADC_IsCalibrationOnGoing( ADCx) == 1u) 
 8006468:	2c00      	cmp	r4, #0
 800646a:	dbfc      	blt.n	8006466 <R3_1_Init+0x1da>
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800646c:	681c      	ldr	r4, [r3, #0]
  while (  LL_ADC_IsActiveFlag_ADRDY( ADCx ) == 0u)  
 800646e:	07e5      	lsls	r5, r4, #31
 8006470:	d408      	bmi.n	8006484 <R3_1_Init+0x1f8>
  MODIFY_REG(ADCx->CR,
 8006472:	4d40      	ldr	r5, [pc, #256]	; (8006574 <R3_1_Init+0x2e8>)
 8006474:	689c      	ldr	r4, [r3, #8]
 8006476:	402c      	ands	r4, r5
 8006478:	f044 0401 	orr.w	r4, r4, #1
 800647c:	609c      	str	r4, [r3, #8]
  return (READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY));
 800647e:	681c      	ldr	r4, [r3, #0]
 8006480:	07e4      	lsls	r4, r4, #31
 8006482:	d5f7      	bpl.n	8006474 <R3_1_Init+0x1e8>
  MODIFY_REG(ADCx->CR,
 8006484:	689d      	ldr	r5, [r3, #8]
 8006486:	4e3b      	ldr	r6, [pc, #236]	; (8006574 <R3_1_Init+0x2e8>)
 8006488:	4035      	ands	r5, r6
 800648a:	f045 0508 	orr.w	r5, r5, #8
 800648e:	609d      	str	r5, [r3, #8]
  MODIFY_REG(ADCx->CR,
 8006490:	689c      	ldr	r4, [r3, #8]
 8006492:	4034      	ands	r4, r6
 8006494:	f044 0420 	orr.w	r4, r4, #32
 8006498:	609c      	str	r4, [r3, #8]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JQM, QueueMode);
 800649a:	68dc      	ldr	r4, [r3, #12]
 800649c:	f444 1400 	orr.w	r4, r4, #2097152	; 0x200000
 80064a0:	60dc      	str	r4, [r3, #12]
  WRITE_REG(ADCx->ISR, LL_ADC_FLAG_JEOS);
 80064a2:	2440      	movs	r4, #64	; 0x40
 80064a4:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->IER, LL_ADC_IT_JEOS);
 80064a6:	685c      	ldr	r4, [r3, #4]
 80064a8:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80064ac:	605c      	str	r4, [r3, #4]
}
 80064ae:	e74d      	b.n	800634c <R3_1_Init+0xc0>
      if ( pHandle->pParams_str->RepetitionCounter == 3u )
 80064b0:	f891 4051 	ldrb.w	r4, [r1, #81]	; 0x51
 80064b4:	2c03      	cmp	r4, #3
 80064b6:	d1a0      	bne.n	80063fa <R3_1_Init+0x16e>
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80064b8:	6313      	str	r3, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80064ba:	6953      	ldr	r3, [r2, #20]
 80064bc:	f043 0301 	orr.w	r3, r3, #1
 80064c0:	6153      	str	r3, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80064c2:	6314      	str	r4, [r2, #48]	; 0x30
}
 80064c4:	e799      	b.n	80063fa <R3_1_Init+0x16e>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064c6:	f44f 0470 	mov.w	r4, #15728640	; 0xf00000
 80064ca:	fa94 f4a4 	rbit	r4, r4
  * @param  Data Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_DAC_ConvertData12LeftAligned(DAC_TypeDef *DACx, uint32_t DAC_Channel, uint32_t Data)
{
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 80064ce:	f44f 1680 	mov.w	r6, #1048576	; 0x100000
 80064d2:	fab4 f484 	clz	r4, r4
 80064d6:	40e6      	lsrs	r6, r4
 80064d8:	f8df c0a4 	ldr.w	ip, [pc, #164]	; 8006580 <R3_1_Init+0x2f4>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 80064dc:	f8b1 704e 	ldrh.w	r7, [r1, #78]	; 0x4e
  
  MODIFY_REG(*preg,
 80064e0:	f85c 4026 	ldr.w	r4, [ip, r6, lsl #2]
 80064e4:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 80064e8:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 80064ec:	433c      	orrs	r4, r7
 80064ee:	f84c 4026 	str.w	r4, [ip, r6, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 80064f2:	4c21      	ldr	r4, [pc, #132]	; (8006578 <R3_1_Init+0x2ec>)
 80064f4:	6866      	ldr	r6, [r4, #4]
 80064f6:	f046 0601 	orr.w	r6, r6, #1
 80064fa:	6066      	str	r6, [r4, #4]
  return (READ_BIT(DACx->CR,
 80064fc:	6826      	ldr	r6, [r4, #0]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 80064fe:	07f7      	lsls	r7, r6, #31
 8006500:	f53f af19 	bmi.w	8006336 <R3_1_Init+0xaa>
  SET_BIT(DACx->CR,
 8006504:	6826      	ldr	r6, [r4, #0]
 8006506:	f046 0601 	orr.w	r6, r6, #1
 800650a:	6026      	str	r6, [r4, #0]
    while(wait_loop_index != 0UL)
 800650c:	e713      	b.n	8006336 <R3_1_Init+0xaa>
 800650e:	f44f 0470 	mov.w	r4, #15728640	; 0xf00000
 8006512:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __DAC_PTR_REG_OFFSET(DACx->DHR12R1, __DAC_MASK_SHIFT(DAC_Channel, DAC_REG_DHR12LX_REGOFFSET_MASK));
 8006516:	f44f 1e80 	mov.w	lr, #1048576	; 0x100000
 800651a:	fab4 f484 	clz	r4, r4
 800651e:	fa2e fe04 	lsr.w	lr, lr, r4
 8006522:	f8df 905c 	ldr.w	r9, [pc, #92]	; 8006580 <R3_1_Init+0x2f4>
  LL_DAC_ConvertData12LeftAligned ( DAC1, DAC_Channel, hDACVref );
 8006526:	f8b1 804c 	ldrh.w	r8, [r1, #76]	; 0x4c
  MODIFY_REG(*preg,
 800652a:	f859 402e 	ldr.w	r4, [r9, lr, lsl #2]
 800652e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
 8006532:	f024 04f0 	bic.w	r4, r4, #240	; 0xf0
 8006536:	ea48 0404 	orr.w	r4, r8, r4
 800653a:	f849 402e 	str.w	r4, [r9, lr, lsl #2]
  SET_BIT(DACx->SWTRIGR,
 800653e:	4c0e      	ldr	r4, [pc, #56]	; (8006578 <R3_1_Init+0x2ec>)
 8006540:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8006544:	f04e 0e01 	orr.w	lr, lr, #1
 8006548:	f8c4 e004 	str.w	lr, [r4, #4]
  return (READ_BIT(DACx->CR,
 800654c:	f8d4 e000 	ldr.w	lr, [r4]
  if (LL_DAC_IsEnabled ( DAC1, DAC_Channel ) == 1u ) 
 8006550:	f01e 0f01 	tst.w	lr, #1
 8006554:	f47f aec4 	bne.w	80062e0 <R3_1_Init+0x54>
  SET_BIT(DACx->CR,
 8006558:	f8d4 e000 	ldr.w	lr, [r4]
 800655c:	f04e 0e01 	orr.w	lr, lr, #1
 8006560:	f8c4 e000 	str.w	lr, [r4]
    while(wait_loop_index != 0UL)
 8006564:	e6bc      	b.n	80062e0 <R3_1_Init+0x54>
 8006566:	bf00      	nop
 8006568:	40012c00 	.word	0x40012c00
 800656c:	053e2d63 	.word	0x053e2d63
 8006570:	20000478 	.word	0x20000478
 8006574:	7fffffc0 	.word	0x7fffffc0
 8006578:	40007400 	.word	0x40007400
 800657c:	e0042000 	.word	0xe0042000
 8006580:	40007408 	.word	0x40007408
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006584:	2001      	movs	r0, #1
 8006586:	6310      	str	r0, [r2, #48]	; 0x30
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006588:	6950      	ldr	r0, [r2, #20]
 800658a:	f040 0001 	orr.w	r0, r0, #1
 800658e:	6150      	str	r0, [r2, #20]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006590:	6313      	str	r3, [r2, #48]	; 0x30
}
 8006592:	e705      	b.n	80063a0 <R3_1_Init+0x114>

08006594 <R3_1_SetOffsetCalib>:
{
 8006594:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8006596:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800659a:	680b      	ldr	r3, [r1, #0]
 800659c:	6703      	str	r3, [r0, #112]	; 0x70
  pHdl->offsetCalibStatus = true;
 800659e:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 80065a0:	e9c0 421d 	strd	r4, r2, [r0, #116]	; 0x74
  pHdl->offsetCalibStatus = true;
 80065a4:	f880 306e 	strb.w	r3, [r0, #110]	; 0x6e
}
 80065a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80065ac:	4770      	bx	lr
 80065ae:	bf00      	nop

080065b0 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 80065b0:	e9d0 231d 	ldrd	r2, r3, [r0, #116]	; 0x74
 80065b4:	6f00      	ldr	r0, [r0, #112]	; 0x70
 80065b6:	608b      	str	r3, [r1, #8]
 80065b8:	e9c1 0200 	strd	r0, r2, [r1]
}
 80065bc:	4770      	bx	lr
 80065be:	bf00      	nop

080065c0 <R3_1_CurrentReadingPolarization>:
{
 80065c0:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80065c2:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  if (false == pHandle->_Super.offsetCalibStatus)
 80065c6:	f890 306e 	ldrb.w	r3, [r0, #110]	; 0x6e
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80065ca:	6854      	ldr	r4, [r2, #4]
{
 80065cc:	b084      	sub	sp, #16
 80065ce:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 80065d0:	b353      	cbz	r3, 8006628 <R3_1_CurrentReadingPolarization+0x68>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80065d2:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx, pHandle->Half_PWMPeriod);
 80065d4:	f8b5 307c 	ldrh.w	r3, [r5, #124]	; 0x7c
 80065d8:	f022 0208 	bic.w	r2, r2, #8
 80065dc:	61a2      	str	r2, [r4, #24]
 80065de:	69a2      	ldr	r2, [r4, #24]
 80065e0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80065e4:	61a2      	str	r2, [r4, #24]
 80065e6:	69e2      	ldr	r2, [r4, #28]
 80065e8:	f022 0208 	bic.w	r2, r2, #8
 80065ec:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80065ee:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80065f0:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80065f2:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80065f4:	69a3      	ldr	r3, [r4, #24]
 80065f6:	f043 0308 	orr.w	r3, r3, #8
 80065fa:	61a3      	str	r3, [r4, #24]
 80065fc:	69a3      	ldr	r3, [r4, #24]
 80065fe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006602:	61a3      	str	r3, [r4, #24]
 8006604:	69e3      	ldr	r3, [r4, #28]
 8006606:	f043 0308 	orr.w	r3, r3, #8
 800660a:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 800660c:	6a23      	ldr	r3, [r4, #32]
 800660e:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
  pHandle->_Super.Sector=SECTOR_5;
 8006612:	2104      	movs	r1, #4
  pHandle->BrakeActionLock = false;
 8006614:	2200      	movs	r2, #0
 8006616:	f043 0305 	orr.w	r3, r3, #5
 800661a:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector=SECTOR_5;
 800661c:	f885 106a 	strb.w	r1, [r5, #106]	; 0x6a
  pHandle->BrakeActionLock = false;
 8006620:	f885 2086 	strb.w	r2, [r5, #134]	; 0x86
}
 8006624:	b004      	add	sp, #16
 8006626:	bd70      	pop	{r4, r5, r6, pc}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006628:	6816      	ldr	r6, [r2, #0]
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800662a:	6802      	ldr	r2, [r0, #0]
 800662c:	9202      	str	r2, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 800662e:	6942      	ldr	r2, [r0, #20]
 8006630:	9203      	str	r2, [sp, #12]
    pHandle->PolarizationCounter = 0u;
 8006632:	f880 3082 	strb.w	r3, [r0, #130]	; 0x82
    pHandle->PhaseBOffset = 0u;
 8006636:	e9c0 331c 	strd	r3, r3, [r0, #112]	; 0x70
    pHandle->PhaseCOffset = 0u;
 800663a:	6783      	str	r3, [r0, #120]	; 0x78
  CLEAR_BIT(TIMx->CCER, Channels);
 800663c:	6a23      	ldr	r3, [r4, #32]
 800663e:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8006642:	f023 0305 	bic.w	r3, r3, #5
 8006646:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationAB;
 8006648:	4b29      	ldr	r3, [pc, #164]	; (80066f0 <R3_1_CurrentReadingPolarization+0x130>)
 800664a:	6003      	str	r3, [r0, #0]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointPolarization;
 800664c:	4b29      	ldr	r3, [pc, #164]	; (80066f4 <R3_1_CurrentReadingPolarization+0x134>)
 800664e:	6143      	str	r3, [r0, #20]
    pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_RISING;
 8006650:	2340      	movs	r3, #64	; 0x40
 8006652:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
    pHandle->PolarizationSector=SECTOR_5;
 8006656:	2304      	movs	r3, #4
 8006658:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
    pHandle->_Super.Sector = SECTOR_5;
 800665c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006660:	f7ff fcfa 	bl	8006058 <R3_1_SwitchOnPWM>
    while ( ((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_OC4REF )
 8006664:	6863      	ldr	r3, [r4, #4]
 8006666:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800666a:	2b70      	cmp	r3, #112	; 0x70
 800666c:	d1fa      	bne.n	8006664 <R3_1_CurrentReadingPolarization+0xa4>
  MODIFY_REG(ADCx->CR,
 800666e:	68b3      	ldr	r3, [r6, #8]
    waitForPolarizationEnd( TIMx,
 8006670:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 8006674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006678:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800667c:	f043 0308 	orr.w	r3, r3, #8
 8006680:	60b3      	str	r3, [r6, #8]
 8006682:	f105 0144 	add.w	r1, r5, #68	; 0x44
 8006686:	f105 0382 	add.w	r3, r5, #130	; 0x82
 800668a:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 800668e:	4620      	mov	r0, r4
 8006690:	e9cd 1300 	strd	r1, r3, [sp]
 8006694:	f7ff fb84 	bl	8005da0 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8006698:	4628      	mov	r0, r5
 800669a:	f7ff fd23 	bl	80060e4 <R3_1_SwitchOffPWM>
    pHandle->PolarizationCounter = 0u;
 800669e:	2200      	movs	r2, #0
 80066a0:	f885 2082 	strb.w	r2, [r5, #130]	; 0x82
    pHandle->PolarizationSector=SECTOR_1;
 80066a4:	f885 2083 	strb.w	r2, [r5, #131]	; 0x83
    pHandle->_Super.Sector = SECTOR_1;
 80066a8:	f885 206a 	strb.w	r2, [r5, #106]	; 0x6a
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsPolarizationC;
 80066ac:	4a12      	ldr	r2, [pc, #72]	; (80066f8 <R3_1_CurrentReadingPolarization+0x138>)
 80066ae:	602a      	str	r2, [r5, #0]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 80066b0:	4628      	mov	r0, r5
 80066b2:	f7ff fcd1 	bl	8006058 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 80066b6:	f8d5 2088 	ldr.w	r2, [r5, #136]	; 0x88
 80066ba:	9b01      	ldr	r3, [sp, #4]
 80066bc:	f892 2051 	ldrb.w	r2, [r2, #81]	; 0x51
 80066c0:	9900      	ldr	r1, [sp, #0]
 80066c2:	4620      	mov	r0, r4
 80066c4:	f7ff fb6c 	bl	8005da0 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 80066c8:	4628      	mov	r0, r5
 80066ca:	f7ff fd0b 	bl	80060e4 <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80066ce:	e9d5 121c 	ldrd	r1, r2, [r5, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80066d2:	6fab      	ldr	r3, [r5, #120]	; 0x78
    pHandle->PhaseAOffset /= NB_CONVERSIONS;
 80066d4:	0909      	lsrs	r1, r1, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80066d6:	0912      	lsrs	r2, r2, #4
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80066d8:	091b      	lsrs	r3, r3, #4
    pHandle->PhaseBOffset /= NB_CONVERSIONS;
 80066da:	e9c5 121c 	strd	r1, r2, [r5, #112]	; 0x70
    pHandle->PhaseCOffset /= NB_CONVERSIONS;
 80066de:	67ab      	str	r3, [r5, #120]	; 0x78
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80066e0:	9a02      	ldr	r2, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80066e2:	9b03      	ldr	r3, [sp, #12]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80066e4:	602a      	str	r2, [r5, #0]
    pHandle->_Super.offsetCalibStatus = true;
 80066e6:	2101      	movs	r1, #1
 80066e8:	f885 106e 	strb.w	r1, [r5, #110]	; 0x6e
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80066ec:	616b      	str	r3, [r5, #20]
 80066ee:	e770      	b.n	80065d2 <R3_1_CurrentReadingPolarization+0x12>
 80066f0:	08005f8d 	.word	0x08005f8d
 80066f4:	08005f51 	.word	0x08005f51
 80066f8:	08005fd1 	.word	0x08005fd1

080066fc <R3_1_SetADCSampPointSectX>:
{
 80066fc:	b530      	push	{r4, r5, lr}
   if ( ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) > pHandle->pParams_str->Tafter )
 80066fe:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8006702:	f8b0 e07c 	ldrh.w	lr, [r0, #124]	; 0x7c
 8006706:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 800670a:	ebae 0203 	sub.w	r2, lr, r3
 800670e:	f8b1 4042 	ldrh.w	r4, [r1, #66]	; 0x42
 8006712:	b292      	uxth	r2, r2
 8006714:	42a2      	cmp	r2, r4
 8006716:	d916      	bls.n	8006746 <R3_1_SetADCSampPointSectX+0x4a>
    pHandle->_Super.Sector = SECTOR_5;
 8006718:	2204      	movs	r2, #4
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 800671a:	f10e 33ff 	add.w	r3, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 800671e:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SamplingPoint =  pHandle->Half_PWMPeriod - (uint16_t) 1;
 8006722:	b29b      	uxth	r3, r3
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006724:	684a      	ldr	r2, [r1, #4]
  LL_TIM_OC_SetCompareCH1 ( TIMx, (uint32_t) pHandle->_Super.CntPhA );
 8006726:	8fc5      	ldrh	r5, [r0, #62]	; 0x3e
  LL_TIM_OC_SetCompareCH2 ( TIMx, (uint32_t) pHandle->_Super.CntPhB );
 8006728:	f8b0 4040 	ldrh.w	r4, [r0, #64]	; 0x40
  LL_TIM_OC_SetCompareCH3 ( TIMx, (uint32_t) pHandle->_Super.CntPhC );
 800672c:	f8b0 1042 	ldrh.w	r1, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006730:	6355      	str	r5, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006732:	6394      	str	r4, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006734:	63d1      	str	r1, [r2, #60]	; 0x3c
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006736:	6413      	str	r3, [r2, #64]	; 0x40
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006738:	6853      	ldr	r3, [r2, #4]
 800673a:	f013 0f70 	tst.w	r3, #112	; 0x70
}
 800673e:	bf14      	ite	ne
 8006740:	2001      	movne	r0, #1
 8006742:	2000      	moveq	r0, #0
 8006744:	bd30      	pop	{r4, r5, pc}
    DeltaDuty = ( uint16_t )( pHdl->lowDuty - pHdl->midDuty );
 8006746:	f8b0 c048 	ldrh.w	ip, [r0, #72]	; 0x48
 800674a:	eba3 0c0c 	sub.w	ip, r3, ip
    if ( DeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - pHdl->lowDuty ) * 2u )
 800674e:	fa1f fc8c 	uxth.w	ip, ip
 8006752:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8006756:	d904      	bls.n	8006762 <R3_1_SetADCSampPointSectX+0x66>
      SamplingPoint = pHdl->lowDuty - pHandle->pParams_str->Tbefore;
 8006758:	f8b1 2044 	ldrh.w	r2, [r1, #68]	; 0x44
 800675c:	1a9b      	subs	r3, r3, r2
 800675e:	b29b      	uxth	r3, r3
 8006760:	e7e0      	b.n	8006724 <R3_1_SetADCSampPointSectX+0x28>
      SamplingPoint = pHdl->lowDuty + pHandle->pParams_str->Tafter;
 8006762:	4423      	add	r3, r4
 8006764:	b29b      	uxth	r3, r3
      if ( SamplingPoint >= pHandle->Half_PWMPeriod )
 8006766:	459e      	cmp	lr, r3
 8006768:	d8dc      	bhi.n	8006724 <R3_1_SetADCSampPointSectX+0x28>
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800676a:	43db      	mvns	r3, r3
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 800676c:	2280      	movs	r2, #128	; 0x80
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 800676e:	eb03 034e 	add.w	r3, r3, lr, lsl #1
        pHandle->ADC_ExternalPolarityInjected = (uint16_t) LL_ADC_INJ_TRIG_EXT_FALLING;
 8006772:	f8a0 2080 	strh.w	r2, [r0, #128]	; 0x80
        SamplingPoint = ( 2u * pHandle->Half_PWMPeriod ) - SamplingPoint - (uint16_t) 1;
 8006776:	b29b      	uxth	r3, r3
 8006778:	e7d4      	b.n	8006724 <R3_1_SetADCSampPointSectX+0x28>
 800677a:	bf00      	nop

0800677c <R3_1_TIMx_UP_IRQHandler>:
{
 800677c:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800677e:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
{
 8006782:	4603      	mov	r3, r0
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | ((uint32_t) pHandle->ADC_ExternalPolarityInjected);
 8006784:	f890 006a 	ldrb.w	r0, [r0, #106]	; 0x6a
 8006788:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 800678c:	680c      	ldr	r4, [r1, #0]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | ((uint32_t) pHandle->ADC_ExternalPolarityInjected);
 800678e:	eb01 0080 	add.w	r0, r1, r0, lsl #2
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006792:	6849      	ldr	r1, [r1, #4]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector] | ((uint32_t) pHandle->ADC_ExternalPolarityInjected);
 8006794:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8006796:	4302      	orrs	r2, r0
 8006798:	64e2      	str	r2, [r4, #76]	; 0x4c
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800679a:	684a      	ldr	r2, [r1, #4]
}
 800679c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80067a0:	f04f 0c40 	mov.w	ip, #64	; 0x40
 80067a4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80067a8:	604a      	str	r2, [r1, #4]
}
 80067aa:	f103 0068 	add.w	r0, r3, #104	; 0x68
  pHandle->ADC_ExternalPolarityInjected = (uint16_t)LL_ADC_INJ_TRIG_EXT_RISING;
 80067ae:	f8a3 c080 	strh.w	ip, [r3, #128]	; 0x80
}
 80067b2:	4770      	bx	lr

080067b4 <R3_1_BRK2_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80067b4:	f890 3086 	ldrb.w	r3, [r0, #134]	; 0x86
 80067b8:	b92b      	cbnz	r3, 80067c6 <R3_1_BRK2_IRQHandler+0x12>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80067ba:	f8d0 3088 	ldr.w	r3, [r0, #136]	; 0x88
 80067be:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
 80067c2:	2a02      	cmp	r2, #2
 80067c4:	d004      	beq.n	80067d0 <R3_1_BRK2_IRQHandler+0x1c>
  pHandle->OverCurrentFlag = true;
 80067c6:	2301      	movs	r3, #1
 80067c8:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
}
 80067cc:	3068      	adds	r0, #104	; 0x68
 80067ce:	4770      	bx	lr
{
 80067d0:	b430      	push	{r4, r5}
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80067d2:	e9d3 4106 	ldrd	r4, r1, [r3, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80067d6:	8f9d      	ldrh	r5, [r3, #60]	; 0x3c
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80067d8:	6a1a      	ldr	r2, [r3, #32]
  WRITE_REG(GPIOx->BRR, PinMask);
 80067da:	62a5      	str	r5, [r4, #40]	; 0x28
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin );
 80067dc:	8fdc      	ldrh	r4, [r3, #62]	; 0x3e
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80067de:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80067e2:	628c      	str	r4, [r1, #40]	; 0x28
 80067e4:	6293      	str	r3, [r2, #40]	; 0x28
  pHandle->OverCurrentFlag = true;
 80067e6:	2301      	movs	r3, #1
 80067e8:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
}
 80067ec:	bc30      	pop	{r4, r5}
 80067ee:	3068      	adds	r0, #104	; 0x68
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop

080067f4 <R3_1_BRK_IRQHandler>:
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80067f4:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80067f8:	6851      	ldr	r1, [r2, #4]
 80067fa:	6c4a      	ldr	r2, [r1, #68]	; 0x44
{
 80067fc:	4603      	mov	r3, r0
  pHandle->OverVoltageFlag = true;
 80067fe:	f240 1c01 	movw	ip, #257	; 0x101
  pHandle->pParams_str->TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8006802:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006806:	644a      	str	r2, [r1, #68]	; 0x44
}
 8006808:	3068      	adds	r0, #104	; 0x68
  pHandle->OverVoltageFlag = true;
 800680a:	f8a3 c085 	strh.w	ip, [r3, #133]	; 0x85
}
 800680e:	4770      	bx	lr

08006810 <R3_1_IsOverCurrentOccurred>:
  if ( pHandle->OverVoltageFlag == true )
 8006810:	f890 3085 	ldrb.w	r3, [r0, #133]	; 0x85
 8006814:	b16b      	cbz	r3, 8006832 <R3_1_IsOverCurrentOccurred+0x22>
    pHandle->OverVoltageFlag = false;
 8006816:	2300      	movs	r3, #0
 8006818:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
 800681c:	2142      	movs	r1, #66	; 0x42
    retVal = MC_OVER_VOLT;
 800681e:	2302      	movs	r3, #2
  if ( pHandle->OverCurrentFlag == true )
 8006820:	f890 2084 	ldrb.w	r2, [r0, #132]	; 0x84
 8006824:	b11a      	cbz	r2, 800682e <R3_1_IsOverCurrentOccurred+0x1e>
    pHandle->OverCurrentFlag = false;
 8006826:	2300      	movs	r3, #0
 8006828:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
    retVal |= MC_BREAK_IN;
 800682c:	460b      	mov	r3, r1
}
 800682e:	4618      	mov	r0, r3
 8006830:	4770      	bx	lr
 8006832:	2140      	movs	r1, #64	; 0x40
 8006834:	e7f4      	b.n	8006820 <R3_1_IsOverCurrentOccurred+0x10>
 8006836:	bf00      	nop

08006838 <R3_1_RLDetectionModeEnable>:
  if ( pHandle->_Super.RLDetectionMode == false )
 8006838:	f890 106d 	ldrb.w	r1, [r0, #109]	; 0x6d
{
 800683c:	b430      	push	{r4, r5}
  if ( pHandle->_Super.RLDetectionMode == false )
 800683e:	2900      	cmp	r1, #0
 8006840:	d13b      	bne.n	80068ba <R3_1_RLDetectionModeEnable+0x82>
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006842:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 8006846:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006848:	699a      	ldr	r2, [r3, #24]
 800684a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800684e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006852:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006856:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006858:	6a1a      	ldr	r2, [r3, #32]
 800685a:	f042 0201 	orr.w	r2, r2, #1
 800685e:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006860:	6a1a      	ldr	r2, [r3, #32]
 8006862:	f022 0204 	bic.w	r2, r2, #4
 8006866:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006868:	6359      	str	r1, [r3, #52]	; 0x34
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 800686a:	f895 2050 	ldrb.w	r2, [r5, #80]	; 0x50
 800686e:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006870:	f103 0418 	add.w	r4, r3, #24
 8006874:	d02e      	beq.n	80068d4 <R3_1_RLDetectionModeEnable+0x9c>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006876:	2a02      	cmp	r2, #2
 8006878:	d10f      	bne.n	800689a <R3_1_RLDetectionModeEnable+0x62>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800687a:	699a      	ldr	r2, [r3, #24]
 800687c:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8006880:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006888:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800688a:	6a1a      	ldr	r2, [r3, #32]
 800688c:	f042 0210 	orr.w	r2, r2, #16
 8006890:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006898:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800689a:	6862      	ldr	r2, [r4, #4]
 800689c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80068a0:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80068a4:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80068a8:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80068aa:	6a1a      	ldr	r2, [r3, #32]
 80068ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068b0:	621a      	str	r2, [r3, #32]
 80068b2:	6a1a      	ldr	r2, [r3, #32]
 80068b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80068b8:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 80068ba:	4b0f      	ldr	r3, [pc, #60]	; (80068f8 <R3_1_RLDetectionModeEnable+0xc0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 80068bc:	490f      	ldr	r1, [pc, #60]	; (80068fc <R3_1_RLDetectionModeEnable+0xc4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80068be:	4a10      	ldr	r2, [pc, #64]	; (8006900 <R3_1_RLDetectionModeEnable+0xc8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 80068c0:	4c10      	ldr	r4, [pc, #64]	; (8006904 <R3_1_RLDetectionModeEnable+0xcc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 80068c2:	6103      	str	r3, [r0, #16]
  pHandle->_Super.RLDetectionMode = true;
 80068c4:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 80068c6:	6004      	str	r4, [r0, #0]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 80068c8:	e9c0 2101 	strd	r2, r1, [r0, #4]
}
 80068cc:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 80068ce:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 80068d2:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80068d4:	699a      	ldr	r2, [r3, #24]
 80068d6:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 80068da:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 80068de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80068e2:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 80068e4:	6a1a      	ldr	r2, [r3, #32]
 80068e6:	f022 0210 	bic.w	r2, r2, #16
 80068ea:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80068ec:	6a1a      	ldr	r2, [r3, #32]
 80068ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80068f2:	621a      	str	r2, [r3, #32]
}
 80068f4:	e7d1      	b.n	800689a <R3_1_RLDetectionModeEnable+0x62>
 80068f6:	bf00      	nop
 80068f8:	080061a1 	.word	0x080061a1
 80068fc:	080061e9 	.word	0x080061e9
 8006900:	080060e5 	.word	0x080060e5
 8006904:	08006151 	.word	0x08006151

08006908 <R3_1_RLDetectionModeDisable>:
  if ( pHandle->_Super.RLDetectionMode == true )
 8006908:	f890 306d 	ldrb.w	r3, [r0, #109]	; 0x6d
 800690c:	2b00      	cmp	r3, #0
 800690e:	d046      	beq.n	800699e <R3_1_RLDetectionModeDisable+0x96>
{
 8006910:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006912:	f8d0 1088 	ldr.w	r1, [r0, #136]	; 0x88
 8006916:	684b      	ldr	r3, [r1, #4]
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_UP )
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	06d4      	lsls	r4, r2, #27
 800691c:	d5fc      	bpl.n	8006918 <R3_1_RLDetectionModeDisable+0x10>
    while ( ( TIMx->CR1 & TIM_CR1_DIR_Msk ) == LL_TIM_COUNTERMODE_DOWN )
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	06d2      	lsls	r2, r2, #27
 8006922:	d4fc      	bmi.n	800691e <R3_1_RLDetectionModeDisable+0x16>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006924:	699a      	ldr	r2, [r3, #24]
 8006926:	4d45      	ldr	r5, [pc, #276]	; (8006a3c <R3_1_RLDetectionModeDisable+0x134>)
 8006928:	402a      	ands	r2, r5
 800692a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800692e:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006930:	6a1a      	ldr	r2, [r3, #32]
 8006932:	f042 0201 	orr.w	r2, r2, #1
 8006936:	621a      	str	r2, [r3, #32]
    if ( ( pHandle->pParams_str->LowSideOutputs ) == LS_PWM_TIMER )
 8006938:	f891 2050 	ldrb.w	r2, [r1, #80]	; 0x50
 800693c:	2a01      	cmp	r2, #1
 800693e:	d02f      	beq.n	80069a0 <R3_1_RLDetectionModeDisable+0x98>
    else if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006940:	2a02      	cmp	r2, #2
 8006942:	d054      	beq.n	80069ee <R3_1_RLDetectionModeDisable+0xe6>
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 8006944:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 8006948:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 800694a:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800694c:	699c      	ldr	r4, [r3, #24]
 800694e:	f024 7c80 	bic.w	ip, r4, #16777216	; 0x1000000
 8006952:	f42c 4ce6 	bic.w	ip, ip, #29440	; 0x7300
 8006956:	f44c 44c0 	orr.w	r4, ip, #24576	; 0x6000
 800695a:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800695c:	6a1c      	ldr	r4, [r3, #32]
 800695e:	f044 0410 	orr.w	r4, r4, #16
 8006962:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006964:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006966:	69dc      	ldr	r4, [r3, #28]
 8006968:	4025      	ands	r5, r4
 800696a:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 800696e:	61dd      	str	r5, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006970:	6a1c      	ldr	r4, [r3, #32]
 8006972:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006976:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont( pHandle->pParams_str->ADCx,
 8006978:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800697a:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_JDISCEN, SeqDiscont);
 800697c:	68cb      	ldr	r3, [r1, #12]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800697e:	4a30      	ldr	r2, [pc, #192]	; (8006a40 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006980:	4c30      	ldr	r4, [pc, #192]	; (8006a44 <R3_1_RLDetectionModeDisable+0x13c>)
 8006982:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006986:	60cb      	str	r3, [r1, #12]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8006988:	492f      	ldr	r1, [pc, #188]	; (8006a48 <R3_1_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800698a:	6002      	str	r2, [r0, #0]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800698c:	4a2f      	ldr	r2, [pc, #188]	; (8006a4c <R3_1_RLDetectionModeDisable+0x144>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800698e:	6104      	str	r4, [r0, #16]
    pHandle->_Super.RLDetectionMode = false;
 8006990:	2300      	movs	r3, #0
}
 8006992:	bc30      	pop	{r4, r5}
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006994:	e9c0 2101 	strd	r2, r1, [r0, #4]
    pHandle->_Super.RLDetectionMode = false;
 8006998:	f880 306d 	strb.w	r3, [r0, #109]	; 0x6d
}
 800699c:	4770      	bx	lr
 800699e:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 80069a0:	6a1a      	ldr	r2, [r3, #32]
 80069a2:	f042 0204 	orr.w	r2, r2, #4
 80069a6:	621a      	str	r2, [r3, #32]
    LL_TIM_OC_SetCompareCH1( TIMx, ( uint32_t )( pHandle->Half_PWMPeriod ) >> 1 );
 80069a8:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 80069ac:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80069ae:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80069b0:	699c      	ldr	r4, [r3, #24]
 80069b2:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 80069b6:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80069ba:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 80069be:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80069c0:	6a1c      	ldr	r4, [r3, #32]
 80069c2:	f044 0410 	orr.w	r4, r4, #16
 80069c6:	621c      	str	r4, [r3, #32]
 80069c8:	6a1c      	ldr	r4, [r3, #32]
 80069ca:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80069ce:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80069d0:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80069d2:	69dc      	ldr	r4, [r3, #28]
 80069d4:	4025      	ands	r5, r4
 80069d6:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 80069da:	61dd      	str	r5, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80069dc:	6a1c      	ldr	r4, [r3, #32]
 80069de:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80069e2:	621c      	str	r4, [r3, #32]
 80069e4:	6a1c      	ldr	r4, [r3, #32]
 80069e6:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80069ea:	621c      	str	r4, [r3, #32]
}
 80069ec:	e7c4      	b.n	8006978 <R3_1_RLDetectionModeDisable+0x70>
  CLEAR_BIT(TIMx->CCER, Channels);
 80069ee:	6a1a      	ldr	r2, [r3, #32]
 80069f0:	f022 0204 	bic.w	r2, r2, #4
 80069f4:	621a      	str	r2, [r3, #32]
 80069f6:	f8b0 207c 	ldrh.w	r2, [r0, #124]	; 0x7c
 80069fa:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80069fc:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80069fe:	699c      	ldr	r4, [r3, #24]
 8006a00:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8006a04:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8006a08:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006a0c:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006a0e:	6a1c      	ldr	r4, [r3, #32]
 8006a10:	f044 0410 	orr.w	r4, r4, #16
 8006a14:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a16:	6a1c      	ldr	r4, [r3, #32]
 8006a18:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8006a1c:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006a1e:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006a20:	69dc      	ldr	r4, [r3, #28]
 8006a22:	4025      	ands	r5, r4
 8006a24:	f045 0560 	orr.w	r5, r5, #96	; 0x60
 8006a28:	61dd      	str	r5, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006a2a:	6a1c      	ldr	r4, [r3, #32]
 8006a2c:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006a30:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006a32:	6a1c      	ldr	r4, [r3, #32]
 8006a34:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8006a38:	621c      	str	r4, [r3, #32]
}
 8006a3a:	e79d      	b.n	8006978 <R3_1_RLDetectionModeDisable+0x70>
 8006a3c:	fffeff8c 	.word	0xfffeff8c
 8006a40:	08005ddd 	.word	0x08005ddd
 8006a44:	0800600d 	.word	0x0800600d
 8006a48:	08006059 	.word	0x08006059
 8006a4c:	080060e5 	.word	0x080060e5

08006a50 <R3_1_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006a50:	f8b0 307c 	ldrh.w	r3, [r0, #124]	; 0x7c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006a54:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006a58:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006a5c:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8006a5e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006a62:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8006a64:	f04f 0c03 	mov.w	ip, #3
 8006a68:	f880 c06a 	strb.w	ip, [r0, #106]	; 0x6a
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8006a6c:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if ( pHandle->_Super.SWerror == 1u )
 8006a6e:	2b01      	cmp	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006a70:	6351      	str	r1, [r2, #52]	; 0x34
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006a72:	6852      	ldr	r2, [r2, #4]
  if ( pHandle->_Super.SWerror == 1u )
 8006a74:	d006      	beq.n	8006a84 <R3_1_RLDetectionModeSetDuty+0x34>
  if (((TIMx->CR2) & TIM_CR2_MMS_Msk) != LL_TIM_TRGO_RESET )
 8006a76:	f012 0f70 	tst.w	r2, #112	; 0x70
    hAux = MC_DURATION;
 8006a7a:	bf14      	ite	ne
 8006a7c:	2301      	movne	r3, #1
 8006a7e:	2300      	moveq	r3, #0
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	4770      	bx	lr
    pHandle->_Super.SWerror = 0u;
 8006a84:	2200      	movs	r2, #0
 8006a86:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	4770      	bx	lr
 8006a8e:	bf00      	nop

08006a90 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006a90:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8006a94:	8c02      	ldrh	r2, [r0, #32]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006a96:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006a98:	4494      	add	ip, r2
{
 8006a9a:	b410      	push	{r4}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006a9c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006aa0:	b14b      	cbz	r3, 8006ab6 <RVBS_Clear+0x26>
    {
      pHandle->aBuffer[index] = aux;
 8006aa2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006aa8:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8006aaa:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006aae:	8b01      	ldrh	r1, [r0, #24]
 8006ab0:	b29a      	uxth	r2, r3
 8006ab2:	4291      	cmp	r1, r2
 8006ab4:	d8f7      	bhi.n	8006aa6 <RVBS_Clear+0x16>
    }
    pHandle->_Super.LatestConv = aux;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	f36c 030f 	bfi	r3, ip, #0, #16
 8006abc:	f36c 431f 	bfi	r3, ip, #16, #16
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8006ac0:	2200      	movs	r2, #0
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 8006ac2:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.LatestConv = aux;
 8006ac6:	6043      	str	r3, [r0, #4]
    pHandle->index = 0U;
 8006ac8:	f880 2029 	strb.w	r2, [r0, #41]	; 0x29
}
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop

08006ad0 <RVBS_Init>:
{
 8006ad0:	b510      	push	{r4, lr}
 8006ad2:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006ad4:	300c      	adds	r0, #12
 8006ad6:	f7fb fbe3 	bl	80022a0 <RCM_RegisterRegConv>
 8006ada:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
    RVBS_Clear(pHandle);
 8006ade:	4620      	mov	r0, r4
 8006ae0:	f7ff ffd6 	bl	8006a90 <RVBS_Clear>
}
 8006ae4:	bd10      	pop	{r4, pc}
 8006ae6:	bf00      	nop

08006ae8 <RVBS_CheckFaultState>:
  }
  else
  {
#endif
	/* If both thresholds are equal, single threshold feature is used */
	if (pHandle->OverVoltageThreshold == pHandle->OverVoltageThresholdLow)
 8006ae8:	8b42      	ldrh	r2, [r0, #26]
 8006aea:	8b81      	ldrh	r1, [r0, #28]
 8006aec:	428a      	cmp	r2, r1
 8006aee:	d00e      	beq.n	8006b0e <RVBS_CheckFaultState+0x26>
      }
	}
    else
    {
      /* If both thresholds are different, hysteresis feature is used (Brake mode) */
      if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006af0:	f8b0 c006 	ldrh.w	ip, [r0, #6]
 8006af4:	8c03      	ldrh	r3, [r0, #32]
 8006af6:	4563      	cmp	r3, ip
 8006af8:	d807      	bhi.n	8006b0a <RVBS_CheckFaultState+0x22>
      {
        fault = MC_UNDER_VOLT;
      }
      else if ( false == pHandle->OverVoltageHysteresisUpDir )
 8006afa:	7f83      	ldrb	r3, [r0, #30]
 8006afc:	b983      	cbnz	r3, 8006b20 <RVBS_CheckFaultState+0x38>
      {
        if (pHandle->_Super.AvBusVoltage_d < pHandle->OverVoltageThresholdLow)
 8006afe:	4561      	cmp	r1, ip
 8006b00:	d912      	bls.n	8006b28 <RVBS_CheckFaultState+0x40>
        {
          pHandle->OverVoltageHysteresisUpDir = true;
 8006b02:	2201      	movs	r2, #1
 8006b04:	7782      	strb	r2, [r0, #30]
          fault = MC_NO_ERROR;
 8006b06:	4618      	mov	r0, r3
 8006b08:	4770      	bx	lr
        fault = MC_UNDER_VOLT;
 8006b0a:	2004      	movs	r0, #4
 8006b0c:	4770      	bx	lr
      if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006b0e:	88c3      	ldrh	r3, [r0, #6]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d309      	bcc.n	8006b28 <RVBS_CheckFaultState+0x40>
      else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006b14:	8c00      	ldrh	r0, [r0, #32]
        fault = MC_UNDER_VOLT;
 8006b16:	4298      	cmp	r0, r3
 8006b18:	bf8c      	ite	hi
 8006b1a:	2004      	movhi	r0, #4
 8006b1c:	2000      	movls	r0, #0
 8006b1e:	4770      	bx	lr
          fault = MC_OVER_VOLT;
        }
      }
      else
      {
        if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006b20:	4562      	cmp	r2, ip
 8006b22:	d303      	bcc.n	8006b2c <RVBS_CheckFaultState+0x44>
        fault = MC_NO_ERROR;
 8006b24:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8006b26:	4770      	bx	lr
        fault = MC_OVER_VOLT;
 8006b28:	2002      	movs	r0, #2
 8006b2a:	4770      	bx	lr
          pHandle->OverVoltageHysteresisUpDir = false;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	7783      	strb	r3, [r0, #30]
          fault = MC_OVER_VOLT;
 8006b30:	2002      	movs	r0, #2
 8006b32:	4770      	bx	lr

08006b34 <RVBS_CalcAvVbusFilt>:
  for (vindex = 0U; vindex < pHandle->LowPassFilterBW; vindex++)
 8006b34:	8b02      	ldrh	r2, [r0, #24]
{
 8006b36:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b3a:	4604      	mov	r4, r0
  for (vindex = 0U; vindex < pHandle->LowPassFilterBW; vindex++)
 8006b3c:	b35a      	cbz	r2, 8006b96 <RVBS_CalcAvVbusFilt+0x62>
  uint32_t tot = 0U;
 8006b3e:	2700      	movs	r7, #0
  uint16_t max = 0U;
 8006b40:	46b9      	mov	r9, r7
  uint16_t min = 0U;
 8006b42:	46b8      	mov	r8, r7
  for (vindex = 0U; vindex < pHandle->LowPassFilterBW; vindex++)
 8006b44:	463e      	mov	r6, r7
    while (0xFFFFU == hAux)
 8006b46:	f64f 75ff 	movw	r5, #65535	; 0xffff
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006b4a:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
 8006b4e:	f7fb fc99 	bl	8002484 <RCM_ExecRegularConv>
    while (0xFFFFU == hAux)
 8006b52:	42a8      	cmp	r0, r5
 8006b54:	d0f9      	beq.n	8006b4a <RVBS_CalcAvVbusFilt+0x16>
    if (0U == vindex)
 8006b56:	2e00      	cmp	r6, #0
 8006b58:	d03e      	beq.n	8006bd8 <RVBS_CalcAvVbusFilt+0xa4>
      if (hAux < min)
 8006b5a:	4580      	cmp	r8, r0
  for (vindex = 0U; vindex < pHandle->LowPassFilterBW; vindex++)
 8006b5c:	f106 0601 	add.w	r6, r6, #1
 8006b60:	8b23      	ldrh	r3, [r4, #24]
 8006b62:	bf28      	it	cs
 8006b64:	4680      	movcs	r8, r0
 8006b66:	b2f2      	uxtb	r2, r6
 8006b68:	4581      	cmp	r9, r0
 8006b6a:	bf38      	it	cc
 8006b6c:	4681      	movcc	r9, r0
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	fa1f f888 	uxth.w	r8, r8
      if (hAux > max)
 8006b74:	fa1f f989 	uxth.w	r9, r9
    tot += hAux;
 8006b78:	4407      	add	r7, r0
  for (vindex = 0U; vindex < pHandle->LowPassFilterBW; vindex++)
 8006b7a:	4616      	mov	r6, r2
 8006b7c:	d8e5      	bhi.n	8006b4a <RVBS_CalcAvVbusFilt+0x16>
  tot -= min;
 8006b7e:	eb09 0208 	add.w	r2, r9, r8
  tempValue = (uint16_t)(tot / (uint16_t)(pHandle->LowPassFilterBW - 2U));
 8006b82:	3b02      	subs	r3, #2
  tot -= min;
 8006b84:	1aba      	subs	r2, r7, r2
  tempValue = (uint16_t)(tot / (uint16_t)(pHandle->LowPassFilterBW - 2U));
 8006b86:	b29b      	uxth	r3, r3
    if (0xFFFFU == hAux)
 8006b88:	f64f 71ff 	movw	r1, #65535	; 0xffff
  tempValue = (uint16_t)(tot / (uint16_t)(pHandle->LowPassFilterBW - 2U));
 8006b8c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006b90:	b292      	uxth	r2, r2
    if (0xFFFFU == hAux)
 8006b92:	428a      	cmp	r2, r1
 8006b94:	d01a      	beq.n	8006bcc <RVBS_CalcAvVbusFilt+0x98>
      pHandle->aBuffer[pHandle->index] = hAux;
 8006b96:	6a67      	ldr	r7, [r4, #36]	; 0x24
 8006b98:	f894 c029 	ldrb.w	ip, [r4, #41]	; 0x29
 8006b9c:	f827 201c 	strh.w	r2, [r7, ip, lsl #1]
      for (i = 0U; i < pHandle->LowPassFilterBW; i++)
 8006ba0:	8b26      	ldrh	r6, [r4, #24]
 8006ba2:	b30e      	cbz	r6, 8006be8 <RVBS_CalcAvVbusFilt+0xb4>
 8006ba4:	2300      	movs	r3, #0
      wtemp = 0u;
 8006ba6:	4619      	mov	r1, r3
        wtemp += pHandle->aBuffer[i];
 8006ba8:	f837 5013 	ldrh.w	r5, [r7, r3, lsl #1]
      for (i = 0U; i < pHandle->LowPassFilterBW; i++)
 8006bac:	3301      	adds	r3, #1
 8006bae:	b2d8      	uxtb	r0, r3
 8006bb0:	42b0      	cmp	r0, r6
        wtemp += pHandle->aBuffer[i];
 8006bb2:	4429      	add	r1, r5
      for (i = 0U; i < pHandle->LowPassFilterBW; i++)
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	d3f7      	bcc.n	8006ba8 <RVBS_CalcAvVbusFilt+0x74>
      wtemp /= pHandle->LowPassFilterBW;
 8006bb8:	fbb1 f1f6 	udiv	r1, r1, r6
      if (pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8006bbc:	1e73      	subs	r3, r6, #1
 8006bbe:	459c      	cmp	ip, r3
      pHandle->_Super.LatestConv = hAux;
 8006bc0:	80a2      	strh	r2, [r4, #4]
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006bc2:	80e1      	strh	r1, [r4, #6]
      if (pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8006bc4:	d312      	bcc.n	8006bec <RVBS_CalcAvVbusFilt+0xb8>
        pHandle->index = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8006bcc:	4620      	mov	r0, r4
 8006bce:	f7ff ff8b 	bl	8006ae8 <RVBS_CheckFaultState>
 8006bd2:	8120      	strh	r0, [r4, #8]
}
 8006bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  for (vindex = 0U; vindex < pHandle->LowPassFilterBW; vindex++)
 8006bd8:	8b23      	ldrh	r3, [r4, #24]
 8006bda:	2b01      	cmp	r3, #1
    tot += hAux;
 8006bdc:	4407      	add	r7, r0
  for (vindex = 0U; vindex < pHandle->LowPassFilterBW; vindex++)
 8006bde:	4680      	mov	r8, r0
 8006be0:	4681      	mov	r9, r0
 8006be2:	d9cc      	bls.n	8006b7e <RVBS_CalcAvVbusFilt+0x4a>
 8006be4:	2601      	movs	r6, #1
 8006be6:	e7b0      	b.n	8006b4a <RVBS_CalcAvVbusFilt+0x16>
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006be8:	80e6      	strh	r6, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8006bea:	80a2      	strh	r2, [r4, #4]
        pHandle->index++;
 8006bec:	f10c 0c01 	add.w	ip, ip, #1
 8006bf0:	f884 c029 	strb.w	ip, [r4, #41]	; 0x29
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8006bf4:	4620      	mov	r0, r4
 8006bf6:	f7ff ff77 	bl	8006ae8 <RVBS_CheckFaultState>
 8006bfa:	8120      	strh	r0, [r4, #8]
}
 8006bfc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08006c00 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8006c00:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8006c02:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8006c04:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8006c08:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8006c0c:	6142      	str	r2, [r0, #20]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8006c0e:	4770      	bx	lr

08006c10 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 8006c10:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8006c14:	2901      	cmp	r1, #1
 8006c16:	d90c      	bls.n	8006c32 <REMNG_Calc+0x22>
{
 8006c18:	b410      	push	{r4}
    {
      /* Increment/decrement the reference value. */
      current_ref += pHandle->IncDecAmount;
 8006c1a:	e9d0 4204 	ldrd	r4, r2, [r0, #16]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep --;
 8006c1e:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 8006c20:	4423      	add	r3, r4
      pHandle->RampRemainingStep --;
 8006c22:	60c1      	str	r1, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    pHandle->Ext = current_ref;
 8006c24:	6083      	str	r3, [r0, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006c26:	fb93 f2f2 	sdiv	r2, r3, r2
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8006c2a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c2e:	4610      	mov	r0, r2
 8006c30:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 8006c32:	d005      	beq.n	8006c40 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006c34:	6942      	ldr	r2, [r0, #20]
    pHandle->Ext = current_ref;
 8006c36:	6083      	str	r3, [r0, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006c38:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8006c3c:	4610      	mov	r0, r2
 8006c3e:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006c40:	6842      	ldr	r2, [r0, #4]
 8006c42:	6943      	ldr	r3, [r0, #20]
      pHandle->RampRemainingStep = 0U;
 8006c44:	2100      	movs	r1, #0
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006c46:	fb02 f303 	mul.w	r3, r2, r3
      pHandle->RampRemainingStep = 0U;
 8006c4a:	60c1      	str	r1, [r0, #12]
    pHandle->Ext = current_ref;
 8006c4c:	6083      	str	r3, [r0, #8]
}
 8006c4e:	4610      	mov	r0, r2
 8006c50:	4770      	bx	lr
 8006c52:	bf00      	nop

08006c54 <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8006c54:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 8006c56:	fab0 f080 	clz	r0, r0
 8006c5a:	0940      	lsrs	r0, r0, #5
 8006c5c:	4770      	bx	lr
 8006c5e:	bf00      	nop

08006c60 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 8006c60:	2800      	cmp	r0, #0
 8006c62:	bfb8      	it	lt
 8006c64:	4240      	neglt	r0, r0
{
 8006c66:	2301      	movs	r3, #1
  {
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8006c68:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006c6c:	e002      	b.n	8006c74 <getScalingFactor+0x14>
  for (i = 1U; i < 32U; i++)
 8006c6e:	3301      	adds	r3, #1
 8006c70:	2b20      	cmp	r3, #32
 8006c72:	d007      	beq.n	8006c84 <getScalingFactor+0x24>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8006c74:	fa21 f203 	lsr.w	r2, r1, r3
    if (TargetAbs >= limit)
 8006c78:	4290      	cmp	r0, r2
 8006c7a:	d3f8      	bcc.n	8006c6e <getScalingFactor+0xe>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8006c7c:	3b01      	subs	r3, #1
 8006c7e:	2001      	movs	r0, #1
 8006c80:	4098      	lsls	r0, r3
}
 8006c82:	4770      	bx	lr
 8006c84:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop

08006c8c <REMNG_ExecRamp>:
{
 8006c8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c90:	4605      	mov	r5, r0
 8006c92:	460e      	mov	r6, r1
    if (0U == Durationms)
 8006c94:	4614      	mov	r4, r2
 8006c96:	b95a      	cbnz	r2, 8006cb0 <REMNG_ExecRamp+0x24>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8006c98:	4608      	mov	r0, r1
 8006c9a:	f7ff ffe1 	bl	8006c60 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006c9e:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8006ca2:	6168      	str	r0, [r5, #20]
      pHandle->RampRemainingStep = 0U;
 8006ca4:	e9c5 6402 	strd	r6, r4, [r5, #8]
      pHandle->IncDecAmount = 0;
 8006ca8:	612c      	str	r4, [r5, #16]
}
 8006caa:	2001      	movs	r0, #1
 8006cac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006cb0:	6943      	ldr	r3, [r0, #20]
 8006cb2:	6887      	ldr	r7, [r0, #8]
 8006cb4:	fb97 f7f3 	sdiv	r7, r7, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8006cb8:	eba1 0807 	sub.w	r8, r1, r7
 8006cbc:	4640      	mov	r0, r8
 8006cbe:	f7ff ffcf 	bl	8006c60 <getScalingFactor>
 8006cc2:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8006cc4:	4638      	mov	r0, r7
 8006cc6:	f7ff ffcb 	bl	8006c60 <getScalingFactor>
 8006cca:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8006ccc:	4630      	mov	r0, r6
 8006cce:	f7ff ffc7 	bl	8006c60 <getScalingFactor>
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8006cd2:	682a      	ldr	r2, [r5, #0]
      pHandle->TargetFinal = TargetFinal;
 8006cd4:	606e      	str	r6, [r5, #4]
      if (wScalingFactor <  wScalingFactor2)
 8006cd6:	45ca      	cmp	sl, r9
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8006cd8:	fb02 f404 	mul.w	r4, r2, r4
      aux /= 1000U;
 8006cdc:	4a0c      	ldr	r2, [pc, #48]	; (8006d10 <REMNG_ExecRamp+0x84>)
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8006cde:	4603      	mov	r3, r0
        if (wScalingFactor < wScalingFactor3)
 8006ce0:	bf2c      	ite	cs
 8006ce2:	4648      	movcs	r0, r9
 8006ce4:	4650      	movcc	r0, sl
        if (wScalingFactor2 < wScalingFactor3)
 8006ce6:	4298      	cmp	r0, r3
      aux /= 1000U;
 8006ce8:	fba2 2404 	umull	r2, r4, r2, r4
 8006cec:	bf28      	it	cs
 8006cee:	4618      	movcs	r0, r3
 8006cf0:	09a4      	lsrs	r4, r4, #6
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8006cf2:	fb00 f707 	mul.w	r7, r0, r7
      pHandle->RampRemainingStep++;
 8006cf6:	3401      	adds	r4, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8006cf8:	fb00 f308 	mul.w	r3, r0, r8
      pHandle->ScalingFactor = wScalingFactorMin;
 8006cfc:	6168      	str	r0, [r5, #20]
      pHandle->RampRemainingStep++;
 8006cfe:	60ec      	str	r4, [r5, #12]
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8006d00:	60af      	str	r7, [r5, #8]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8006d02:	fb93 f4f4 	sdiv	r4, r3, r4
}
 8006d06:	2001      	movs	r0, #1
      pHandle->IncDecAmount = aux1;
 8006d08:	612c      	str	r4, [r5, #16]
}
 8006d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0e:	bf00      	nop
 8006d10:	10624dd3 	.word	0x10624dd3

08006d14 <RUC_Init>:
__weak void RUC_Init(	RevUpCtrl_Handle_t *pHandle,
						SpeednTorqCtrl_Handle_t *pSTC,
						VirtualSpeedSensor_Handle_t *pVSS,
						STO_Handle_t *pSNSL,
						PWMC_Handle_t *pPWM)
{
 8006d14:	b410      	push	{r4}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 8006d16:	6681      	str	r1, [r0, #104]	; 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006d18:	6941      	ldr	r1, [r0, #20]
{
 8006d1a:	9c01      	ldr	r4, [sp, #4]
    pHandle->pPWM = pPWM;
 8006d1c:	6744      	str	r4, [r0, #116]	; 0x74
    pHandle->OTFSCLowside = false;
 8006d1e:	f04f 0c00 	mov.w	ip, #0
    pHandle->pSNSL = pSNSL;
 8006d22:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
    pHandle->OTFSCLowside = false;
 8006d26:	f8a0 c054 	strh.w	ip, [r0, #84]	; 0x54
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006d2a:	b301      	cbz	r1, 8006d6e <RUC_Init+0x5a>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006d2c:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006d2e:	b30b      	cbz	r3, 8006d74 <RUC_Init+0x60>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006d30:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006d32:	b30b      	cbz	r3, 8006d78 <RUC_Init+0x64>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006d34:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006d36:	b30b      	cbz	r3, 8006d7c <RUC_Init+0x68>
 8006d38:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 8006d3a:	2105      	movs	r1, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006d3c:	b1c3      	cbz	r3, 8006d70 <RUC_Init+0x5c>
 8006d3e:	2204      	movs	r2, #4
 8006d40:	2105      	movs	r1, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006d42:	8803      	ldrh	r3, [r0, #0]
 8006d44:	4c0e      	ldr	r4, [pc, #56]	; (8006d80 <RUC_Init+0x6c>)
 8006d46:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006d4a:	fb0c f303 	mul.w	r3, ip, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006d4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006d52:	fba4 4303 	umull	r4, r3, r4, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006d56:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006d5a:	2400      	movs	r4, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006d5c:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006d5e:	6154      	str	r4, [r2, #20]
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8006d60:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->bPhaseNbr = bPhase;
 8006d64:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006d68:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
}
 8006d6c:	4770      	bx	lr
      bPhase++;
 8006d6e:	2101      	movs	r1, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006d70:	1e4a      	subs	r2, r1, #1
 8006d72:	e7e6      	b.n	8006d42 <RUC_Init+0x2e>
      bPhase++;
 8006d74:	2102      	movs	r1, #2
 8006d76:	e7fb      	b.n	8006d70 <RUC_Init+0x5c>
 8006d78:	2103      	movs	r1, #3
 8006d7a:	e7f9      	b.n	8006d70 <RUC_Init+0x5c>
 8006d7c:	2104      	movs	r1, #4
 8006d7e:	e7f7      	b.n	8006d70 <RUC_Init+0x5c>
 8006d80:	10624dd3 	.word	0x10624dd3

08006d84 <RUC_Clear>:
  * @param  pHandle: Pointer on Handle structure of RevUp controller.
  * @param  hMotorDirection: Rotor rotation direction.
  *         This parameter must be -1 or +1.
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8006d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8006d88:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8006d8a:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 8006d8e:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 8006d90:	2600      	movs	r6, #0
{
 8006d92:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 8006d94:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
    pHandle->bOTFRelCounter = 0U;
 8006d98:	f880 6053 	strb.w	r6, [r0, #83]	; 0x53
    pHandle->OTFSCLowside = false;
 8006d9c:	f8a0 6054 	strh.w	r6, [r0, #84]	; 0x54

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 8006da0:	4638      	mov	r0, r7

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8006da2:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 8006da4:	f000 fcf4 	bl	8007790 <VSS_Clear>
    STC_SetControlMode(pSTC, MCM_TORQUE_MODE);
 8006da8:	2104      	movs	r1, #4
 8006daa:	4640      	mov	r0, r8
 8006dac:	f000 f9b4 	bl	8007118 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8006db0:	8861      	ldrh	r1, [r4, #2]
 8006db2:	fb11 f105 	smulbb	r1, r1, r5
 8006db6:	b209      	sxth	r1, r1
 8006db8:	4638      	mov	r0, r7
 8006dba:	f000 fda1 	bl	8007900 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 8006dbe:	4632      	mov	r2, r6
 8006dc0:	4631      	mov	r1, r6
 8006dc2:	4640      	mov	r0, r8
 8006dc4:	f000 f9ac 	bl	8007120 <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 8006dc8:	8a21      	ldrh	r1, [r4, #16]
 8006dca:	89a2      	ldrh	r2, [r4, #12]
 8006dcc:	fb11 f105 	smulbb	r1, r1, r5
 8006dd0:	b209      	sxth	r1, r1
 8006dd2:	4640      	mov	r0, r8
 8006dd4:	f000 f9a4 	bl	8007120 <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 8006dd8:	89e1      	ldrh	r1, [r4, #14]
 8006dda:	89a2      	ldrh	r2, [r4, #12]
 8006ddc:	fb11 f105 	smulbb	r1, r1, r5
 8006de0:	b209      	sxth	r1, r1
 8006de2:	4638      	mov	r0, r7
 8006de4:	f000 fd94 	bl	8007910 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8006de8:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8006dea:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 8006dec:	4a06      	ldr	r2, [pc, #24]	; (8006e08 <RUC_Clear+0x84>)

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /*Timeout counter for PLL reset during OTF.*/
    pHandle->bResetPLLCnt = 0U;
 8006dee:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8006df2:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 8006df6:	fba2 2303 	umull	r2, r3, r2, r3
 8006dfa:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006dfc:	6962      	ldr	r2, [r4, #20]
 8006dfe:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 8006e00:	3301      	adds	r3, #1
 8006e02:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8006e04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e08:	10624dd3 	.word	0x10624dd3

08006e0c <RUC_OTF_Exec>:
  {
#endif
    bool IsSpeedReliable;
    bool condition = false;

    if (pHandle->hPhaseRemainingTicks > 0u)
 8006e0c:	8883      	ldrh	r3, [r0, #4]
{
 8006e0e:	b570      	push	{r4, r5, r6, lr}
 8006e10:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0u)
 8006e12:	b14b      	cbz	r3, 8006e28 <RUC_OTF_Exec+0x1c>
    {
      /* Decrease the hPhaseRemainingTicks.*/
      pHandle->hPhaseRemainingTicks--;
 8006e14:	3b01      	subs	r3, #1

      /* OTF start-up */
      if (0U == pHandle->bStageCnt)
 8006e16:	f890 5058 	ldrb.w	r5, [r0, #88]	; 0x58
      pHandle->hPhaseRemainingTicks--;
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	8083      	strh	r3, [r0, #4]
      if (0U == pHandle->bStageCnt)
 8006e1e:	2d00      	cmp	r5, #0
 8006e20:	d033      	beq.n	8006e8a <RUC_OTF_Exec+0x7e>
          pHandle->pSNSL->pFctForceConvergency1(pHandle->pSNSL);
        }
      } /*stage 0*/
    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
 8006e22:	b10b      	cbz	r3, 8006e28 <RUC_OTF_Exec+0x1c>
  bool retVal = true;
 8006e24:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8006e26:	bd70      	pop	{r4, r5, r6, pc}
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8006e28:	68a3      	ldr	r3, [r4, #8]
        if (0U == pHandle->bStageCnt)
 8006e2a:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d073      	beq.n	8006f1a <RUC_OTF_Exec+0x10e>
        if (0U == pHandle->bStageCnt)
 8006e32:	2d00      	cmp	r5, #0
 8006e34:	d07e      	beq.n	8006f34 <RUC_OTF_Exec+0x128>
        else if (1U == pHandle->bStageCnt)
 8006e36:	2d01      	cmp	r5, #1
 8006e38:	f000 8093 	beq.w	8006f62 <RUC_OTF_Exec+0x156>
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8006e3c:	88e0      	ldrh	r0, [r4, #6]
 8006e3e:	8899      	ldrh	r1, [r3, #4]
 8006e40:	881a      	ldrh	r2, [r3, #0]
 8006e42:	fb11 f100 	smulbb	r1, r1, r0
 8006e46:	b209      	sxth	r1, r1
 8006e48:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006e4a:	f000 f969 	bl	8007120 <STC_ExecRamp>
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8006e4e:	68a3      	ldr	r3, [r4, #8]
 8006e50:	88e0      	ldrh	r0, [r4, #6]
 8006e52:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8006e54:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8006e56:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 8006e5a:	b209      	sxth	r1, r1
 8006e5c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006e5e:	f000 fd57 	bl	8007910 <VSS_SetMecAcceleration>
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8006e62:	68a1      	ldr	r1, [r4, #8]
                                                 * (uint32_t)pHandle->hRUCFrequencyHz) / 1000U);
 8006e64:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8006e66:	880b      	ldrh	r3, [r1, #0]
                                                 * (uint32_t)pHandle->hRUCFrequencyHz) / 1000U);
 8006e68:	4a6f      	ldr	r2, [pc, #444]	; (8007028 <RUC_OTF_Exec+0x21c>)
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8006e6a:	6889      	ldr	r1, [r1, #8]
 8006e6c:	60a1      	str	r1, [r4, #8]
                                                 * (uint32_t)pHandle->hRUCFrequencyHz) / 1000U);
 8006e6e:	fb00 f303 	mul.w	r3, r0, r3
 8006e72:	fba2 2303 	umull	r2, r3, r2, r3
        pHandle->bStageCnt++;
 8006e76:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                                                 * (uint32_t)pHandle->hRUCFrequencyHz) / 1000U);
 8006e7a:	099b      	lsrs	r3, r3, #6
        pHandle->bStageCnt++;
 8006e7c:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 8006e7e:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 8006e80:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
        pHandle->hPhaseRemainingTicks++;
 8006e84:	80a3      	strh	r3, [r4, #4]
  bool retVal = true;
 8006e86:	2001      	movs	r0, #1
}
 8006e88:	bd70      	pop	{r4, r5, r6, pc}
        if (false ==  pHandle->EnteredZone1)
 8006e8a:	f890 3055 	ldrb.w	r3, [r0, #85]	; 0x55
          if (pHandle->pSNSL->pFctStoOtfResetPLL != MC_NULL)
 8006e8e:	6f00      	ldr	r0, [r0, #112]	; 0x70
        if (false ==  pHandle->EnteredZone1)
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d13b      	bne.n	8006f0c <RUC_OTF_Exec+0x100>
          if (pHandle->pSNSL->pFctStoOtfResetPLL != MC_NULL)
 8006e94:	68c2      	ldr	r2, [r0, #12]
 8006e96:	b14a      	cbz	r2, 8006eac <RUC_OTF_Exec+0xa0>
            pHandle->bResetPLLCnt++;
 8006e98:	f894 3057 	ldrb.w	r3, [r4, #87]	; 0x57
            if (pHandle->bResetPLLCnt > pHandle->bResetPLLTh)
 8006e9c:	f894 1056 	ldrb.w	r1, [r4, #86]	; 0x56
            pHandle->bResetPLLCnt++;
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	b2db      	uxtb	r3, r3
            if (pHandle->bResetPLLCnt > pHandle->bResetPLLTh)
 8006ea4:	4299      	cmp	r1, r3
            pHandle->bResetPLLCnt++;
 8006ea6:	f884 3057 	strb.w	r3, [r4, #87]	; 0x57
            if (pHandle->bResetPLLCnt > pHandle->bResetPLLTh)
 8006eaa:	d362      	bcc.n	8006f72 <RUC_OTF_Exec+0x166>
          IsSpeedReliable = pHandle->pSNSL->pFctSTO_SpeedReliabilityCheck(pHandle->pSNSL);
 8006eac:	6903      	ldr	r3, [r0, #16]
 8006eae:	4798      	blx	r3
          if (IsSpeedReliable)
 8006eb0:	2800      	cmp	r0, #0
 8006eb2:	d04d      	beq.n	8006f50 <RUC_OTF_Exec+0x144>
            if (pHandle->bOTFRelCounter < 127U)
 8006eb4:	f894 5053 	ldrb.w	r5, [r4, #83]	; 0x53
 8006eb8:	2d7e      	cmp	r5, #126	; 0x7e
 8006eba:	d803      	bhi.n	8006ec4 <RUC_OTF_Exec+0xb8>
              pHandle->bOTFRelCounter++;
 8006ebc:	3501      	adds	r5, #1
 8006ebe:	b2ed      	uxtb	r5, r5
 8006ec0:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
          if (pHandle->pSNSL->pFctStoOtfResetPLL != MC_NULL)
 8006ec4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 8006ec6:	68da      	ldr	r2, [r3, #12]
 8006ec8:	2a00      	cmp	r2, #0
 8006eca:	d059      	beq.n	8006f80 <RUC_OTF_Exec+0x174>
            if (pHandle->bOTFRelCounter == (pHandle->bResetPLLTh >> 1))
 8006ecc:	f894 2056 	ldrb.w	r2, [r4, #86]	; 0x56
 8006ed0:	ebb5 0f52 	cmp.w	r5, r2, lsr #1
 8006ed4:	d11c      	bne.n	8006f10 <RUC_OTF_Exec+0x104>
            int16_t hObsSpeedUnit = SPD_GetAvrgMecSpeedUnit(pHandle->pSNSL->_Super);
 8006ed6:	6818      	ldr	r0, [r3, #0]
 8006ed8:	f000 f8ba 	bl	8007050 <SPD_GetAvrgMecSpeedUnit>
            if (pHandle->hDirection > 0)
 8006edc:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8006ee0:	2b00      	cmp	r3, #0
            int16_t hObsSpeedUnit = SPD_GetAvrgMecSpeedUnit(pHandle->pSNSL->_Super);
 8006ee2:	4606      	mov	r6, r0
            if (pHandle->hDirection > 0)
 8006ee4:	dd4f      	ble.n	8006f86 <RUC_OTF_Exec+0x17a>
              if (hObsSpeedUnit > 0)
 8006ee6:	2800      	cmp	r0, #0
 8006ee8:	dd4f      	ble.n	8006f8a <RUC_OTF_Exec+0x17e>
                    ((hObsSpeedUnit < 0) ? (-hObsSpeedUnit) : (hObsSpeedUnit)); /* hObsSpeedUnit absolute value */
 8006eea:	ea86 75e6 	eor.w	r5, r6, r6, asr #31
              if ((uint16_t)(hObsSpeedUnitAbsValue) > pHandle->hMinStartUpValidSpeed)
 8006eee:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
                    ((hObsSpeedUnit < 0) ? (-hObsSpeedUnit) : (hObsSpeedUnit)); /* hObsSpeedUnit absolute value */
 8006ef2:	eba5 75e6 	sub.w	r5, r5, r6, asr #31
 8006ef6:	b2ad      	uxth	r5, r5
              if ((uint16_t)(hObsSpeedUnitAbsValue) > pHandle->hMinStartUpValidSpeed)
 8006ef8:	42ab      	cmp	r3, r5
 8006efa:	d24b      	bcs.n	8006f94 <RUC_OTF_Exec+0x188>
                pHandle->pSNSL->pFctForceConvergency1(pHandle->pSNSL);
 8006efc:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006efe:	6843      	ldr	r3, [r0, #4]
 8006f00:	4798      	blx	r3
                pHandle->EnteredZone1 = true;
 8006f02:	2201      	movs	r2, #1
    if (0U == pHandle->hPhaseRemainingTicks)
 8006f04:	88a3      	ldrh	r3, [r4, #4]
                pHandle->EnteredZone1 = true;
 8006f06:	f884 2055 	strb.w	r2, [r4, #85]	; 0x55
 8006f0a:	e78a      	b.n	8006e22 <RUC_OTF_Exec+0x16>
          pHandle->pSNSL->pFctForceConvergency1(pHandle->pSNSL);
 8006f0c:	6843      	ldr	r3, [r0, #4]
 8006f0e:	4798      	blx	r3
    if (0U == pHandle->hPhaseRemainingTicks)
 8006f10:	88a3      	ldrh	r3, [r4, #4]
 8006f12:	e786      	b.n	8006e22 <RUC_OTF_Exec+0x16>
        if (0U == pHandle->bStageCnt)
 8006f14:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
                  pHandle->hPhaseRemainingTicks = 0U;
 8006f18:	80a2      	strh	r2, [r4, #4]
        if (pHandle->bStageCnt == (pHandle->bPhaseNbr - (uint8_t)1)) /* End of user programmed revup */
 8006f1a:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 8006f1e:	3b01      	subs	r3, #1
 8006f20:	429d      	cmp	r5, r3
 8006f22:	d01c      	beq.n	8006f5e <RUC_OTF_Exec+0x152>
        else if (7U == pHandle->bStageCnt) /* End of first OTF runs */
 8006f24:	2d07      	cmp	r5, #7
 8006f26:	f47f af7d 	bne.w	8006e24 <RUC_OTF_Exec+0x18>
          pHandle->bStageCnt = 0U; /* Breaking state */
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
          pHandle->hPhaseRemainingTicks = 0U;
 8006f30:	80a3      	strh	r3, [r4, #4]
 8006f32:	e777      	b.n	8006e24 <RUC_OTF_Exec+0x18>
          PWMC_SwitchOffPWM(pHandle->pPWM);
 8006f34:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006f36:	f7fb f987 	bl	8002248 <PWMC_SwitchOffPWM>
          pHandle->OTFSCLowside = true;
 8006f3a:	2301      	movs	r3, #1
 8006f3c:	f884 3054 	strb.w	r3, [r4, #84]	; 0x54
          PWMC_TurnOnLowSides(pHandle->pPWM, 0u);
 8006f40:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006f42:	4629      	mov	r1, r5
 8006f44:	f7fb f9a8 	bl	8002298 <PWMC_TurnOnLowSides>
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8006f48:	68a3      	ldr	r3, [r4, #8]
          pHandle->bOTFRelCounter = 0U;
 8006f4a:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
 8006f4e:	e775      	b.n	8006e3c <RUC_OTF_Exec+0x30>
          if (pHandle->pSNSL->pFctStoOtfResetPLL != MC_NULL)
 8006f50:	6f23      	ldr	r3, [r4, #112]	; 0x70
            pHandle->bOTFRelCounter = 0U;
 8006f52:	f884 0053 	strb.w	r0, [r4, #83]	; 0x53
          if (pHandle->pSNSL->pFctStoOtfResetPLL != MC_NULL)
 8006f56:	68da      	ldr	r2, [r3, #12]
 8006f58:	2a00      	cmp	r2, #0
 8006f5a:	d1b7      	bne.n	8006ecc <RUC_OTF_Exec+0xc0>
 8006f5c:	e7d8      	b.n	8006f10 <RUC_OTF_Exec+0x104>
          retVal = false;
 8006f5e:	2000      	movs	r0, #0
}
 8006f60:	bd70      	pop	{r4, r5, r6, pc}
          PWMC_SwitchOnPWM(pHandle->pPWM);
 8006f62:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006f64:	f7fb f972 	bl	800224c <PWMC_SwitchOnPWM>
          pHandle->OTFSCLowside = false;
 8006f68:	2200      	movs	r2, #0
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8006f6a:	68a3      	ldr	r3, [r4, #8]
          pHandle->OTFSCLowside = false;
 8006f6c:	f884 2054 	strb.w	r2, [r4, #84]	; 0x54
 8006f70:	e764      	b.n	8006e3c <RUC_OTF_Exec+0x30>
              pHandle->pSNSL->pFctStoOtfResetPLL(pHandle->pSNSL);
 8006f72:	4790      	blx	r2
          IsSpeedReliable = pHandle->pSNSL->pFctSTO_SpeedReliabilityCheck(pHandle->pSNSL);
 8006f74:	6f20      	ldr	r0, [r4, #112]	; 0x70
              pHandle->bOTFRelCounter = 0U;
 8006f76:	f884 5053 	strb.w	r5, [r4, #83]	; 0x53
              pHandle->bResetPLLCnt = 0U;
 8006f7a:	f884 5057 	strb.w	r5, [r4, #87]	; 0x57
 8006f7e:	e795      	b.n	8006eac <RUC_OTF_Exec+0xa0>
            if (127U == pHandle->bOTFRelCounter)
 8006f80:	2d7f      	cmp	r5, #127	; 0x7f
 8006f82:	d0a8      	beq.n	8006ed6 <RUC_OTF_Exec+0xca>
 8006f84:	e7c4      	b.n	8006f10 <RUC_OTF_Exec+0x104>
              if (hObsSpeedUnit < 0)
 8006f86:	2800      	cmp	r0, #0
 8006f88:	dbaf      	blt.n	8006eea <RUC_OTF_Exec+0xde>
              pHandle->bOTFRelCounter = 0U;
 8006f8a:	2200      	movs	r2, #0
    if (0U == pHandle->hPhaseRemainingTicks)
 8006f8c:	88a3      	ldrh	r3, [r4, #4]
              pHandle->bOTFRelCounter = 0U;
 8006f8e:	f884 2053 	strb.w	r2, [r4, #83]	; 0x53
 8006f92:	e746      	b.n	8006e22 <RUC_OTF_Exec+0x16>
              else if ((uint16_t)(hObsSpeedUnitAbsValue) > pHandle->hMinStartUpFlySpeed)
 8006f94:	f8b4 304c 	ldrh.w	r3, [r4, #76]	; 0x4c
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	d2b9      	bcs.n	8006f10 <RUC_OTF_Exec+0x104>
                VSS_SetCopyObserver(pHandle->pVSS);
 8006f9c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006f9e:	f000 fd11 	bl	80079c4 <VSS_SetCopyObserver>
                pHandle->pSNSL->pFctForceConvergency2(pHandle->pSNSL);
 8006fa2:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006fa4:	6883      	ldr	r3, [r0, #8]
 8006fa6:	4798      	blx	r3
                if (MC_NULL == pHandle->pCurrentPhaseParams)
 8006fa8:	68a2      	ldr	r2, [r4, #8]
 8006faa:	2a00      	cmp	r2, #0
 8006fac:	d0b2      	beq.n	8006f14 <RUC_OTF_Exec+0x108>
                  while (pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit < hObsSpeedUnitAbsValue)
 8006fae:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
            int16_t hObsSpeedUnitAbsValue =
 8006fb2:	b22b      	sxth	r3, r5
                  while (pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit < hObsSpeedUnitAbsValue)
 8006fb4:	4563      	cmp	r3, ip
 8006fb6:	dd15      	ble.n	8006fe4 <RUC_OTF_Exec+0x1d8>
                      pHandle->bStageCnt++;
 8006fb8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
 8006fbc:	e00a      	b.n	8006fd4 <RUC_OTF_Exec+0x1c8>
 8006fbe:	b2c5      	uxtb	r5, r0
                      hOldFinalTorque = pHandle->pCurrentPhaseParams->hFinalTorque;
 8006fc0:	f9b1 0004 	ldrsh.w	r0, [r1, #4]
                      pHandle->bStageCnt++;
 8006fc4:	f884 5058 	strb.w	r5, [r4, #88]	; 0x58
                  while (pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit < hObsSpeedUnitAbsValue)
 8006fc8:	f9b2 1002 	ldrsh.w	r1, [r2, #2]
                      pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pHandle->pCurrentPhaseParams->pNext;
 8006fcc:	60a2      	str	r2, [r4, #8]
                  while (pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit < hObsSpeedUnitAbsValue)
 8006fce:	4299      	cmp	r1, r3
 8006fd0:	da0a      	bge.n	8006fe8 <RUC_OTF_Exec+0x1dc>
 8006fd2:	468c      	mov	ip, r1
                      hOldFinalTorque = pHandle->pCurrentPhaseParams->hFinalTorque;
 8006fd4:	4611      	mov	r1, r2
                    if (pHandle->pCurrentPhaseParams->pNext == MC_NULL)
 8006fd6:	6892      	ldr	r2, [r2, #8]
                      pHandle->bStageCnt++;
 8006fd8:	1c68      	adds	r0, r5, #1
                    if (pHandle->pCurrentPhaseParams->pNext == MC_NULL)
 8006fda:	2a00      	cmp	r2, #0
 8006fdc:	d1ef      	bne.n	8006fbe <RUC_OTF_Exec+0x1b2>
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8006fde:	68a3      	ldr	r3, [r4, #8]
                      pHandle->hPhaseRemainingTicks = 0U;
 8006fe0:	80a2      	strh	r2, [r4, #4]
                if (false == bError)
 8006fe2:	e724      	b.n	8006e2e <RUC_OTF_Exec+0x22>
                int16_t hOldFinalTorque = 0;
 8006fe4:	2000      	movs	r0, #0
                int16_t hOldFinalMecSpeedUnit = 0;
 8006fe6:	4684      	mov	ip, r0
                  wDeltaSpeedRevUp = ((int32_t)(pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit))
 8006fe8:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
                  if ((int32_t)0 == wDeltaSpeedRevUp)
 8006fec:	ebb3 0c0c 	subs.w	ip, r3, ip
 8006ff0:	d108      	bne.n	8007004 <RUC_OTF_Exec+0x1f8>
                  pHandle->bStageCnt = 6U;
 8006ff2:	2306      	movs	r3, #6
                  pHandle->hPhaseRemainingTicks = 1U;
 8006ff4:	2001      	movs	r0, #1
                  pHandle->pCurrentPhaseParams = &pHandle->OTFPhaseParams;
 8006ff6:	f104 025c 	add.w	r2, r4, #92	; 0x5c
                  pHandle->bStageCnt = 6U;
 8006ffa:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
                  pHandle->hPhaseRemainingTicks = 1U;
 8006ffe:	80a0      	strh	r0, [r4, #4]
                  pHandle->pCurrentPhaseParams = &pHandle->OTFPhaseParams;
 8007000:	60a2      	str	r2, [r4, #8]
}
 8007002:	bd70      	pop	{r4, r5, r6, pc}
                  wDeltaTorqueRevUp = ((int32_t)(pHandle->pCurrentPhaseParams->hFinalTorque))
 8007004:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
                    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hDirection * hTorqueReference, 0U);
 8007008:	88e1      	ldrh	r1, [r4, #6]
                  wDeltaTorqueRevUp = ((int32_t)(pHandle->pCurrentPhaseParams->hFinalTorque))
 800700a:	1a1b      	subs	r3, r3, r0
                    hTorqueReference = (int16_t)((((int32_t)hObsSpeedUnit) * wDeltaTorqueRevUp) / wDeltaSpeedRevUp)
 800700c:	fb06 f303 	mul.w	r3, r6, r3
 8007010:	fb93 f3fc 	sdiv	r3, r3, ip
                                     + hOldFinalTorque;
 8007014:	4418      	add	r0, r3
                    (void)STC_ExecRamp(pHandle->pSTC, pHandle->hDirection * hTorqueReference, 0U);
 8007016:	fb11 f100 	smulbb	r1, r1, r0
 800701a:	2200      	movs	r2, #0
 800701c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800701e:	b209      	sxth	r1, r1
 8007020:	f000 f87e 	bl	8007120 <STC_ExecRamp>
 8007024:	e7e5      	b.n	8006ff2 <RUC_OTF_Exec+0x1e6>
 8007026:	bf00      	nop
 8007028:	10624dd3 	.word	0x10624dd3

0800702c <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 800702c:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8007030:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8007034:	4282      	cmp	r2, r0
 8007036:	bf34      	ite	cc
 8007038:	2000      	movcc	r0, #0
 800703a:	2001      	movcs	r0, #1
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop

08007040 <RUC_Get_SCLowsideOTF_Status>:
#ifdef NULL_PTR_REV_UP_CTL
  return ((MC_NULL == pHandle) ? false : pHandle->OTFSCLowside);
#else
  return (pHandle->OTFSCLowside);
#endif
}
 8007040:	f890 0054 	ldrb.w	r0, [r0, #84]	; 0x54
 8007044:	4770      	bx	lr
 8007046:	bf00      	nop

08007048 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8007048:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop

08007050 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8007050:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop

08007058 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8007058:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop

08007060 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8007060:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8007064:	8a81      	ldrh	r1, [r0, #20]
{
 8007066:	b500      	push	{lr}
    if (*pMecSpeedUnit < 0)
 8007068:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 800706a:	bfb8      	it	lt
 800706c:	425b      	neglt	r3, r3
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800706e:	f8b0 e016 	ldrh.w	lr, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8007072:	f890 c003 	ldrb.w	ip, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8007076:	7802      	ldrb	r2, [r0, #0]
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8007078:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800707a:	459e      	cmp	lr, r3
 800707c:	d819      	bhi.n	80070b2 <SPD_IsMecSpeedReliable+0x52>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800707e:	4299      	cmp	r1, r3
 8007080:	bf2c      	ite	cs
 8007082:	2300      	movcs	r3, #0
 8007084:	2301      	movcc	r3, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8007086:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800708a:	f8b0 e018 	ldrh.w	lr, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 800708e:	2900      	cmp	r1, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8007090:	bfb8      	it	lt
 8007092:	4249      	neglt	r1, r1
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8007094:	b289      	uxth	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8007096:	458e      	cmp	lr, r1
 8007098:	d300      	bcc.n	800709c <SPD_IsMecSpeedReliable+0x3c>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 800709a:	b163      	cbz	r3, 80070b6 <SPD_IsMecSpeedReliable+0x56>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800709c:	4594      	cmp	ip, r2
 800709e:	d901      	bls.n	80070a4 <SPD_IsMecSpeedReliable+0x44>
      {
        bSpeedErrorNumber++;
 80070a0:	3201      	adds	r2, #1
 80070a2:	b2d2      	uxtb	r2, r2
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80070a4:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 80070a6:	ebb2 000c 	subs.w	r0, r2, ip
 80070aa:	bf18      	it	ne
 80070ac:	2001      	movne	r0, #1
 80070ae:	f85d fb04 	ldr.w	pc, [sp], #4
      SpeedError = true;
 80070b2:	2301      	movs	r3, #1
 80070b4:	e7e7      	b.n	8007086 <SPD_IsMecSpeedReliable+0x26>
        bSpeedErrorNumber = 0u;
 80070b6:	4594      	cmp	ip, r2
 80070b8:	bf88      	it	hi
 80070ba:	2200      	movhi	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 80070bc:	7002      	strb	r2, [r0, #0]
}
 80070be:	ebb2 000c 	subs.w	r0, r2, ip
 80070c2:	bf18      	it	ne
 80070c4:	2001      	movne	r0, #1
 80070c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80070ca:	bf00      	nop

080070cc <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80070cc:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 80070d0:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80070d2:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 80070d6:	6142      	str	r2, [r0, #20]
{
 80070d8:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 80070da:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 80070de:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 80070e0:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80070e2:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80070e6:	0409      	lsls	r1, r1, #16
 80070e8:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 80070ec:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80070ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 80070f2:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80070f4:	6183      	str	r3, [r0, #24]
}
 80070f6:	4770      	bx	lr

080070f8 <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 80070f8:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80070fa:	4770      	bx	lr

080070fc <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 80070fc:	6940      	ldr	r0, [r0, #20]
 80070fe:	4770      	bx	lr

08007100 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (MCM_SPEED_MODE == pHandle->Mode)
 8007100:	7803      	ldrb	r3, [r0, #0]
 8007102:	2b03      	cmp	r3, #3
 8007104:	d000      	beq.n	8007108 <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8007106:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8007108:	6900      	ldr	r0, [r0, #16]
 800710a:	2100      	movs	r1, #0
 800710c:	f7fe bdae 	b.w	8005c6c <PID_SetIntegralTerm>

08007110 <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8007110:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop

08007118 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007118:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 800711a:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 800711c:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800711e:	4770      	bx	lr

08007120 <STC_ExecRamp>:
  * @ref EncAlignCtrl "Encoder Alignment Control",
  * @ref PositionControl "Position Control" loop or
  * speed regulation with @ref SpeedRegulatorPotentiometer Speed potentiometer.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8007120:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (MCM_TORQUE_MODE == pHandle->Mode)
 8007122:	7803      	ldrb	r3, [r0, #0]
 8007124:	2b04      	cmp	r3, #4
{
 8007126:	4604      	mov	r4, r0
 8007128:	460e      	mov	r6, r1
 800712a:	4615      	mov	r5, r2
    if (MCM_TORQUE_MODE == pHandle->Mode)
 800712c:	d01e      	beq.n	800716c <STC_ExecRamp+0x4c>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800712e:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8007130:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8007134:	4299      	cmp	r1, r3
 8007136:	dd01      	ble.n	800713c <STC_ExecRamp+0x1c>
        allowedRange = false;
 8007138:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 800713a:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 800713c:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8007140:	428b      	cmp	r3, r1
 8007142:	dcf9      	bgt.n	8007138 <STC_ExecRamp+0x18>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8007144:	8c23      	ldrh	r3, [r4, #32]
 8007146:	4299      	cmp	r1, r3
 8007148:	da03      	bge.n	8007152 <STC_ExecRamp+0x32>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 800714a:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 800714e:	428b      	cmp	r3, r1
 8007150:	dbf2      	blt.n	8007138 <STC_ExecRamp+0x18>
      if (0U == hDurationms)
 8007152:	b9ad      	cbnz	r5, 8007180 <STC_ExecRamp+0x60>
        if (MCM_SPEED_MODE == pHandle->Mode)
 8007154:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8007156:	0436      	lsls	r6, r6, #16
        if (MCM_SPEED_MODE == pHandle->Mode)
 8007158:	2b03      	cmp	r3, #3
        pHandle->RampRemainingStep = 0U;
 800715a:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 800715e:	bf0c      	ite	eq
 8007160:	6066      	streq	r6, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8007162:	60a6      	strne	r6, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8007164:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8007166:	61a3      	str	r3, [r4, #24]
 8007168:	2001      	movs	r0, #1
}
 800716a:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 800716c:	f7ff ffd0 	bl	8007110 <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8007170:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007172:	429e      	cmp	r6, r3
 8007174:	dce0      	bgt.n	8007138 <STC_ExecRamp+0x18>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8007176:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 800717a:	42b3      	cmp	r3, r6
 800717c:	dcdc      	bgt.n	8007138 <STC_ExecRamp+0x18>
 800717e:	e7e8      	b.n	8007152 <STC_ExecRamp+0x32>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8007180:	8ba3      	ldrh	r3, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8007182:	8066      	strh	r6, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8007184:	fb05 f303 	mul.w	r3, r5, r3
        wAux /= 1000U;
 8007188:	4d06      	ldr	r5, [pc, #24]	; (80071a4 <STC_ExecRamp+0x84>)
 800718a:	fba5 2303 	umull	r2, r3, r5, r3
 800718e:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8007190:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8007192:	1a30      	subs	r0, r6, r0
 8007194:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 8007196:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8007198:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 800719c:	61a0      	str	r0, [r4, #24]
 800719e:	2001      	movs	r0, #1
}
 80071a0:	bd70      	pop	{r4, r5, r6, pc}
 80071a2:	bf00      	nop
 80071a4:	10624dd3 	.word	0x10624dd3

080071a8 <STC_CalcTorqueReference>:
  * - Must be called at fixed time equal to hSTCFrequencyHz. It is called
  * passing as parameter the speed sensor used to perform the speed regulation.
  * - Called during START and ALIGNEMENT states of the MC state machine into MediumFrequencyTask.
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 80071a8:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (MCM_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 80071aa:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (MCM_TORQUE_MODE == pHandle->Mode)
 80071ae:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 80071b0:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 80071b2:	2a04      	cmp	r2, #4
 80071b4:	bf08      	it	eq
 80071b6:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 80071b8:	2b01      	cmp	r3, #1
{
 80071ba:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 80071bc:	d908      	bls.n	80071d0 <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 80071be:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80071c0:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80071c2:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 80071c4:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (MCM_SPEED_MODE == pHandle->Mode)
 80071c6:	2a03      	cmp	r2, #3
 80071c8:	d00b      	beq.n	80071e2 <STC_CalcTorqueReference+0x3a>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 80071ca:	60a5      	str	r5, [r4, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 80071cc:	1428      	asrs	r0, r5, #16
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 80071ce:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 80071d0:	d1f9      	bne.n	80071c6 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80071d2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80071d6:	2300      	movs	r3, #0
    if (MCM_SPEED_MODE == pHandle->Mode)
 80071d8:	2a03      	cmp	r2, #3
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80071da:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 80071de:	60c3      	str	r3, [r0, #12]
    if (MCM_SPEED_MODE == pHandle->Mode)
 80071e0:	d1f3      	bne.n	80071ca <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80071e2:	6960      	ldr	r0, [r4, #20]
 80071e4:	f7ff ff34 	bl	8007050 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 80071e8:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80071ec:	b209      	sxth	r1, r1
 80071ee:	6920      	ldr	r0, [r4, #16]
 80071f0:	f7fe fd40 	bl	8005c74 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80071f4:	0403      	lsls	r3, r0, #16
 80071f6:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 80071fa:	bd38      	pop	{r3, r4, r5, pc}

080071fc <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 80071fc:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8007200:	2200      	movs	r2, #0
 8007202:	b299      	uxth	r1, r3
 8007204:	f361 020f 	bfi	r2, r1, #0, #16
 8007208:	0c1b      	lsrs	r3, r3, #16
 800720a:	f363 421f 	bfi	r2, r3, #16, #16
{
 800720e:	b082      	sub	sp, #8
}
 8007210:	4610      	mov	r0, r2
 8007212:	b002      	add	sp, #8
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop

08007218 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *
  * - Called during the CHARGE_BOOT_CAP, SWITCH_OVER and WAIT_STOP_MOTOR states of the MC state machine
  * into MediumFrequencyTask to initialize the speed reference.
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8007218:	b510      	push	{r4, lr}
 800721a:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 800721c:	6940      	ldr	r0, [r0, #20]
 800721e:	f7ff ff17 	bl	8007050 <SPD_GetAvrgMecSpeedUnit>
 8007222:	0400      	lsls	r0, r0, #16
 8007224:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8007226:	bd10      	pop	{r4, pc}

08007228 <STO_PLL_CalcElAngle>:
  * @param  pHandle: Handler of the current instance of the STO component.
  * @param  pInput: Pointer to the observer inputs structure.
  * @retval int16_t Rotor electrical angle (s16Degrees).
  */
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8007228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 800722c:	4604      	mov	r4, r0
{
 800722e:	b087      	sub	sp, #28
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8007230:	2800      	cmp	r0, #0
 8007232:	f000 80cc 	beq.w	80073ce <STO_PLL_CalcElAngle+0x1a6>
 8007236:	2900      	cmp	r1, #0
 8007238:	f000 80cc 	beq.w	80073d4 <STO_PLL_CalcElAngle+0x1ac>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 800723c:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8007240:	6e87      	ldr	r7, [r0, #104]	; 0x68
 8007242:	ebc3 32c3 	rsb	r2, r3, r3, lsl #15
 8007246:	4297      	cmp	r7, r2
 8007248:	ea4f 30c3 	mov.w	r0, r3, lsl #15
 800724c:	f340 80dd 	ble.w	800740a <STO_PLL_CalcElAngle+0x1e2>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8007250:	66a2      	str	r2, [r4, #104]	; 0x68
 8007252:	4617      	mov	r7, r2
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8007254:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8007258:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 800725a:	9601      	str	r6, [sp, #4]
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800725c:	fa47 f605 	asr.w	r6, r7, r5
 8007260:	9602      	str	r6, [sp, #8]
 8007262:	fa0f fe86 	sxth.w	lr, r6
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8007266:	9e01      	ldr	r6, [sp, #4]
 8007268:	42b2      	cmp	r2, r6
 800726a:	f280 80c8 	bge.w	80073fe <STO_PLL_CalcElAngle+0x1d6>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
 800726e:	66e2      	str	r2, [r4, #108]	; 0x6c
 8007270:	9201      	str	r2, [sp, #4]
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8007272:	9b01      	ldr	r3, [sp, #4]
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007274:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8007278:	fa43 f505 	asr.w	r5, r3, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800727c:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8007280:	ebc3 32c3 	rsb	r2, r3, r3, lsl #15
 8007284:	4591      	cmp	r9, r2
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8007286:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800728a:	ea4f 30c3 	mov.w	r0, r3, lsl #15
 800728e:	f340 80ae 	ble.w	80073ee <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8007292:	6622      	str	r2, [r4, #96]	; 0x60
 8007294:	4691      	mov	r9, r2
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007296:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
 800729a:	4542      	cmp	r2, r8
 800729c:	f280 80a1 	bge.w	80073e2 <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
 80072a0:	6662      	str	r2, [r4, #100]	; 0x64
 80072a2:	4690      	mov	r8, r2
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hIalfa_err = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80072a4:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80072a6:	8908      	ldrh	r0, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80072a8:	f8ad 300c 	strh.w	r3, [sp, #12]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80072ac:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80072b0:	f8b1 a006 	ldrh.w	sl, [r1, #6]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80072b4:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 80072b8:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 80072bc:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /*Calls the PLL blockset*/
    pHandle->hBemf_alfa_est = hAux_Alfa;
    pHandle->hBemf_beta_est = hAux_Beta;
 80072c0:	f8a4 c072 	strh.w	ip, [r4, #114]	; 0x72
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80072c4:	fb00 f303 	mul.w	r3, r0, r3
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80072c8:	141e      	asrs	r6, r3, #16
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 80072ca:	fb01 f000 	mul.w	r0, r1, r0
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80072ce:	fa49 f302 	asr.w	r3, r9, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80072d2:	9903      	ldr	r1, [sp, #12]
    pHandle->hBemf_alfa_est = hAux_Alfa;
 80072d4:	f8a4 e070 	strh.w	lr, [r4, #112]	; 0x70
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 80072d8:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80072dc:	eba2 0a0a 	sub.w	sl, r2, sl
    wAux = ((int32_t)pHandle->hC1) * hAux;
 80072e0:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 80072e4:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80072e8:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 80072ea:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
    wAux = ((int32_t)pHandle->hC1) * hAux;
 80072ee:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 80072f2:	eba9 0303 	sub.w	r3, r9, r3
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 80072f6:	f9b4 b028 	ldrsh.w	fp, [r4, #40]	; 0x28
    wAux = wAux * pHandle->hC6;
 80072fa:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	; 0x2a
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80072fe:	b209      	sxth	r1, r1
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8007300:	fa0f fa8a 	sxth.w	sl, sl
    wIalfa_est_Next += wAux;
 8007304:	fb08 3301 	mla	r3, r8, r1, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007308:	1400      	asrs	r0, r0, #16
    wIbeta_est_Next += wAux;
 800730a:	fb08 280a 	mla	r8, r8, sl, r2
    wIalfa_est_Next += wAux;
 800730e:	fb0b 3306 	mla	r3, fp, r6, r3
    wIbeta_est_Next += wAux;
 8007312:	fb0b 8800 	mla	r8, fp, r0, r8
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8007316:	9e01      	ldr	r6, [sp, #4]
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8007318:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800731c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800731e:	fb00 6a0a 	mla	sl, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8007322:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8007326:	fb01 7100 	mla	r1, r1, r0, r7
    wIalfa_est_Next -= wAux;
 800732a:	fb06 371e 	mls	r7, r6, lr, r3

    if (0 == pHandle->hForcedDirection)
 800732e:	f994 0124 	ldrsb.w	r0, [r4, #292]	; 0x124
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8007332:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    wIbeta_est_Next -= wAux;
 8007336:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800733a:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800733e:	fa4e f202 	asr.w	r2, lr, r2
    wAux = wAux * pHandle->hC6;
 8007342:	fb0c fc09 	mul.w	ip, ip, r9
    wAux = wAux * pHandle->hC6;
 8007346:	fb02 f209 	mul.w	r2, r2, r9
    wBemf_alfa_est_Next += wAux;
 800734a:	fb0c 1803 	mla	r8, ip, r3, r1
    wBemf_beta_est_Next -= wAux;
 800734e:	fb02 aa13 	mls	sl, r2, r3, sl
    if (0 == pHandle->hForcedDirection)
 8007352:	2800      	cmp	r0, #0
 8007354:	d142      	bne.n	80073dc <STO_PLL_CalcElAngle+0x1b4>
    {
      /* we are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8007356:	2b00      	cmp	r3, #0
 8007358:	f64f 79ff 	movw	r9, #65535	; 0xffff
 800735c:	bfa8      	it	ge
 800735e:	f04f 0901 	movge.w	r9, #1
  Trig_Components Local_Components;
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 8007362:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8007366:	f7fa f8d1 	bl	800150c <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 800736a:	9b02      	ldr	r3, [sp, #8]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 800736c:	fb15 f509 	smulbb	r5, r5, r9
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8007370:	fb13 f109 	smulbb	r1, r3, r9
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 8007374:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8007376:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 800737a:	fb10 f021 	smultb	r0, r0, r1
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 800737e:	f340 31cf 	sbfx	r1, r0, #15, #16
 8007382:	f345 35cf 	sbfx	r5, r5, #15, #16
 8007386:	1a69      	subs	r1, r5, r1
 8007388:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800738c:	f7fe fc72 	bl	8005c74 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8007390:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8007394:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8007398:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 800739a:	3301      	adds	r3, #1
 800739c:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800739e:	429a      	cmp	r2, r3
 80073a0:	bf0a      	itet	eq
 80073a2:	2200      	moveq	r2, #0
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 80073a4:	461a      	movne	r2, r3
    bBuffer_index = 0U;
 80073a6:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 80073a8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80073ac:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 80073b0:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 80073b4:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
    pHandle->_Super.hElAngle += hRotor_Speed;
 80073b8:	88a1      	ldrh	r1, [r4, #4]
  pHandle->Speed_Buffer_Index = bBuffer_index;
 80073ba:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 80073be:	4408      	add	r0, r1
    pHandle->Ibeta_est = wIbeta_est_Next;
 80073c0:	e9c4 6819 	strd	r6, r8, [r4, #100]	; 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 80073c4:	b200      	sxth	r0, r0
    pHandle->Ialfa_est = wIalfa_est_Next;
 80073c6:	6627      	str	r7, [r4, #96]	; 0x60
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 80073c8:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 80073cc:	80a0      	strh	r0, [r4, #4]
}
 80073ce:	b007      	add	sp, #28
 80073d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 80073d4:	4608      	mov	r0, r1
}
 80073d6:	b007      	add	sp, #28
 80073d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 80073dc:	fa1f f980 	uxth.w	r9, r0
 80073e0:	e7bf      	b.n	8007362 <STO_PLL_CalcElAngle+0x13a>
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 80073e2:	1a1b      	subs	r3, r3, r0
 80073e4:	4598      	cmp	r8, r3
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 80073e6:	bfdc      	itt	le
 80073e8:	6663      	strle	r3, [r4, #100]	; 0x64
 80073ea:	4698      	movle	r8, r3
 80073ec:	e75a      	b.n	80072a4 <STO_PLL_CalcElAngle+0x7c>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 80073ee:	eba3 0800 	sub.w	r8, r3, r0
 80073f2:	45c1      	cmp	r9, r8
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 80073f4:	bfdc      	itt	le
 80073f6:	f8c4 8060 	strle.w	r8, [r4, #96]	; 0x60
 80073fa:	46c1      	movle	r9, r8
 80073fc:	e74b      	b.n	8007296 <STO_PLL_CalcElAngle+0x6e>
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 80073fe:	1a1b      	subs	r3, r3, r0
 8007400:	429e      	cmp	r6, r3
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 8007402:	bfdc      	itt	le
 8007404:	66e3      	strle	r3, [r4, #108]	; 0x6c
 8007406:	9301      	strle	r3, [sp, #4]
 8007408:	e733      	b.n	8007272 <STO_PLL_CalcElAngle+0x4a>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 800740a:	1a1d      	subs	r5, r3, r0
 800740c:	42af      	cmp	r7, r5
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 800740e:	bfdc      	itt	le
 8007410:	66a5      	strle	r5, [r4, #104]	; 0x68
 8007412:	462f      	movle	r7, r5
 8007414:	e71e      	b.n	8007254 <STO_PLL_CalcElAngle+0x2c>
 8007416:	bf00      	nop

08007418 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8007418:	b570      	push	{r4, r5, r6, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 800741a:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800741e:	2d00      	cmp	r5, #0
 8007420:	f000 809e 	beq.w	8007560 <STO_PLL_CalcAvrgMecSpeedUnit+0x148>
 8007424:	f105 3cff 	add.w	ip, r5, #4294967295
 8007428:	fa5f f38c 	uxtb.w	r3, ip
 800742c:	f100 0472 	add.w	r4, r0, #114	; 0x72
 8007430:	f100 0c74 	add.w	ip, r0, #116	; 0x74
 8007434:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8007438:	2200      	movs	r2, #0
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800743a:	4623      	mov	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800743c:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007440:	459c      	cmp	ip, r3
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8007442:	4472      	add	r2, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007444:	d1fa      	bne.n	800743c <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 8007446:	fb92 fef5 	sdiv	lr, r2, r5
 800744a:	2200      	movs	r2, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 800744c:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 8007450:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007454:	4564      	cmp	r4, ip
      wAvrQuadraticError += wError;
 8007456:	fb03 2203 	mla	r2, r3, r3, r2
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800745a:	d1f7      	bne.n	800744c <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 800745c:	fbb2 f2f5 	udiv	r2, r2, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8007460:	fb0e f40e 	mul.w	r4, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8007464:	17e6      	asrs	r6, r4, #31
 8007466:	f8b0 5110 	ldrh.w	r5, [r0, #272]	; 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 800746a:	8b43      	ldrh	r3, [r0, #26]
 800746c:	fb0e fe03 	mul.w	lr, lr, r3
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8007470:	fba5 4304 	umull	r4, r3, r5, r4
 8007474:	fb05 3306 	mla	r3, r5, r6, r3
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 8007478:	09e4      	lsrs	r4, r4, #7
 800747a:	ea44 6443 	orr.w	r4, r4, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 800747e:	7883      	ldrb	r3, [r0, #2]
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8007480:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8007484:	69c5      	ldr	r5, [r0, #28]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8007486:	4294      	cmp	r4, r2
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8007488:	fb0e f303 	mul.w	r3, lr, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800748c:	bfd8      	it	le
 800748e:	f04f 0c00 	movle.w	ip, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8007492:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8007496:	bfc8      	it	gt
 8007498:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 800749c:	7845      	ldrb	r5, [r0, #1]
 800749e:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 80074a2:	b21d      	sxth	r5, r3
 80074a4:	800d      	strh	r5, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 80074a6:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80074a8:	f880 c0f5 	strb.w	ip, [r0, #245]	; 0xf5
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 80074ac:	b9ae      	cbnz	r6, 80074da <STO_PLL_CalcAvrgMecSpeedUnit+0xc2>
    if (false == pHandle->IsAlgorithmConverged)
 80074ae:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 80074b2:	b353      	cbz	r3, 800750a <STO_PLL_CalcAvrgMecSpeedUnit+0xf2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 80074b4:	4294      	cmp	r4, r2
 80074b6:	dc25      	bgt.n	8007504 <STO_PLL_CalcAvrgMecSpeedUnit+0xec>
        pHandle->ReliabilityCounter++;
 80074b8:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80074bc:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
        pHandle->ReliabilityCounter++;
 80074c0:	3301      	adds	r3, #1
 80074c2:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80074c4:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 80074c6:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80074ca:	d81e      	bhi.n	800750a <STO_PLL_CalcAvrgMecSpeedUnit+0xf2>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80074cc:	78c2      	ldrb	r2, [r0, #3]
 80074ce:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	bd70      	pop	{r4, r5, r6, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 80074da:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 80074dc:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 80074e0:	bfb8      	it	lt
 80074e2:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 80074e4:	429d      	cmp	r5, r3
 80074e6:	dc14      	bgt.n	8007512 <STO_PLL_CalcAvrgMecSpeedUnit+0xfa>
    bool bIs_Bemf_Consistent = false;
 80074e8:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 80074ea:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 80074ec:	462e      	mov	r6, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 80074ee:	e9c0 633f 	strd	r6, r3, [r0, #252]	; 0xfc
    if (false == pHandle->IsAlgorithmConverged)
 80074f2:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 80074f6:	f880 50f9 	strb.w	r5, [r0, #249]	; 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 80074fa:	b133      	cbz	r3, 800750a <STO_PLL_CalcAvrgMecSpeedUnit+0xf2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 80074fc:	4294      	cmp	r4, r2
 80074fe:	dddb      	ble.n	80074b8 <STO_PLL_CalcAvrgMecSpeedUnit+0xa0>
 8007500:	2d00      	cmp	r5, #0
 8007502:	d0d9      	beq.n	80074b8 <STO_PLL_CalcAvrgMecSpeedUnit+0xa0>
        pHandle->ReliabilityCounter = 0U;
 8007504:	2300      	movs	r3, #0
 8007506:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 800750a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 800750e:	f7ff bda7 	b.w	8007060 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 8007512:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	; 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 8007516:	f9b0 c072 	ldrsh.w	ip, [r0, #114]	; 0x72
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800751a:	f890 5119 	ldrb.w	r5, [r0, #281]	; 0x119
        wObsBemfSq = wObsBemf * wObsBemf;
 800751e:	fb06 f606 	mul.w	r6, r6, r6
        wObsBemfSq += wObsBemf * wObsBemf;
 8007522:	fb0c 660c 	mla	r6, ip, ip, r6
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8007526:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 800752a:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 800752e:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8007532:	fb03 f505 	mul.w	r5, r3, r5
 8007536:	2d00      	cmp	r5, #0
 8007538:	bfb8      	it	lt
 800753a:	353f      	addlt	r5, #63	; 0x3f
 800753c:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 800753e:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 8007542:	2b00      	cmp	r3, #0
 8007544:	461d      	mov	r5, r3
 8007546:	f890 c118 	ldrb.w	ip, [r0, #280]	; 0x118
 800754a:	bfb8      	it	lt
 800754c:	f103 053f 	addlt.w	r5, r3, #63	; 0x3f
 8007550:	11ad      	asrs	r5, r5, #6
 8007552:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 8007556:	42ae      	cmp	r6, r5
 8007558:	bfd4      	ite	le
 800755a:	2500      	movle	r5, #0
 800755c:	2501      	movgt	r5, #1
 800755e:	e7c6      	b.n	80074ee <STO_PLL_CalcAvrgMecSpeedUnit+0xd6>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007560:	462a      	mov	r2, r5
 8007562:	462c      	mov	r4, r5
 8007564:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8007566:	46ae      	mov	lr, r5
 8007568:	e77d      	b.n	8007466 <STO_PLL_CalcAvrgMecSpeedUnit+0x4e>
 800756a:	bf00      	nop

0800756c <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 800756c:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8007570:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 8007574:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8007578:	1acb      	subs	r3, r1, r3
 800757a:	b29b      	uxth	r3, r3
{
 800757c:	b510      	push	{r4, lr}
    int32_t wSum = pHandle->DppBufferSum;
 800757e:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    if (0 == hBufferSizeDiff)
 8007582:	b973      	cbnz	r3, 80075a2 <STO_PLL_CalcAvrgElSpeedDpp+0x36>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 8007584:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007588:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
 800758c:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8007590:	4423      	add	r3, r4
 8007592:	1a5b      	subs	r3, r3, r1
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8007594:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
    pHandle->DppBufferSum = wSum;
 8007598:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800759c:	4113      	asrs	r3, r2
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 800759e:	81c3      	strh	r3, [r0, #14]
}
 80075a0:	bd10      	pop	{r4, pc}
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 80075a2:	4413      	add	r3, r2
 80075a4:	fa0f fc83 	sxth.w	ip, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 80075a8:	4561      	cmp	r1, ip
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 80075aa:	b29b      	uxth	r3, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 80075ac:	dc05      	bgt.n	80075ba <STO_PLL_CalcAvrgElSpeedDpp+0x4e>
 80075ae:	fa1f fe81 	uxth.w	lr, r1
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 80075b2:	eba3 030e 	sub.w	r3, r3, lr
 80075b6:	fa0f fc83 	sxth.w	ip, r3
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 80075ba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80075be:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 80075c2:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 80075c6:	f9bc 2074 	ldrsh.w	r2, [ip, #116]	; 0x74
 80075ca:	4423      	add	r3, r4
 80075cc:	1a9b      	subs	r3, r3, r2
 80075ce:	e7e1      	b.n	8007594 <STO_PLL_CalcAvrgElSpeedDpp+0x28>

080075d0 <STO_PLL_Clear>:
{
 80075d0:	b510      	push	{r4, lr}
  *
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 80075d2:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 80075d6:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 80075d8:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 80075dc:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 80075e0:	e9c0 113f 	strd	r1, r1, [r0, #252]	; 0xfc
{
 80075e4:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 80075e6:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 80075e8:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 80075ea:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    pHandle->IsAlgorithmConverged = false;
 80075ee:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 80075f2:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    pHandle->ForceConvergency = false;
 80075f6:	f8a0 1122 	strh.w	r1, [r0, #290]	; 0x122

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 80075fa:	b11a      	cbz	r2, 8007604 <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 80075fc:	0052      	lsls	r2, r2, #1
 80075fe:	3074      	adds	r0, #116	; 0x74
 8007600:	f000 fa08 	bl	8007a14 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 8007604:	2100      	movs	r1, #0
 8007606:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 800760a:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800760e:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
 8007612:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8007616:	f7fe bb29 	b.w	8005c6c <PID_SetIntegralTerm>
 800761a:	bf00      	nop

0800761c <STO_PLL_Init>:
{
 800761c:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 800761e:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8007622:	4b19      	ldr	r3, [pc, #100]	; (8007688 <STO_PLL_Init+0x6c>)
 8007624:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	; 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8007628:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    pHandle->EnableDualCheck = true;
 800762c:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 800762e:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8007630:	fb93 f3fe 	sdiv	r3, r3, lr
 8007634:	b21b      	sxth	r3, r3
{
 8007636:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8007638:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
    pHandle->F3POW2 = 0U;
 800763c:	8641      	strh	r1, [r0, #50]	; 0x32
    while (htempk != 0)
 800763e:	b30b      	cbz	r3, 8007684 <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 8007640:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 8007642:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 8007646:	f102 0c01 	add.w	ip, r2, #1
 800764a:	105b      	asrs	r3, r3, #1
 800764c:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 800764e:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 8007652:	fa1f f28c 	uxth.w	r2, ip
 8007656:	d1f4      	bne.n	8007642 <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8007658:	b20a      	sxth	r2, r1
 800765a:	8660      	strh	r0, [r4, #50]	; 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 800765c:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007660:	480a      	ldr	r0, [pc, #40]	; (800768c <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 8007662:	8622      	strh	r2, [r4, #48]	; 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007664:	17cb      	asrs	r3, r1, #31
 8007666:	fb80 0101 	smull	r0, r1, r0, r1
 800766a:	ebc3 2121 	rsb	r1, r3, r1, asr #8
    STO_PLL_Clear(pHandle);
 800766e:	4620      	mov	r0, r4
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007670:	8561      	strh	r1, [r4, #42]	; 0x2a
    STO_PLL_Clear(pHandle);
 8007672:	f7ff ffad 	bl	80075d0 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 8007676:	f104 0034 	add.w	r0, r4, #52	; 0x34
 800767a:	f7fe faef 	bl	8005c5c <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 800767e:	2300      	movs	r3, #0
 8007680:	8263      	strh	r3, [r4, #18]
}
 8007682:	bd10      	pop	{r4, pc}
 8007684:	4671      	mov	r1, lr
 8007686:	e7eb      	b.n	8007660 <STO_PLL_Init+0x44>
 8007688:	000fea5e 	.word	0x000fea5e
 800768c:	06488dc5 	.word	0x06488dc5

08007690 <STO_PLL_IsObserverConverged>:
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;
    int32_t wAux;
    int32_t wtemp;

    if (true == pHandle->ForceConvergency2)
 8007690:	f890 3123 	ldrb.w	r3, [r0, #291]	; 0x123
 8007694:	b113      	cbz	r3, 800769c <STO_PLL_IsObserverConverged+0xc>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007696:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 800769a:	800b      	strh	r3, [r1, #0]
    }

    if (true == pHandle->ForceConvergency)
 800769c:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 80076a0:	b133      	cbz	r3, 80076b0 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 80076a2:	2301      	movs	r3, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 80076a4:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 80076a6:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 80076aa:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 80076ac:	4618      	mov	r0, r3
 80076ae:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 80076b0:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80076b4:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
{
 80076b8:	b510      	push	{r4, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 80076ba:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 80076be:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 80076c2:	4614      	mov	r4, r2
      if (wtemp > 0)
 80076c4:	dd3b      	ble.n	800773e <STO_PLL_IsObserverConverged+0xae>
        if (hEstimatedSpeedUnit < 0)
 80076c6:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 80076ca:	bfbc      	itt	lt
 80076cc:	f1cc 0c00 	rsblt	ip, ip, #0
 80076d0:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 80076d4:	2a00      	cmp	r2, #0
 80076d6:	db34      	blt.n	8007742 <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 80076d8:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
 80076dc:	b362      	cbz	r2, 8007738 <STO_PLL_IsObserverConverged+0xa8>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 80076de:	f8b0 1114 	ldrh.w	r1, [r0, #276]	; 0x114
 80076e2:	fa1f f28c 	uxth.w	r2, ip
 80076e6:	4291      	cmp	r1, r2
 80076e8:	d226      	bcs.n	8007738 <STO_PLL_IsObserverConverged+0xa8>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 80076ea:	f890 2113 	ldrb.w	r2, [r0, #275]	; 0x113
 80076ee:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 80076f2:	2a00      	cmp	r2, #0
 80076f4:	bfb8      	it	lt
 80076f6:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 80076f8:	f342 120f 	sbfx	r2, r2, #4, #16
 80076fc:	4594      	cmp	ip, r2
 80076fe:	db1b      	blt.n	8007738 <STO_PLL_IsObserverConverged+0xa8>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007700:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 8007704:	fb04 f202 	mul.w	r2, r4, r2
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 8007708:	2a00      	cmp	r2, #0
 800770a:	bfb8      	it	lt
 800770c:	320f      	addlt	r2, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 800770e:	f342 120f 	sbfx	r2, r2, #4, #16
 8007712:	4594      	cmp	ip, r2
 8007714:	dc10      	bgt.n	8007738 <STO_PLL_IsObserverConverged+0xa8>
                pHandle->ConsistencyCounter++;
 8007716:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800771a:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
                pHandle->ConsistencyCounter++;
 800771e:	3201      	adds	r2, #1
 8007720:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007722:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 8007724:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007728:	d809      	bhi.n	800773e <STO_PLL_IsObserverConverged+0xae>
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800772a:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800772c:	2301      	movs	r3, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800772e:	7002      	strb	r2, [r0, #0]
      pHandle->IsAlgorithmConverged = true;
 8007730:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
}
 8007734:	4618      	mov	r0, r3
 8007736:	bd10      	pop	{r4, pc}
                pHandle->ConsistencyCounter = 0U;
 8007738:	2200      	movs	r2, #0
 800773a:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
}
 800773e:	4618      	mov	r0, r3
 8007740:	bd10      	pop	{r4, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 8007742:	4252      	negs	r2, r2
 8007744:	b212      	sxth	r2, r2
 8007746:	800a      	strh	r2, [r1, #0]
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007748:	4614      	mov	r4, r2
        if (true == pHandle->IsSpeedReliable)
 800774a:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
 800774e:	2a00      	cmp	r2, #0
 8007750:	d0f2      	beq.n	8007738 <STO_PLL_IsObserverConverged+0xa8>
 8007752:	e7c4      	b.n	80076de <STO_PLL_IsObserverConverged+0x4e>

08007754 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 8007754:	6800      	ldr	r0, [r0, #0]
 8007756:	2100      	movs	r1, #0
 8007758:	3034      	adds	r0, #52	; 0x34
 800775a:	f7fe ba87 	b.w	8005c6c <PID_SetIntegralTerm>
 800775e:	bf00      	nop

08007760 <STO_ResetPLL>:
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8007760:	2100      	movs	r1, #0
 8007762:	3034      	adds	r0, #52	; 0x34
 8007764:	f7fe ba82 	b.w	8005c6c <PID_SetIntegralTerm>

08007768 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 8007768:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 800776a:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800776e:	4770      	bx	lr

08007770 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 8007770:	6803      	ldr	r3, [r0, #0]
 8007772:	2201      	movs	r2, #1
 8007774:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007778:	4770      	bx	lr
 800777a:	bf00      	nop

0800777c <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 800777c:	6803      	ldr	r3, [r0, #0]
 800777e:	2201      	movs	r2, #1
 8007780:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop

08007788 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 8007788:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop

08007790 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8007790:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8007792:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 8007794:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 8007796:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 800779a:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 800779c:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 800779e:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 80077a0:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 80077a2:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80077a4:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 80077a6:	6303      	str	r3, [r0, #48]	; 0x30

    pHandle->bCopyObserver = false;
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop

080077ac <VSS_Init>:
{
 80077ac:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 80077ae:	f7ff ffef 	bl	8007790 <VSS_Clear>
}
 80077b2:	bd08      	pop	{r3, pc}

080077b4 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 80077b4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 80077b8:	b123      	cbz	r3, 80077c4 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 80077ba:	f9b1 3000 	ldrsh.w	r3, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 80077be:	8083      	strh	r3, [r0, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	4770      	bx	lr
{
 80077c4:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80077c6:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80077ca:	8e03      	ldrh	r3, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80077cc:	88c5      	ldrh	r5, [r0, #6]
      if (true == pHandle->bTransitionStarted)
 80077ce:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80077d2:	7842      	ldrb	r2, [r0, #1]
 80077d4:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80077d8:	4463      	add	r3, ip
 80077da:	fa1f fe83 	uxth.w	lr, r3
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80077de:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80077e0:	b21b      	sxth	r3, r3
 80077e2:	8603      	strh	r3, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80077e4:	80c2      	strh	r2, [r0, #6]
      if (true == pHandle->bTransitionStarted)
 80077e6:	b1fc      	cbz	r4, 8007828 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 80077e8:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 80077ec:	b1fa      	cbz	r2, 800782e <VSS_CalcElAngle+0x7a>
          pHandle->hTransitionRemainingSteps--;
 80077ee:	3a01      	subs	r2, #1
 80077f0:	b212      	sxth	r2, r2
 80077f2:	85c2      	strh	r2, [r0, #46]	; 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 80077f4:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 80077f8:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 80077fa:	db28      	blt.n	800784e <VSS_CalcElAngle+0x9a>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 80077fc:	eba1 0e0e 	sub.w	lr, r1, lr
 8007800:	fa0f fe8e 	sxth.w	lr, lr
 8007804:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8007806:	f9b0 4036 	ldrsh.w	r4, [r0, #54]	; 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800780a:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800780e:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8007812:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 8007816:	fb12 f205 	smulbb	r2, r2, r5
 800781a:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800781c:	db10      	blt.n	8007840 <VSS_CalcElAngle+0x8c>
            pHandle->bTransitionLocked = true;
 800781e:	2301      	movs	r3, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8007820:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 8007822:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8007826:	b213      	sxth	r3, r2
    pHandle->_Super.hElAngle = hRetAngle;
 8007828:	8083      	strh	r3, [r0, #4]
}
 800782a:	4618      	mov	r0, r3
 800782c:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800782e:	f9b1 3000 	ldrsh.w	r3, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8007832:	7002      	strb	r2, [r0, #0]
          pHandle->bTransitionEnded = true;
 8007834:	2401      	movs	r4, #1
 8007836:	f880 402d 	strb.w	r4, [r0, #45]	; 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800783a:	8083      	strh	r3, [r0, #4]
}
 800783c:	4618      	mov	r0, r3
 800783e:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 8007840:	f890 4032 	ldrb.w	r4, [r0, #50]	; 0x32
 8007844:	2c00      	cmp	r4, #0
 8007846:	d0ef      	beq.n	8007828 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 8007848:	440a      	add	r2, r1
 800784a:	b213      	sxth	r3, r2
 800784c:	e7ec      	b.n	8007828 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800784e:	ebae 0e01 	sub.w	lr, lr, r1
 8007852:	fa0f fe8e 	sxth.w	lr, lr
 8007856:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800785a:	e7d4      	b.n	8007806 <VSS_CalcElAngle+0x52>

0800785c <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800785c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800785e:	2b01      	cmp	r3, #1
 8007860:	d923      	bls.n	80078aa <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 8007862:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007864:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007866:	6a04      	ldr	r4, [r0, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8007868:	8b43      	ldrh	r3, [r0, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800786a:	4422      	add	r2, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800786c:	ea4f 4c22 	mov.w	ip, r2, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8007870:	69c4      	ldr	r4, [r0, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007872:	6242      	str	r2, [r0, #36]	; 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8007874:	fb0c f303 	mul.w	r3, ip, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8007878:	7842      	ldrb	r2, [r0, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800787a:	f8a0 c00e 	strh.w	ip, [r0, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 800787e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8007882:	fb04 f202 	mul.w	r2, r4, r2
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8007886:	005b      	lsls	r3, r3, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 8007888:	fb93 f3f2 	sdiv	r3, r3, r2
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 800788c:	b21b      	sxth	r3, r3
 800788e:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 8007890:	8d02      	ldrh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007892:	8183      	strh	r3, [r0, #12]
      pHandle->hRemainingStep--;
 8007894:	1e53      	subs	r3, r2, #1
 8007896:	8503      	strh	r3, [r0, #40]	; 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 8007898:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 800789c:	b983      	cbnz	r3, 80078c0 <VSS_CalcAvrgMecSpeedUnit+0x64>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 800789e:	78c2      	ldrb	r2, [r0, #3]
 80078a0:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 80078a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80078a6:	4618      	mov	r0, r3
 80078a8:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 80078aa:	d00d      	beq.n	80078c8 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80078ac:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80078b0:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 80078b2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80078b6:	bb03      	cbnz	r3, 80078fa <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80078b8:	78c2      	ldrb	r2, [r0, #3]
 80078ba:	7002      	strb	r2, [r0, #0]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	4770      	bx	lr
 80078c0:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 80078c4:	f7ff bbcc 	b.w	8007060 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 80078c8:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 80078cc:	f8a1 c000 	strh.w	ip, [r1]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80078d0:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80078d2:	69c2      	ldr	r2, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80078d4:	f8a0 c00c 	strh.w	ip, [r0, #12]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80078d8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80078dc:	fb02 f20c 	mul.w	r2, r2, ip
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80078e0:	005b      	lsls	r3, r3, #1
 80078e2:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 80078e6:	7842      	ldrb	r2, [r0, #1]
 80078e8:	fb12 f303 	smulbb	r3, r2, r3
 80078ec:	81c3      	strh	r3, [r0, #14]
    if (false == pHandle->bTransitionEnded)
 80078ee:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
      pHandle->hRemainingStep = 0U;
 80078f2:	2200      	movs	r2, #0
 80078f4:	8502      	strh	r2, [r0, #40]	; 0x28
    if (false == pHandle->bTransitionEnded)
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d0de      	beq.n	80078b8 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 80078fa:	f7ff bbb1 	b.w	8007060 <SPD_IsMecSpeedReliable>
 80078fe:	bf00      	nop

08007900 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007900:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8007902:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007904:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 8007908:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800790a:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800790c:	4770      	bx	lr
 800790e:	bf00      	nop

08007910 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8007910:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007914:	b99b      	cbnz	r3, 800793e <VSS_SetMecAcceleration+0x2e>
{
 8007916:	b510      	push	{r4, lr}
    {
      if (0U == hDurationms)
 8007918:	b992      	cbnz	r2, 8007940 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800791a:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800791c:	69c4      	ldr	r4, [r0, #28]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800791e:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007920:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007924:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007928:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800792a:	fb9c f3f3 	sdiv	r3, ip, r3

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800792e:	f890 c001 	ldrb.w	ip, [r0, #1]

        pHandle->hRemainingStep = 0U;
 8007932:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007934:	fb1c f303 	smulbb	r3, ip, r3
 8007938:	81c3      	strh	r3, [r0, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800793a:	8541      	strh	r1, [r0, #42]	; 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800793c:	bd10      	pop	{r4, pc}
 800793e:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8007940:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8007942:	4c16      	ldr	r4, [pc, #88]	; (800799c <VSS_SetMecAcceleration+0x8c>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007944:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8007948:	fb03 f202 	mul.w	r2, r3, r2
 800794c:	fba4 2302 	umull	r2, r3, r4, r2
 8007950:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8007954:	3301      	adds	r3, #1
 8007956:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 8007958:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 800795a:	b923      	cbnz	r3, 8007966 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800795c:	ea4f 430c 	mov.w	r3, ip, lsl #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007960:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007962:	6243      	str	r3, [r0, #36]	; 0x24
}
 8007964:	bd10      	pop	{r4, pc}
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007966:	8b42      	ldrh	r2, [r0, #26]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007968:	7844      	ldrb	r4, [r0, #1]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800796a:	8541      	strh	r1, [r0, #42]	; 0x2a
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800796c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007970:	ea4f 0e42 	mov.w	lr, r2, lsl #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007974:	69c2      	ldr	r2, [r0, #28]
 8007976:	fb01 f202 	mul.w	r2, r1, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800797a:	fb92 f2fe 	sdiv	r2, r2, lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 800797e:	fb9c fef4 	sdiv	lr, ip, r4
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8007982:	eba2 020e 	sub.w	r2, r2, lr
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8007986:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8007988:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 800798c:	fb04 f303 	mul.w	r3, r4, r3
 8007990:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007992:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8007996:	6243      	str	r3, [r0, #36]	; 0x24
 8007998:	e7e4      	b.n	8007964 <VSS_SetMecAcceleration+0x54>
 800799a:	bf00      	nop
 800799c:	10624dd3 	.word	0x10624dd3

080079a0 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 80079a0:	b151      	cbz	r1, 80079b8 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 80079a2:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
      pHandle->bTransitionStarted = true;
 80079a6:	2201      	movs	r2, #1
 80079a8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
      if (0 == pHandle->hTransitionSteps)
 80079ac:	b923      	cbnz	r3, 80079b8 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 80079ae:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 80079b2:	7003      	strb	r3, [r0, #0]
        bAux = false;
 80079b4:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 80079b6:	4770      	bx	lr
  bool bAux = true;
 80079b8:	2001      	movs	r0, #1
 80079ba:	4770      	bx	lr

080079bc <VSS_TransitionEnded>:
#ifdef NULL_PTR_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 80079bc:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 80079c0:	4770      	bx	lr
 80079c2:	bf00      	nop

080079c4 <VSS_SetCopyObserver>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->bCopyObserver = true;
 80079c4:	2301      	movs	r3, #1
 80079c6:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 80079ca:	4770      	bx	lr

080079cc <__libc_init_array>:
 80079cc:	b570      	push	{r4, r5, r6, lr}
 80079ce:	4d0d      	ldr	r5, [pc, #52]	; (8007a04 <__libc_init_array+0x38>)
 80079d0:	4c0d      	ldr	r4, [pc, #52]	; (8007a08 <__libc_init_array+0x3c>)
 80079d2:	1b64      	subs	r4, r4, r5
 80079d4:	10a4      	asrs	r4, r4, #2
 80079d6:	2600      	movs	r6, #0
 80079d8:	42a6      	cmp	r6, r4
 80079da:	d109      	bne.n	80079f0 <__libc_init_array+0x24>
 80079dc:	4d0b      	ldr	r5, [pc, #44]	; (8007a0c <__libc_init_array+0x40>)
 80079de:	4c0c      	ldr	r4, [pc, #48]	; (8007a10 <__libc_init_array+0x44>)
 80079e0:	f000 f820 	bl	8007a24 <_init>
 80079e4:	1b64      	subs	r4, r4, r5
 80079e6:	10a4      	asrs	r4, r4, #2
 80079e8:	2600      	movs	r6, #0
 80079ea:	42a6      	cmp	r6, r4
 80079ec:	d105      	bne.n	80079fa <__libc_init_array+0x2e>
 80079ee:	bd70      	pop	{r4, r5, r6, pc}
 80079f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079f4:	4798      	blx	r3
 80079f6:	3601      	adds	r6, #1
 80079f8:	e7ee      	b.n	80079d8 <__libc_init_array+0xc>
 80079fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80079fe:	4798      	blx	r3
 8007a00:	3601      	adds	r6, #1
 8007a02:	e7f2      	b.n	80079ea <__libc_init_array+0x1e>
 8007a04:	08007cd4 	.word	0x08007cd4
 8007a08:	08007cd4 	.word	0x08007cd4
 8007a0c:	08007cd4 	.word	0x08007cd4
 8007a10:	08007cd8 	.word	0x08007cd8

08007a14 <memset>:
 8007a14:	4402      	add	r2, r0
 8007a16:	4603      	mov	r3, r0
 8007a18:	4293      	cmp	r3, r2
 8007a1a:	d100      	bne.n	8007a1e <memset+0xa>
 8007a1c:	4770      	bx	lr
 8007a1e:	f803 1b01 	strb.w	r1, [r3], #1
 8007a22:	e7f9      	b.n	8007a18 <memset+0x4>

08007a24 <_init>:
 8007a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a26:	bf00      	nop
 8007a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a2a:	bc08      	pop	{r3}
 8007a2c:	469e      	mov	lr, r3
 8007a2e:	4770      	bx	lr

08007a30 <_fini>:
 8007a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a32:	bf00      	nop
 8007a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a36:	bc08      	pop	{r3}
 8007a38:	469e      	mov	lr, r3
 8007a3a:	4770      	bx	lr
